/**
 * File:	include/network/modem/complex.ycp
 * Package:	Network configuration
 * Summary:	Summary, overview and IO dialogs for modems configuration.
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

textdomain "network";

import "Label";
import "Modem";
import "NetworkDevices";
import "Popup";
import "Provider";
import "Routing";
import "Wizard";
import "Wizard_hw";

include "network/routines.ycp";
include "network/summary.ycp";

/**
 * Return a modification status
 * @return true if data was modified
 */
define boolean Modified() {
    return Modem::Modified() || Provider::Modified("modem");
}

/**
 * Commit changes to internal structures
 * @param what what everything should be commited ("modem"|"provider"|"all")
 * @return always `next
 */
define symbol Commit(string what) {
    if(what == "" || what == "all" || what == "modem")
	Modem::Commit();
    if(what == "" || what == "all" || what == "provider")
	Provider::Commit();
    return `next;
}

/**
 * Display finished popup
 * @return dialog result
 */
define symbol FinishDialog() {
    return FinishPopup(Modified(), "modem", "", "mail", ["dialup"]);
}

/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
define symbol ReadDialog() {

    ScreenName("modem-read");

    /* modems read dialog help 1/2 */
    string helptext = _("<P><B><BIG>Initializing Modem Configuration
</BIG></B><BR>Please wait...<BR></P>");

    /* modems read dialog help 2/2 */
    helptext = helptext + _("<P><B><BIG>Aborting the Initialization
</BIG></B><BR>You can safely abort the configuration utility by pressing
<B>Abort</B> now.</P>
");

    Wizard::RestoreHelp(helptext);
    Modem::AbortFunction = ``{return PollAbort();};
    boolean ret = Modem::Read();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
define symbol WriteDialog() {

    ScreenName("modem-write");

    if(!Modified()) return `next;

    /* modems write dialog help 1/2 */
    string helptext = _("<P><B><BIG>Saving Modem Configuration</BIG></B><BR>
Please wait...<BR></P>");

    /* modems write dialog help 2/2 */
    helptext = helptext + _("<P><B><BIG>Aborting Saving</BIG></B><BR>
You can abort the save process by pressing <B>Abort</B>. An additional
dialog may inform you whether it is safe to do so.</P>
");

    Wizard::RestoreHelp(helptext);
    Modem::AbortFunction = ``{return PollAbort() && ReallyAbort();};
    boolean ret = Modem::Write();
    return ret ? `next : `abort;
}

/**
 * Main dialog
 * @return dialog result
 */
define any SummaryDialog() {

    ScreenName("modem-summary");

    /* Modems summary dialog caption */
    string caption = _("Modem Configuration");

    /* modems summary dialog help 1/3 */
    string helptext = _("<p><b><big>Modem Setup</big></b><br>
Here, you can configure your modem.<br></p>");

    /* modems summary dialog help 2/3 */
    helptext = helptext + _("<p><b><big>Adding a Modem:</big></b><br>
Choose a modem from the list of detected modems. If your modem was not
autodetected, use <b>Other (not detected)</b>. Then press <b>Configure</b>.
</p>");

    /* modems summary dialog help 3/3 */
    helptext = helptext + _("<p><b><big>Editing or Deleting:</big></b><br>
If you press <b>Change</b>, an additional dialog opens in which to change the
configuration.</p>");

    list summary = Modem::Summary(true);
    list unconfigured = summary[1]:[];
    string configured = summary[0]:"";

    y2debug("unconfigured=%1",unconfigured);
    /* Frame label */
    term contents = Wizard_hw::DetectedContent(_("Modems to Configure"),
	    unconfigured, false, configured);

    Wizard::SetContentsButtons(caption, contents, helptext,
	    Label::BackButton(), Label::FinishButton());

    any ret = nil;
    while(true) {

	ret = UI::UserInput();
	y2debug("ret=%1", ret);

	/* abort? */
	if(ret == `abort || ret == `cancel || ret == `back) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	/* overview dialog */
	else if(ret == `edit_button) {
	    ret = `overview;
	    break;
	}
	/* configure the selected card */
	else if(ret == `configure_button || ret == `detected_selbox) {
	    Modem::Add();
	    Provider::Add("modem");
	    any selected = UI::QueryWidget(`id(`detected_selbox), `CurrentItem);
	    if(selected == `other) {
		ret = `other;
	    }
	    else {
		Modem::SelectHW((integer) selected);
		if(Modem::Requires != [] && Modem::Requires != nil) {
		    if(PackagesInstall(Modem::Requires) != `next)
			continue;
		}
		ret = `configure;
	    }
	    break;
	}
	else if(ret == `next) {
	    break;
	}
	else {
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }

    return ret;
}

/**
 * Overview dialog
 * @return dialog result
 */
define any OverviewDialog() {

    ScreenName("modem-overview");

    /* Modems overview dialog caption */
    string caption = _("Modem Configuration Overview");

    /* modems overview dialog help 1/3 */
    string helptext = _("<P><B><BIG>Modem Overview</BIG></B><BR>
Here, get an overview of installed modems. Additionally,
edit their configuration.<BR></P>");

    /* modems overview dialog help 2/3 */
    helptext = helptext + _("<P><B><BIG>Adding a Modem:</BIG></B><BR>
If you press <B>Add</B>, you can manually configure a modem.</P>
");

    /* modems overview dialog help 3/3 */
    helptext = helptext + _("<P><B><BIG>Editing or Deleting:</BIG></B><BR>
Choose a modem for which to change or remove the configuration.
Then press the appropriate button: <B>Edit</B> or <B>Delete</B>.</P>");

    list overview = Modem::Overview();
    list overviewp = Provider::Overview("modem");
    y2debug("overview=%1",overview);
    y2debug("overviewp=%1",overviewp);

    term contents = OverviewTableDouble(
	/* Table label */
	_("Modems"),
	/* Table header */
	`header(/*_("No."), */_("Device"), _("Type"), _("Provider")),
	overview,
	/* Table label */
	_("Providers"),
	/* Table header */
	`header(_("Name"), _("Provider"), _("Phone")),
	overviewp
    );

    Wizard::SetContentsButtons(caption, contents, helptext,
	    Label::BackButton(), Label::FinishButton());

    if(size(overview) < 1) {
	UI::ChangeWidget(`id(`edit), `Enabled, false);
	UI::ChangeWidget(`id(`delete), `Enabled, false);
    }

    if(size(overviewp) < 1) {
	UI::ChangeWidget(`id(`Edit), `Enabled, false);
	UI::ChangeWidget(`id(`Delete), `Enabled, false);
    }

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	/* add */
	else if(ret == `add) {
	    Modem::Add();
	    Provider::Add("modem");
	    break;
	}
	/* edit */
	else if(ret == `edit || ret == `table) {
	    string dev = (string) UI::QueryWidget(`id(`table), `CurrentItem);
	    if(dev == nil) {
		y2error("Empty device during Edit");
		continue;
	    }
	    Modem::Edit(dev);
	    Provider::Edit(Provider::Name);
	    ret = `edit;
	    break;
	}
	/* delete */
	else if(ret == `delete) {
	    string dev = (string) UI::QueryWidget(`id(`table), `CurrentItem);
	    Modem::Delete(dev);
	    Modem::Commit();
	    overview = Modem::Overview();
	    UI::ChangeWidget(`id(`table), `Items, overview);
	    if(size(overview) < 1) {
		UI::ChangeWidget(`id(`edit), `Enabled, false);
		UI::ChangeWidget(`id(`delete), `Enabled, false);
	    }
	    y2debug("overview=%1",overview);
	    continue;
	}
	/* provider add */
	else if(ret == `Add) {
	    Provider::Add("modem");
	    break;
	}
	/* provider edit */
	else if(ret == `Edit || ret == `Table) {
	    string dev = (string) UI::QueryWidget(`id(`Table), `CurrentItem);
	    if(dev == nil) {
		y2error("Empty device during Edit");
		continue;
	    }
	    Provider::Edit(dev);
	    ret = `Edit;
	    break;
	}
	/* provider delete */
	else if(ret == `Delete) {
	    string dev = (string) UI::QueryWidget(`id(`Table), `CurrentItem);

	    /* Check default route for remote IP (#10739) */
	    if(Provider::Select(dev)) {
		string ip = Provider::Current["IPADDR"]:"";
		string defgw = Routing::GetGateway();
		y2debug("ip=%1", ip);
		y2debug("defgw=%1", defgw);
		if(ip != "" && ip != nil && ip == defgw) {
		    y2debug("Deleting default gateway");
		    /* Popup text */
		    string pop = _("The default route was set to the deleted provider.
Delete it as well?
");
		    /*
		    if(Popup::YesNo(pop)) {
			// XXX DeleteGateway();
		    }
		    */
		}
	    }

	    /* Check if the provider is not used (#17497) */
	    if(NetworkDevices::LocateProvider(dev)) {
		y2debug("Provider used: %1", dev);

		/* Popup text */
		Popup::Error(sformat(_("The provider %1 is in use."), dev));
		continue;

		/* Popup text */
		string pop = sformat(_("The provider %1 is in use. Really delete it?"), dev);
		if(!Popup::YesNo(pop)) continue;
	    }

	    /* Delete the provider */
	    Provider::Delete(dev);
	    Provider::Commit();
	    overviewp = Provider::Overview("modem");
	    UI::ChangeWidget(`id(`Table), `Items, overviewp);
	    if(size(overviewp) < 1) {
		UI::ChangeWidget(`id(`Edit), `Enabled, false);
		UI::ChangeWidget(`id(`Delete), `Enabled, false);
	    }
	    y2debug("overviewp=%1",overviewp);
	    continue;
	}
	else if(ret == `next || ret == `back) {
	    break;
	}
	else {
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }

    return ret;
}

/* EOF */
}
