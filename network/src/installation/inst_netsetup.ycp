/**
 * File:	clients/inst_netsetup.ycp
 * Package:	Network configuration
 * Summary:	Setup network in continue mode if required
 * Authors:	Arvin Schnell <arvin@suse.de>
 *
 * $Id$
 *
 * This is broken by design, see also #116537.
 * It overlaps create_interface from the 1st stage.
 */

{

import "Arch";
import "Installation";
import "Linuxrc";
import "Mode";
import "String";

//symbol mode = (symbol) WFM::Args (2);
symbol mode = `up;

y2milestone("----------------------------------------");
y2milestone("Lan netsetup module started");
y2milestone("Args: %1", WFM::Args());


/**
 * @param key install.inf key (case sensitive)
 * @return value or ""
 */ 
define string InstallInf (string key) {
    string val = Linuxrc::InstallInf (key);
    return (val == nil)? "": val;
}

string netdevice = InstallInf ("Netdevice");
if (netdevice == "") netdevice = "eth0";

string netconfig = InstallInf ("NetConfig");
if (netconfig == "") netconfig = "static";
if (netconfig == "dhcp") netconfig = "static"; // FIXME

string ipaddr = InstallInf ("IP");
string netmask = InstallInf ("Netmask");
string gateway = InstallInf ("Gateway");
string hwaddr = InstallInf ("HWAddr");
string nameserver = InstallInf ("Nameserver");
string domain = InstallInf ("Domain");

// LC_MESSAGES is useless if LC_ALL overrides it, #116537c47
map<string, string> c_locale = $["LANGUAGE": "", "LC_ALL": "C"];

/**
 * Log the current interface setup
 * @param tag an arbitrary tag to identify the caller
 */
define void ShowIfconfig (string tag) {
    // stderr is put to the log more nicely
    any retcode = SCR::Execute (.target.bash, "/sbin/ip addr >&2", c_locale);
    y2milestone ("%1: %2", tag, retcode);
    retcode = SCR::Execute (.target.bash, "/sbin/ifconfig -a >&2", c_locale);
    y2milestone ("%1: %2", tag, retcode);
}

y2milestone("Original netdevice: %1 (%2)", netdevice, hwaddr);

/**
 * Use the MAC address to find which interface to set up.
 */
define void UpdateNetdevice () {
    ShowIfconfig ("installation interface");
    sleep (5000);  // similar to netwait 5, some cards need to wake up
    ShowIfconfig ("installation interface after waiting");
    string command = sformat("/sbin/ifconfig -a | grep -i \"HWaddr *%1\" | cut -d\" \" -f1", hwaddr);
    map output = (map) SCR::Execute(.target.bash_output, command, c_locale);
    y2milestone("Output: %1", output);
    if(output != nil) {
	string newdevice = output["stdout"]:"";
	newdevice = String::FirstChunk (newdevice, "\n");
	if(newdevice != "" && newdevice != nil)
	    netdevice = newdevice;
	else			// just in case
	{
	    command = sformat ("/sbin/ip -family link -oneline addr | sed -n -e '/%1/I{s/^[0-9]*: \\([^:]*\\).*/\\1/;p;}'", hwaddr);
	    output = (map) SCR::Execute(.target.bash_output, command, c_locale);
	    y2milestone("Output: %1", output);
	    newdevice = String::FirstChunk (output["stdout"]:"", "\n");
	    if(newdevice != "" && newdevice != nil)
		netdevice = newdevice;
	}
	y2milestone("Updated netdevice: %1 (%2)", netdevice, newdevice);
    }
}

define void load_modules () {
    y2milestone("Loaded Modules: %1", SCR::Read(.target.string, "/proc/modules"));

    list<string> install_aliases = SCR::Dir (.etc.install_inf_alias);
    foreach (string alias, install_aliases, {
	string target = (string) SCR::Read (add (.etc.install_inf_alias, alias));
	string module_options = "";
	any options = SCR::Read (add (.etc.install_inf_options, target));
	if (options!=nil && options != "") {
	    module_options = (string)options;
	}

	y2milestone("Loading module: %1 (options: %2)", target, module_options);
	SCR::Execute (.target.modprobe, target, module_options);
    });
}


/**
 *  Keep this function in sync with the create_interface code
 *  in inst_finish.
 */
define boolean do_network_setup ()
{
    if (Mode::test () || Linuxrc::display_ip () || Linuxrc::vnc () || Linuxrc::usessh ()) {
	y2milestone("NOT doing the basic network setup");
	return false;
    }

    return true;
}


if (mode == `up)
{
    if (do_network_setup ())
    {
	SCR::Execute (.target.bash, "/sbin/ifconfig lo 127.0.0.1 up");

	if ((Installation::boot () == "nfs") || (Installation::boot () == "http") ||
	    (Installation::boot () == "smb") || (Installation::boot () == "ftp"))
	{
	    if (netconfig == "static")
	    {
		load_modules ();
		if (hwaddr != "")
		{
		    // do it only after loading the modules, #116537
		    UpdateNetdevice ();
		}

		string ifconfig = "/sbin/ifconfig " + netdevice + " up " + ipaddr;
		if (netmask != "")
		    ifconfig = ifconfig + " netmask " + netmask;
		y2milestone("Setting up device: %1", ifconfig);
		SCR::Execute (.target.bash, ifconfig);

		if (gateway != "")
		{
		    string route = "/sbin/route add default gw " + gateway;
		    SCR::Execute (.target.bash, route);
		    y2milestone("Setting up route: %1", route);
		}

		if (nameserver != "")
		{
		    string rc_fn = "/etc/resolv.conf";
		    // don't overwrite it during update
		    if (SCR::Read (.target.size, rc_fn) < 1)
		    {
			string rc =
			    "# yast2 needs a nameserver (inst_netsetup)\n" +
			    "nameserver " + nameserver + "\n";
			if (domain != "")
			{
			    rc = rc + "domain " + domain + "\n";
			}
			SCR::Write (.target.string, rc_fn, rc);
		    }
		}
	    }
	    else if (netconfig == "dhcp")
	    {
		// FIXME
		y2milestone ("DHCP UNUSED");
	    }
	    else
	    {
		y2error ("unknown netconfig %1", netconfig);
	    }
	}
    }

    if (Installation::boot () == "nfs")
    {
	SCR::Execute (.target.bash, "/sbin/rcportmap start");
    }

    ShowIfconfig ("set up done");
}


// (better do it in the control file, but I don't know which package it is in)
if (mode == `dn)
{
    y2debug ("disable 'down' action, #45317");
}


y2milestone("Lan netsetup module finished");
y2milestone("----------------------------------------");

return `auto;

/* EOF */
}
