{

include "testsuite.ycp";

map R = $[
    "init" : $[
	"scripts" : $[
	    "exists" : true,
	]
    ],
    "probe" : $[
	"system" : [],
    ],
    "target" : $[
	"size" : 1,
	"string" : "Blah\n",
	"tmpdir" : "/tmp",
    ],
];
map E = $[
    "target" : $[
	"bash_output" : $["exit":0],
    ],
];
TESTSUITE_INIT([R],nil);

import "Firewall";

define list FWTEST(list<string> devs, any op) ``{
    Firewall::devices = devs;
    eval(op);
    return Firewall::devices;
}

DUMP("Change(true)");
TEST(``(FWTEST([],``(Firewall::Change("eth0",true)))), [R,$[],E], nil);
TEST(``(FWTEST(["eth1"],``(Firewall::Change("eth0",true)))), [R,$[],E], nil);
TEST(``(FWTEST(["eth0"],``(Firewall::Change("eth0",true)))), [R,$[],E], nil);
TEST(``(FWTEST(["eth0"],``(Firewall::Change("ppp1",true)))), [R,$[],E], nil);
TEST(``(FWTEST(["modem"],``(Firewall::Change("ppp1",true)))), [R,$[],E], nil);

DUMP("Change(false)");
TEST(``(FWTEST([],``(Firewall::Change("eth0",false)))), [R,$[],E], nil);
TEST(``(FWTEST(["eth0"],``(Firewall::Change("eth0",false)))), [R,$[],E], nil);
TEST(``(FWTEST(["eth0", "eth1"],``(Firewall::Change("eth0",false)))), [R,$[],E], nil);
TEST(``(FWTEST(["eth1"],``(Firewall::Change("eth0",false)))), [R,$[],E], nil);
TEST(``(FWTEST(["eth1"],``(Firewall::Change("ppp1",false)))), [R,$[],E], nil);
TEST(``(FWTEST(["eth1", "modem"],``(Firewall::Change("ppp1",false)))), [R,$[],E], nil);
TEST(``(FWTEST(["modem"],``(Firewall::Change("ppp1",false)))), [R,$[],E], nil);

DUMP("Query");
TEST(``(FWTEST([],``(Firewall::Query("eth0")))), [R,$[],E], nil);
TEST(``(FWTEST(["eth0"],``(Firewall::Query("eth0")))), [R,$[],E], nil);
TEST(``(FWTEST(["eth1"],``(Firewall::Query("eth0")))), [R,$[],E], nil);
TEST(``(FWTEST(["modem"],``(Firewall::Query("eth0")))), [R,$[],E], nil);
TEST(``(FWTEST(["modem"],``(Firewall::Query("ppp1")))), [R,$[],E], nil);
TEST(``(FWTEST(["eth0", "modem"],``(Firewall::Query("ppp1")))), [R,$[],E], nil);
TEST(``(FWTEST(["eth0"],``(Firewall::Query("ppp1")))), [R,$[],E], nil);

DUMP("Write");
Firewall::devices = [ "eth0", "ippp1" ];
TEST(``(Firewall::Write()), [R,$[],E], nil);
Firewall::devices = [ "no", "ippp1" ];
TEST(``(Firewall::Write()), [R,$[],E], nil);

map READ = $[
    "init" : $[
	"scripts" : $[
	    "exists" : true,
	    "runlevel" : $[
		"SuSEfirewall2_init" : $["start":["5"],"stop":["5"]],
		"SuSEfirewall2_setup" : $["start":["5"],"stop":["5"]],
		"SuSEfirewall2_final" : $["start":["5"],"stop":["5"]],
	    ]
	]
    ],
    "sysconfig" : $[
	"SuSEfirewall2" : $[
	    "FW_DEV_EXT" : "eth1 ippp0",
	]
    ],
    "probe" : $[
	"system" : [],
    ],
    "target" : $[
	"size" : 1,
	"string" : "Blah\n",
    ],
];

map EXECUTE = $[
    "target" : $[
	"bash_output" : $["exit":0],
    ],
];

DUMP("Read");
TEST(``(Firewall::Read()), [READ, $[], EXECUTE], nil);
DUMP(sformat("Firewall::devices %1",Firewall::devices));

}
