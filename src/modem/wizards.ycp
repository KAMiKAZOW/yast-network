/**
 * File:
 *   include/network/modem/wizards.ycp
 *
 * Package:
 *   Configuration of network
 *
 * Summary:
 *   User interface functions for modem configuration.
 *
 * Authors:
 *   Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 * Wizards definitions.
 *
 */

{

textdomain "network";

import "Wizard";

include "wizard/sequencer.ycp";

include "network/modem/dialogs.ycp";
/* include "network/modem/"; */
/* other dialogs ... */

include "network/services/dns.ycp";
include "network/services/routing.ycp";

/**
 * Whole configuration of network
 * @return sequence result
 */
global define symbol ModemSequence() ``{

    map aliases = $[
	"read"	: [ ``( ReadDialog() ), true ],
	"main"	:   ``( MainSequence() ),
	"write"	: [ ``( WriteDialog() ), true ]
    ];

    map sequence = $[
	"ws_start" : "read",
	"read" :
	$[
	    `abort	: `abort,
	    `next	: "main"
	],
	"main" :
	$[
	    `abort	: `abort,
	    `next	: "write"
	],
	"write" : $[
	    `abort	: `abort,
	    `next	: `next
	]
    ];

    string caption = _("Modems configuration");
    term contents = `Label(_("Initializing ..."));

    Wizard::CreateDialog();
    Wizard::SetContentsButtons(caption, contents, "",
				BackButtonLabel(), NextButtonLabel());

    symbol ret = WizardSequencer(aliases, sequence);

    UI::CloseDialog();
    return ret;
}

/**
 * Whole configuration of network but without reading and writing.
 * For use with autoinstallation.
 * @return sequence result
 */
global define symbol ModemAutoSequence() ``{
    string caption = _("Modems configuration");
    term contents = `Label(_("Initializing ..."));

    Wizard::CreateDialog();
    Wizard::SetContentsButtons(caption, contents, "",
				BackButtonLabel(), NextButtonLabel());

    symbol ret = MainSequence();

    UI::CloseDialog();
    return ret;
}

/**
 * Main workflow of the network configuration
 * @return sequence result
 */
global define symbol MainSequence() ``{

    map aliases = $[
	"summary"	: ``(SummaryDialog()),
	"overview"	: ``(OverviewDialog()),
	"configure"	: [ ``(AddressSequence()), true ],
	"other"		: [ ``(ManualSequence()), true ],
	"add"		: [ ``(ManualSequence()), true ],
	"edit"		: [ ``(AddressSequence()), true ],
	"commit"	: [ ``(Commit()), true ],
    ];

    map sequence = $[
	"ws_start" : "summary",
	"summary" : $[
	    `abort	: `abort,
	    `next	: `next,
	    `configure	: "configure",
	    `other	: "other",
	    `overview	: "overview"
	],
	"overview" : $[
	    `abort	: `abort,
	    `next	: `next,
	    `add	: "add",
	    `edit	: "edit",
	],
	"other" : $[
	    `abort	: `abort,
	    `next	: "summary",
	],
	"configure" : $[
	    `abort	: `abort,
	    `next	: "summary",
	],
	"commit" : $[
	    `next	: "summary",
	],
	"add" : $[
	    `abort	: `abort,
	    `next	: "overview",
	],
	"edit" : $[
	    `abort	: `abort,
	    `next	: "overview",
	],
    ];

    return WizardSequencer(aliases, sequence);
}

/**
 * Configuration sequence
 * @return sequence result
 */
global define symbol ManualSequence() ``{

    map aliases = $[
	"manual"	: ``(ManualDialog()),
	"list"		: ``(ManualSelection()),
	"address"	: [ ``(AddressSequence()), true ],
    ];

    map sequence = $[
	"ws_start"	: "manual",
	"manual" : $[
	    `abort	: `abort,
	    `list	: "list",
	    `next	: "address",
	],
	"list" : $[
	    `next	: "manual",
	    `abort	: `abort,
	],
	"address" : $[
	    `abort	: `abort,
	    `next	: `next,
	],
    ];

    return WizardSequencer(aliases, sequence);
}

/**
 * Configuration sequence
 * @return sequence result
 */
global define symbol AddressSequence() ``{

    map aliases = $[
	"address"	: ``(AddressDialog()),
	"hostname"	: ``(DNSMainDialog()),
	"routing"	: ``(RoutingMainDialog()),
	"commit"	: [ ``(Commit()), true ],
    ];

    map sequence = $[
	"ws_start"	: "address",
	"address" : $[
	    `abort	: `abort,
	    `next	: "commit",
	    `routing	: "routing",
	    `hostname	: "hostname",
	],
	"routing" : $[
	    `next	: "address",
	],
	"hostname" : $[
	    `next	: "address",
	],
	"commit" : $[
	    `next	: `next,
	],
    ];

    return WizardSequencer(aliases, sequence);
}

/* EOF */
}
