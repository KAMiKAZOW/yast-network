/**
 * File:	include/network/modem/wizards.ycp
 * Package:	Network configuration
 * Summary:	Modem configuration wizards
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

textdomain "network";

import "Wizard";

include "wizard/sequencer.ycp";

include "network/routines.ycp";
include "network/provider/wizards.ycp";
include "network/modem/dialogs.ycp";
include "network/modem/complex.ycp";

/**
 * Whole configuration of modems
 * @return sequence result
 */
global define symbol ModemSequence() ``{

    map aliases = $[
	"read"	: [ ``( ReadDialog() ), true ],
	"main"	:   ``( MainSequence() ),
	"rpm"	: [ ``( Packages(["smpppd"]) ), true ],
	"write"	: [ ``( WriteDialog() ), true ],
	"finish": [ ``( FinishDialog() ), true ],
    ];

    map sequence = $[
	"ws_start" : "read",
	"read" : $[
	    `abort	: `abort,
	    `next	: "main"
	],
	"main" : $[
	    `abort	: `abort,
	    `next	: "rpm"
	],
	"rpm" : $[
	    `abort	: `abort,
	    `next	: "write"
	],
	"write" : $[
	    `abort	: `abort,
	    `next	: "finish"
	],
	"finish" : $[
	    `next	: `next,
	]
    ];

    string caption = _("Modem configuration");
    term contents = `Label(_("Initializing ..."));

    Wizard::CreateDialog();
    Wizard::SetContentsButtons(caption, contents, "",
	    BackButtonLabel(), NextButtonLabel());

    symbol ret = WizardSequencer(aliases, sequence);

    UI::CloseDialog();
    return ret;
}

/**
 * Whole configuration of modems but without reading and writing.
 * For use with autoinstallation.
 * @return sequence result
 */
global define symbol ModemAutoSequence() ``{
    string caption = _("Modem configuration");
    term contents = `Label(_("Initializing ..."));

    Wizard::CreateDialog();
    Wizard::SetContentsButtons(caption, contents, "",
	    BackButtonLabel(), NextButtonLabel());

    symbol ret = MainSequence();

    UI::CloseDialog();
    return ret;
}

/**
 * Main workflow of the modem configuration
 * @return sequence result
 */
global define symbol MainSequence() ``{

    map aliases = $[
	"summary"	: ``(SummaryDialog()),
	"overview"	: ``(OverviewDialog()),
	"configure"	: [ ``(OneModemProviderSequence(true,  false)), true ],
	"other"		: [ ``(OneModemProviderSequence(false, false)), true ],
	"add"		: [ ``(OneModemProviderSequence(false, false)), true ],
	"edit"		: [ ``(OneModemProviderSequence(false, true)),  true ],
	// "edit"		: [ ``(OneModemSequence(false)), true ],
	"Add"		: [ ``(OneProviderSequence(true)), true ],
	"Edit"		: [ ``(OneProviderSequence(false)), true ],
    ];

    map sequence = $[
	"ws_start" : "summary",
	"summary" : $[
	    `abort	: `abort,
	    `next	: `next,
	    `configure	: "configure",
	    `other	: "other",
	    `overview	: "overview"
	],
	"overview" : $[
	    `abort	: `abort,
	    `next	: `next,
	    `add	: "add",
	    `edit	: "edit",
	    `Add	: "Add",
	    `Edit	: "Edit",
	],
	"other" : $[
	    `abort	: `abort,
	    `next	: "summary",
	],
	"configure" : $[
	    `abort	: `abort,
	    `next	: "summary",
	],
	"add" : $[
	    `abort	: `abort,
	    `next	: "overview",
	],
	"edit" : $[
	    `abort	: `abort,
	    `next	: "overview",
	],
	"Add" : $[
	    `abort	: `abort,
	    `next	: "overview",
	],
	"Edit" : $[
	    `abort	: `abort,
	    `next	: "overview",
	],
    ];

    return WizardSequencer(aliases, sequence);
}

/**
 * Workflow of the configuration of one modem
 * @param detected true if modem was detected (more entries otherwise)
 * @param edit true in case of edit sequence
 * @return sequence result
 */
global define symbol OneModemProviderSequence(boolean detected, boolean edit) ``{

    map aliases = $[
	"parameters_detected"	: ``(ModemDialog(true)),
	"parameters"		: ``(ModemDialog(false)),
	"details"		: ``(ModemDetailsDialog()),
	"details_detected"	: ``(ModemDetailsDialog()),
	"providers"		: ``(ProvidersDialog(edit)),
	"provider"		: ``(ProviderDialog()),
	"new_provider"		: ``(ProviderDialog()),
	"connection"		: ``(ConnectionDialog()),
	"ipdetails"		: ``(IPDetailsDialog()),
	"commit"		: [ ``(Commit("")), true ],
    ];

    string entry = "parameters";
    if(detected) entry = "parameters_detected";

    map sequence = $[
	"ws_start" : entry,
	"parameters": $[
	    `next   : "providers",
	    `Details: "details",
	    `abort  : `abort
	],
	"parameters_detected" : $[
	    `next   : "providers",
	    `Details: "details_detected",
	    `abort  : `abort
	],
	"details"   : $[
	    `next   : "parameters",
	    `abort  : `abort
	],
	"details_detected" : $[
	    `next   : "parameters_detected",
	    `abort  : `abort
	],
	"providers" : $[
	    `next   : "provider",
	    `new    : "new_provider",
	    `abort  : `abort
	],
	"provider" : $[
	    `next   : "connection",
	    `abort  : `abort
	],
	"new_provider" : $[
	    `next   : "connection",
	    `abort  : `abort
	],
	"connection" : $[
	    `IPDetails   : "ipdetails",
	    `next   : "commit",
	    `abort  : `abort
	],
	"ipdetails" : $[
	    `next   : "connection",
	    `abort  : `abort
	],
	"commit" : $[
	    `next   : `next,
	],
    ];

    return WizardSequencer(aliases, sequence);
}

/**
 * Workflow of the configuration of one modem
 * @param detected true if modem was detected (more entries otherwise)
 * @return sequence result
 */
global define symbol OneModemSequence(boolean detected) ``{

    map aliases = $[
	"parameters_detected"	: ``(ModemDialog(true)),
	"parameters"		: ``(ModemDialog(false)),
	"details"		: ``(ModemDetailsDialog()),
	"details_detected"	: ``(ModemDetailsDialog()),
	"commit"		: [ ``(Commit("modem")), true ],
    ];

    string entry = "parameters";
    if(detected) entry = "parameters_detected";

    map sequence = $[
	"ws_start" : entry,
	"parameters": $[
	    `next   : "commit",
	    `Details: "details",
	    `abort  : `abort
	],
	"parameters_detected" : $[
	    `next   : "commit",
	    `Details: "details_detected",
	    `abort  : `abort
	],
	"details"   : $[
	    `next   : "parameters",
	    `abort  : `abort
	],
	"details_detected" : $[
	    `next   : "parameters_detected",
	    `abort  : `abort
	],
	"commit" : $[
	    `next   : `next,
	],
    ];

    return WizardSequencer(aliases, sequence);
}

/* EOF */
}
