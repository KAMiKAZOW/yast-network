/**
 * File:	include/network/modem/complex.ycp
 * Package:	Network configuration
 * Summary:	Summary, overview and IO dialogs for modems configuration.
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

textdomain "network";

import "Modem";
import "Provider";

import "Wizard";
import "Wizard_hw";

include "ui/common_popups.ycp";
include "ui/common_messages.ycp";

include "network/routines.ycp";
include "network/complex.ycp";

/**
 * Return a modification status
 * @return true if data was modified
 */
global define boolean Modified() ``{
    return Modem::Modified() || Provider::Modified();
}

/**
 * Commit changes to internal structures
 * @param what what everything should be commited ("modem"|"provider"|"all")
 * @return always `next
 */
global define symbol Commit(string what) ``{
    if(what == "" || what == "all" || what == "modem")
	Modem::Commit();
    if(what == "" || what == "all" || what == "provider")
	Provider::Commit();
    return `next;
}

/**
 * Display finished popup
 * @return dialog result
 */
global define symbol FinishDialog() ``{
    return FinishPopup(Modified(), "modem", "", "mail", ["dialup"]);
}

/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
global define symbol ReadDialog() ``{

    /* modems read dialog help 1/2 */
    string helptext = _("<P><B><BIG>Initializing modem configuration
</BIG></B><BR>Please wait...<BR></P>
");

    /* modems read dialog help 2/2 */
    helptext = helptext + _("<P><B><BIG>Aborting the initialization:
</BIG></B><BR>You can safely abort the configuration utility by pressing
the <B>Abort</B> button now.</P>");

    Wizard::RestoreHelp(helptext);
    Modem::AbortFunction = ``{return PollAbort();};
    boolean ret = Modem::Read();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
global define symbol WriteDialog() ``{
    if(!Modified()) return `next;

    /* modems write dialog help 1/2 */
    string helptext = _("<P><B><BIG>Saving modem configuration</BIG></B><BR>
Please wait...<BR></P>
");

    /* modems write dialog help 2/2 */
    helptext = helptext + _("<P><B><BIG>Aborting the saving:</BIG></B><BR>
You can abort the saving by pressing the <B>Abort</B> button. An additional
dialog will possibly inform you whether it is safe to do so or not.</P>");

    Wizard::RestoreHelp(helptext);
    Modem::AbortFunction = ``{return PollAbort() && ReallyAbort();};
    boolean ret = Modem::Write();
    return ret ? `next : `abort;
}

/**
 * Main dialog
 * @return dialog result
 */
global define symbol SummaryDialog() ``{

    /* Modems summary dialog caption */
    string caption = _("Modem configuration");

    /* modems summary dialog help 1/3 */
    string helptext = _("<P><B><BIG>Modem setup</BIG></B><BR>
Here, you can configure your modem.<BR></P>
");

    /* modems summary dialog help 2/3 */
    helptext = helptext + _("<P><B><BIG>Adding a modem:</BIG></B><BR>
Choose a modem from the list of detected modems. If your modem was not
autodetected, use <B>Other (not detected)</B>. Then press <B>Configure</B>.
</P>
");

    /* modems summary dialog help 3/3 */
    helptext = helptext + _("<P><B><BIG>Editing or deleting:</BIG></B><BR>
If you press <B>Edit</B>, an additional dialog opens in which to change the
configuration.</P>
");

    list summary = Modem::Summary(true);
    list unconfigured = select(summary, 1, []);
    string configured = select(summary, 0, "");

    y2debug("unconfigured=%1",unconfigured);
    /* Frame label */
    term contents = Wizard_hw::DetectedContent(_("Modems to configure"),
	    unconfigured, false, configured);

    Wizard::SetContentsButtons(caption, contents, helptext,
	    BackButtonLabel(), FinishButtonLabel());

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel || ret == `back) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	/* overview dialog */
	else if(ret == `edit_button) {
	    ret = `overview;
	    break;
	}
	/* configure the selected card */
	else if(ret == `configure_button) {
	    Modem::Add();
	    Provider::Add("modem");
	    any selected = UI::QueryWidget(`id(`detected_selbox), `CurrentItem);
	    if(selected == `other) {
		ret = `other;
	    }
	    else {
		Modem::SelectHW(selected);
		ret = `configure;
	    }
	    break;
	}
	else if(ret == `next) {
	    break;
	}
	else {
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }

    return ret;
}

/**
 * Overview dialog
 * @return dialog result
 */
global define symbol OverviewDialog() ``{

    /* Modems overview dialog caption */
    string caption = _("Modem configuration overview");

    /* modems overview dialog help 1/3 */
    string helptext = _("<P><B><BIG>Modem overview</BIG></B><BR>
Here, get an overview of installed modems. Additionally,
edit their configuration.<BR></P>
");

    /* modems overview dialog help 2/3 */
    helptext = helptext + _("<P><B><BIG>Adding a modem:</BIG></B><BR>
If you press <B>Add</B>, you can manually configure a modem.</P>");

    /* modems overview dialog help 3/3 */
    helptext = helptext + _("<P><B><BIG>Editing or deleting:</BIG></B><BR>
Choose a modem for which to change or remove the configuration.
Then press the appropriate button: <B>Edit</B> or <B>Delete</B>.</P>
");

    list overview = Modem::Overview();
    list overviewp = Provider::Overview();
    y2debug("overview=%1",overview);
    y2debug("overviewp=%1",overviewp);

    term contents = OverviewTableDouble(
	/* Table label */
	_("Modems"),
	/* Table header */
	`header(/*_("No."), */_("Device"), _("Type"), _("Provider")),
	overview,
	/* Table label */
	_("Providers"),
	/* Table header */
	`header(_("Name"), _("Provider"), _("Phone")),
	overviewp
    );

    Wizard::SetContentsButtons(caption, contents, helptext,
	    BackButtonLabel(), FinishButtonLabel());

    if(size(overview) < 1) {
	UI::ChangeWidget(`id(`edit), `Enabled, false);
	UI::ChangeWidget(`id(`delete), `Enabled, false);
    }

    if(size(overviewp) < 1) {
	UI::ChangeWidget(`id(`Edit), `Enabled, false);
	UI::ChangeWidget(`id(`Delete), `Enabled, false);
    }

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	/* add */
	else if(ret == `add) {
	    Modem::Add();
	    Provider::Add("modem");
	    break;
	}
	/* edit */
	else if(ret == `edit) {
	    string dev = UI::QueryWidget(`id(`table), `CurrentItem);
	    Modem::Edit(dev);
	    Provider::Edit(Provider::Name);
	    // Provider::AddEdit(Provider::provShortName, false);
	    break;
	}
	/* delete */
	else if(ret == `delete) {
	    string dev = UI::QueryWidget(`id(`table), `CurrentItem);
	    Modem::Delete(dev);
	    Modem::Commit();
	    overview = Modem::Overview();
	    UI::ChangeWidget(`id(`table), `Items, overview);
	    if(size(overview) < 1) {
		UI::ChangeWidget(`id(`edit), `Enabled, false);
		UI::ChangeWidget(`id(`delete), `Enabled, false);
	    }
	    y2debug("overview=%1",overview);
	    continue;
	}
	/* provider add */
	else if(ret == `Add) {
	    Provider::Add("modem");
	    break;
	}
	/* provider edit */
	else if(ret == `Edit) {
	    string dev = UI::QueryWidget(`id(`Table), `CurrentItem);
	    Provider::Edit(dev);
	    break;
	}
	/* provider delete */
	else if(ret == `Delete) {
	    string dev = UI::QueryWidget(`id(`Table), `CurrentItem);
	    Provider::Delete(dev);
	    Provider::Commit();
	    overviewp = Provider::Overview();
	    UI::ChangeWidget(`id(`Table), `Items, overviewp);
	    if(size(overviewp) < 1) {
		UI::ChangeWidget(`id(`Edit), `Enabled, false);
		UI::ChangeWidget(`id(`Delete), `Enabled, false);
	    }
	    y2debug("overviewp=%1",overviewp);
	    continue;
	}
	else if(ret == `next || ret == `back) {
	    break;
	}
	else {
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }

    return ret;
}

/* EOF */
}
