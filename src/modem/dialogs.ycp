/**
 * File:	include/network/modem/dialogs.ycp
 * Package:	Network configuration
 * Summary:	Modem configuration dialogs
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

textdomain "network";

import "Modem";
import "Wizard";

include "ui/common_popups.ycp";
include "network/routines.ycp";

/**
 * Modem dialog
 * @param detected true if the type is detected
 * @return dialog result
 */
global define symbol ModemDialog(boolean detected) ``{

    ScreenName("modem-dialog");

    /* PREPARE VARIABLES */

    /* FIXME make the Connection dialog optional in the provider dialog */

    list devices = maplist(string e, toset([ Modem::Device, "/dev/modem",
		"/dev/ttyS0", "/dev/ttyS1", "/dev/ttyS2", "/dev/ttyS3",
		"/dev/ttyACM0", "/dev/ttyACM1", "/dev/ttyACM2", "/dev/ttyACM3" ]),
	    ``(`item(`id(sformat("%1", e)), sformat("%1", e), e == Modem::Device)));

    /* DIALOG TEXTS */

    /* Modem dialog caption */
    string caption = _("Modem parameters");

    /* Modem dialog help 1/5 */
    string helptext = _("<p>Enter all modem configuration values.</p>") +

    /* Modem dialog help 2/5 */
_("<p><b>Modem device</b> specifies to which port your modem is connected. ttyS0,
ttyS1, etc., refer to serial ports and usually correspond to COM1, COM2, etc.,
in DOS/Windows. ttyACM0 and ttyACM1 refer to USB ports.</p>") +

    /* Modem dialog help 3/5 */
_("<p>If you are on a PBX, you probably need to enter a <b>Dial prefix</b>.
Often, this is <i>9</i> or <i>0</i>.</p>") +

    /* Modem dialog help 4/5 */
_("<p>Choose <b>Dial mode</b> according to your phone link. Most telephone
companies use <i>tone dial</i> as the <b>Dial mode</b>. Check the additional
check boxes to turn on your modem speaker (<i>Speaker on</i>) or for your
modem to wait until it detects a dial tone (<i>Detect Dial tone</i>).</p>") +

    /* Modem dialog help 5/5 */
_("<p>Press <b>Details</b> to configure the baud rate and the modem 
initialization strings.</p>");

    /* DIALOG CONTENTS */

    term DeviceTerm = nil;

    if(detected == true)
	DeviceTerm = `Left(`HBox(
        /* Label text */
	    `Label(_("Modem device:")),
	    `HSpacing(0.5),
	    `Label(`opt(`outputField), Modem::Device)
	));
    else
    /* ComboBox label */
	DeviceTerm = `ComboBox(`id(`Device), `opt(`hstretch, `editable), _("Modem de&vice"), devices);

    term contents = `HBox(
	`HSpacing(6),
	`VBox(
	    `VSpacing(0.2),
	    DeviceTerm,
	    `VSpacing(1),
	    `HBox(
		//`TextEntry(`id(`ModemName), _("&Modem name"), name),
        /* TextEntry label */
		`TextEntry(`id(`DialPrefix), _("Dial prefi&x (if needed)"), Modem::DialPrefix)
	    ),
	    `VSpacing(0.8),
	    `HBox(
        /* Frame label */
		`Frame(_("Dial mode"),
		    `VBox(
			`VSpacing(0.3),
			`HBox(
			    `HSpacing(0.3),
			    `RadioButtonGroup(`id(`DialMode),
				`VBox(
                    /* RadioButton label */
				    `Left(`RadioButton(`id(`Tone), _("&Tone dialing"), !Modem::PulseDial)),
                    /* RadioButton label */
				    `Left(`RadioButton(`id(`Pulse), _("&Pulse dialing"), Modem::PulseDial))
				)
			    ),
			    `HSpacing(0.3)
			),
			`VSpacing(0.3)
		    )
		),
		`HSpacing(1),
        /* Frame label */
		`Frame(_("Special settings"),
		    `HBox(
			`HSpacing(0.3),
			`VBox(
			    `VSpacing(0.3),
                /* Checkbox label */
			    `Left(`CheckBox(`id(`Speaker), _("&Speaker on"), Modem::Speaker)),
                /* Checkbox label */
			    `Left(`CheckBox(`id(`CarrierDetect), _("D&etect Dial Tone"), Modem::Carrier)),
			    `VSpacing(0.3)
			),
			`HSpacing(0.3)
		    )
		)
	    ),
	    `VSpacing(1),
        /* Button label */
	    `PushButton(`id(`Details), _("&Details")),
	    `VSpacing(0.2)
	),
	`HSpacing(6)
    );

    /* DIALOG PREPARE */

    Wizard::SetContentsButtons(caption, contents, helptext,
	    BackButtonLabel(), NextButtonLabel());

    /* MAIN CYCLE */

    symbol ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	/* back */
	else if(ret == `back) {
	    break;
	}
	/* next */
	else if(ret == `next || ret == `Details) {
	    /* check_* */
	    break;
	}
	else {
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}

    }

    /* UPDATE VARIABLES */

    if(ret == `next || ret == `Details) {
	Modem::DialPrefix = UI::QueryWidget(`id(`DialPrefix), `Value);

	if(detected != true)
	    Modem::Device = UI::QueryWidget(`id(`Device), `Value);

	Modem::PulseDial = UI::QueryWidget(`id(`Pulse), `Value);
	Modem::Speaker = UI::QueryWidget(`id(`Speaker), `Value);
	Modem::Carrier = UI::QueryWidget(`id(`CarrierDetect), `Value);
    }

    return ret;
}

/**
 * Modem details dialog
 * @return dialog result
 */
global define symbol ModemDetailsDialog() ``{

    ScreenName("modem-details");

    /* PREPARE VARIABLES */
    integer BaudRate = Modem::BaudRate;
    string Init1 = Modem::Init1;
    string Init2 = Modem::Init2;
    string Init3 = Modem::Init3;


    /* DIALOG TEXTS */

    /* Modem datails dialog caption */
    string caption = _("Modem parameter details");

    /* Modem datails dialog help 1/2 */
    string helptext = _("<p><b>Baud rate</b> is a transmission speed that tells
how many bits per second your computer communicates with your modem.</p>") +

    /* Modem datails dialog help 2/2 */
_("<p>All the relevant information about <b>init strings</b>
should be in your modem manual.</p>");


    /* DIALOG CONTENTS */

    list BaudRates = maplist(string e, toset([1200, 2400, 4800, 9600, 19200, 38400, 57600, 115200, BaudRate]),
	    ``(`item(`id(sformat("%1", e)), sformat("%1", e), e == BaudRate)));

    term contents = `HBox(
	`HSpacing(6),
	`VBox(
	    /* Combo box label */
	    `ComboBox(`id(`Baud), `opt(`hstretch, `editable), _("B&aud rate"), BaudRates),
	    `VSpacing(0.5),
		/* Frame label */
		`Frame(_("Modem initialization strings"),
		`HBox(
		    `HSpacing(0.2),
		    `VBox(
			/* Text entry label */
			`TextEntry(`id(`Init1), _("Init &1"), Init1),
			`VSpacing(0.5),
			/* Text entry label */
			`TextEntry(`id(`Init2), _("Init &2"), Init2),
			`VSpacing(0.5),
			/* Text entry label */
			`TextEntry(`id(`Init3), _("Init &3"), Init3),
			`VSpacing(0.4)
		    ),
		    `HSpacing(0.2)
		)
	    ),
	    `VSpacing(3)
	),
	`HSpacing(6)
    );


    /* DIALOG PREPARE */

    Wizard::SetContentsButtons(caption, contents, helptext,
	    BackButtonLabel(), OKButtonLabel());

    /* MAIN CYCLE */

    symbol ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `back) {
	    break;
	}
	else if(ret == `next) {
	    /* check_* */
	    break;
	}
	else {
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}

    }

    /* UPDATE VARIABLES */

    if(ret == `next) {
	Modem::BaudRate = tointeger(UI::QueryWidget(`id(`Baud), `Value));
	Modem::Init1 = UI::QueryWidget(`id(`Init1), `Value);
	Modem::Init2 = UI::QueryWidget(`id(`Init2), `Value);
	Modem::Init3 = UI::QueryWidget(`id(`Init3), `Value);
    }

    return ret;
}

/* EOF */
}
