/**
 * File:
 *   include/network/modem/dialogs.ycp
 *
 * Package:
 *   Configuration of network
 *
 * Summary:
 *   Modem configuration dialogs
 *
 * Authors:
 *   Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 */

{

textdomain "network";

import "Modem";
import "Wizard";
import "Firewall";

include "ui/common_popups.ycp";
include "network/providers.ycp";
include "network/routines.ycp";

/* DIALOG */

/**
 * Dialog for Modem parameters
 * @param Type detected or not
 * @return symbol user input
 */
global define symbol modem_params(symbol Type) ``{

    /* PREPARE VARIABLES */

    // string name = Modem::name;
    string DialPrefix = Modem::DialPrefix;
    string Device = Modem::Device;

    list Devices = maplist(`e, toset(add([
		    "/dev/modem", "/dev/ttyS0", "/dev/ttyS1", "/dev/ttyS2","/dev/ttyS3",
		    "/dev/ttyACM0", "/dev/ttyACM1", "/dev/ttyACM2", "/dev/ttyACM3"], Device)),
	    ``(`item(`id(e), e, e == Device)));


/* Old code:
    map Modem = lookup(TmpConfiguration, "Modem", $[]);
    map Provider = lookup(TmpConfiguration, "Provider", $[]);
    string name = lookup(Modem, "YaST2 Section", "random_name" /*GenerateRandomModemName() );		// FIXME: function GenerateRandomModemName()
    string DialPrefix = lookup(Modem, "Dial Prefix", "");
    string Device = lookup(Modem, "Modem", "/dev/modem");
    boolean PulseDial = (filterchars(lookup(Modem, "Dial Command", ""), "P") == "P");
    boolean Speaker = (lookup(Modem, "Init8","") == "ATM0");
    boolean Carrier = (lookup(Modem, "Init9","") == "ATX3");

    list Devices = maplist(`e, toset(add([
		    "/dev/modem", "/dev/ttyS0", "/dev/ttyS1", "/dev/ttyS2","/dev/ttyS3",
		    "/dev/ttyACM0", "/dev/ttyACM1", "/dev/ttyACM2", "/dev/ttyACM3"], Device)),
	    ``(`item(`id(e), e, e == Device)));
*/


    /* DIALOG TEXTS */

    /* Modem dialog caption */
    string caption = _("Modem parameters");

    /* Modem dialog help 1/5 */
    string helptext = _("<p>Enter all modem configuration values.</p>") +

    /* Modem dialog help 2/5 */
_("<p><b>Device</b> specifies to which port your modem is connected. ttyS0,
ttyS1, etc., refer to serial ports and usually correspond to COM1, COM2, etc.,
in DOS/Windows. ttyACM0 and ttyACM1 refer to USB ports.</p>") +

    /* Modem dialog help 3/5 */
_("<p>If you are on a PBX, you probably need to enter a <B>Dial prefix</B>.
Often, this is <i>9</i>.</p>") +

    /* Modem dialog help 4/5 */
_("<p>Choose <b>Dial mode</b> according to your phone link. Most telephone
companies use <I>tone dial</I> as the <B>Dial mode</B>. Check the additional
check boxes to turn on your modem speaker (<i>Speaker on</i>)
or for your modem to wait until it detects a dial tone (<i>Detect Dial
tone</i>).</p>") +

    /* Modem dialog help 5/5 */
_("<p>Press <b>Details</b> to configure the baud rate and the modem 
initialization strings.</p>");

    /* DIALOG CONTENTS */

    term DeviceTerm = `ComboBox(`id(`Device), `opt(`hstretch, `editable), _("De&vice"), Devices);
    if (Type == `Detected)
	DeviceTerm = `Label(`opt(`outputField), Device);

    term contents =
	`HSquash(
	    `VBox(
		`VSpacing(0.5),
		DeviceTerm,
		`VSpacing(0.5),
		`HBox(
		    //`TextEntry(`id(`ModemName), _("&Modem name"), name),
		    `TextEntry(`id(`DialPrefix), _("Dial prefi&x (if needed)"), DialPrefix)
		),
		`VSpacing(0.8),
		`HBox(
		    `Frame(_("Dial mode"),
			`VBox(
			    `VSpacing(0.3),
			    `HBox(
			        `HSpacing(0.3),
				`RadioButtonGroup(`id(`DialMode),
				    `VBox(
					`Left(`RadioButton(`id(`Tone), _("&Tone dialing"), !Modem::PulseDial)),
					`Left(`RadioButton(`id(`Pulse), _("&Pulse dialing"), Modem::PulseDial))
				    )
				),
				`HSpacing(0.3)
			    ),
			    `VSpacing(0.3)
			)
		    ),
		    `HSpacing(1),
		    `Frame(_("Special settings"),
			`HBox(
			    `HSpacing(0.3),
			    `VBox(
			        `VSpacing(0.3),
			        `Left(`CheckBox(`id(`Speaker), _("&Speaker on"), Modem::Speaker)),
				`Left(`CheckBox(`id(`CarrierDetect), _("D&etect Dial Tone"), Modem::Carrier)),
				`VSpacing(0.3)
			    ),
			    `HSpacing(0.3)
			)
		    )
		),
		`VStretch(),
		`PushButton(`id(`Details), _("&Details")),
		`VSpacing()
	    )
	);

    /* DIALOG PREPARE */

    Wizard::SetContentsButtons(caption, contents, helptext,
	    BackButtonLabel(), NextButtonLabel());

    /* MAIN CYCLE */

    symbol ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	/* back */
	else if(ret == `back) {
	    break;
	}
	/* next */
	else if(ret == `next || ret == `Details) {

	    //name = UI::QueryWidget(`id(`ModemName), `Value);

	    /*
	    if (name == "" || findfirstof(name, " \t") != nil) {
		UI::MessagePopup(_("Modem name cannot contains spaces"));
		ret = nil;
		continue;
	    }
	    */

	    if (false/*!IsModemNameUniq(name)*/) {		// FIXME: function IsModemNameUniq(name)
		UI::MessagePopup(_("This modem name already exists"));
		continue;
	    }

	    break;
	}
	else {
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}

    }

    /* UPDATE VARIABLES */

    if (ret == `next || ret == `Details) {

	  // Modem::name = UI::QueryWidget(`id(`ModemName), `Value);
	  Modem::DialPrefix = UI::QueryWidget(`id(`DialPrefix), `Value);

	  if (Type != `Detected)
	    Modem::Device = UI::QueryWidget(`id(`Device), `Value);

	  Modem::PulseDial = UI::QueryWidget(`id(`Pulse), `Value);
	  Modem::Speaker = UI::QueryWidget(`id(`Speaker), `Value);
	  Modem::Carrier = UI::QueryWidget(`id(`CarrierDetect), `Value);
    }

    return ret;
}

/* DIALOG */

/**
 * Dialog for modem parameters details
 * @return dialog result
 */
global define symbol modem_details() ``{

    /* PREPARE VARIABLES */
    integer BaudRate = Modem::BaudRate;
    string Init1 = Modem::Init1;
    string Init2 = Modem::Init2;
    string Init3 = Modem::Init3;


    /* DIALOG TEXTS */

    /* Modem datails dialog caption */
    string caption = _("Modem parameter details");

    /* Modem datails dialog help 1/2 */
    string helptext =
_("<p>The item BaudRate is a transmission speed that tells how many bits per 
second your computer communicates with your modem.</p>") +

    /* Modem datails dialog help 2/2 */
_("<p>All the relevant information about <b>init strings</b>
should be in your modem manual.</p>");


    /* DIALOG CONTENTS */

    list BaudRates = maplist(`e, toset(add([1200, 2400, 4800, 9600, 19200, 38400, 57600, 115200], BaudRate)),
			 ``(`item(`id(sformat("%1", e)), sformat("%1", e), e==BaudRate)));
    term contents =
	`HBox(
	    `HSpacing(3),
	    `VBox(
		`ComboBox(`id(`Baud), `opt(`hstretch, `editable), _("B&audRate"), BaudRates),
		`VSpacing(),
		    `Frame(_("Modem initialization strings"),
		    `HBox(
			`HSpacing(),
			`VBox(
			    `TextEntry(`id(`Init1), _("Init &1"), Init1),
			    `TextEntry(`id(`Init2), _("Init &2"), Init2),
			    `TextEntry(`id(`Init3), _("Init &3"), Init3),
			    `VSpacing(0.5)
			),
			`HSpacing()
		    )
		),
		`VSpacing(3)
	    ),
	    `HSpacing(3)
	);


    /* DIALOG PREPARE */

    Wizard::SetContentsButtons(caption, contents, helptext,
	    BackButtonLabel(), NextButtonLabel());

    /* MAIN CYCLE */

    symbol ret = nil;
    while (true) {

	ret = UI::UserInput();

	/* abort? */
	if (ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if (ret == `back) {
	    break;
	}
	else if (ret == `next) {
	    /* check_* */
	    break;
	}
	else {
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}

    }

    if (ret == `next) {
	Modem::BaudRate = tointeger(UI::QueryWidget(`id(`Baud), `Value));
	Modem::Init1 = UI::QueryWidget(`id(`Init1), `Value);
	Modem::Init2 = UI::QueryWidget(`id(`Init2), `Value);
	Modem::Init3 = UI::QueryWidget(`id(`Init3), `Value);
    }

    return ret;
}



// FIXME: are followning dialogs for modem or provider configuration??


/* DIALOG */

/**
 * Dialog for provider parameters
 * @return symbol user input
 */
global define symbol modem_connection() ``{

    /* PREPARE VARIABLES */

    string Provider = lookup (Providers::provider, "PROVIDER", "");
    //boolean IsDefault = Modem::IsDefault;
    boolean DialOnDemand = lookup (Providers::provider, "DEMAND", "no") == "yes";

    //string DefaultModem = Modem::DefaultModem;
    string DNS1 = lookup (Providers::provider, "DNS1", "");
    string DNS2 = lookup (Providers::provider, "DNS2", "");

    boolean AutoDNS = lookup(Providers::provider, "AUTODNS", "yes") == "yes";
    string IdleSeconds = lookup(Providers::provider, "IDLETIME", "300");

    list seconds = [ "30", "60", "90", "120", "150", "180", "240", "300", "360", "480", "600" ];

    if(!contains(seconds, IdleSeconds))
	seconds = add(seconds, IdleSeconds);

    list DefaultModemList = [ ];

// FIXME: list of modems
/* Old code:
    list Tmp = lookup(lookup($[] // Old code: configuration //, "modems", $[]), "hwmodems", []);
    if (DefaultModem != "") Tmp=add(Tmp, $["YaST2 Section": DefaultModem]);
    list DefaultModemList = toset(maplist(`e, Tmp, ``{
	string s = lookup(e, "YaST2 Section", nil);		// FIXME: default value ???
	return `item(`id(s), s, s == DefaultModem);
    }));
*/

    y2debug("Modem::device = %1", Modem::device);
    boolean FirewallChecked = Firewall::Query(device_name(Modem::type, Modem::device));

    /* DIALOG TEXTS */

    /* Connection dialog caption */
    string caption = _("Connection parameters");

    /* Connection dialog help 1/5 */
    string helptext = _("<p>Selecting <b>Activate firewall</b> will block
all incoming connections. Choosing this option will make dial-up connections
to the Internet safe from external attacks.</p>") +

    /* Connection dialog help 2/5 */
_("<p><b>Dial on demand</b> means that the internet connection will be
established automatically when data from the internet are requested.
To use this feature you must specify at least one <i>name server</i>.
Please use this feature only if your internet connection is cheap since
there are programs that periodically request data from the internet.</p>") +

    /* Connection dialog help 3/5 */
_("<p>The <b>Name servers</b> are required to convert host names
<i>(e.g. www.suse.com)</i> to ip addresses (e.g. 213.95.15.200).
You only need to specify the name servers if you enable
<i>Dial on demand</i>.</p>") +

    /* Connection dialog help 4/5 */
_("<p>When <b>Modify DNS</b> is enabled the <i>name server</i> will be
changed automatically when connected to the internet.</p>") +

    /* Connection dialog help 5/5 */
_("<p>The <b>Idle timeout</b> specifies the time after which an idle
connection will be shut down.</p>");

    /* DIALOG CONTENTS */

    term FirewallCheckbox = `Left(`CheckBox(`id(`Firewall), sformat(_("A&ctivate %1..."), "firewall"), FirewallChecked));

    term contents =
	`HBox(
	    `HSpacing(6),
	    `VBox(
		`Left(`HSquash(`Label(_("Profile for selected provider:")))),
		`Left(`Label(`opt(`outputField), Provider)),
		`VSpacing(1),
		//`ComboBox(`id(`DefaultModem), `opt(`hstretch),
			    //_("Default modem for this &provider"), DefaultModemList),
		//`VSpacing(0.2),
                `HBox(
		    `VBox(
			//`Left(`CheckBox(`id(`IsDefault),
			    //_("Set this provider as default for the program `&wvdial'"), IsDefault)),
                        FirewallCheckbox,
                        `Left(`CheckBox (`id(`DialOnDemand), `opt (`notify), _("Dial on d&emand"), DialOnDemand))
                     )
                ),
		`VSpacing(1),
                `HBox(
		    //`HSpacing (4),
                    `Frame(`id (`NameServers), _("Name servers"),
			`VBox (
			    `TextEntry (`id (`DNS1), _("F&irst"), DNS1),
                            `TextEntry (`id (`DNS2), _("&Second"), DNS2)
                        )
                    )
		),
		`VSpacing(1),
		`Left(`CheckBox(`id(`AutoDNS), _("&Modify DNS when connected"), AutoDNS)),
		`VSpacing(0.2),
		`Left(`ComboBox(`id(`IdleSeconds), `opt(`editable), _("I&dle timeout (seconds)"),
		    maplist(`e, seconds, ``(`item(`id(e), e, e == IdleSeconds))))),
		`VSpacing(0.2)
		//, `Bottom(`PushButton(`id(`Details), _("&Details")))
	    ),
	    `HSpacing(6)
	);

    /* DIALOG PREPARE */
    Wizard::SetContentsButtons(caption, contents, helptext,
	    BackButtonLabel(), NextButtonLabel());

    UI::ChangeWidget(`id(`Firewall), `Enabled, !Firewall::firewallpresent);
    UI::ChangeWidget(`id (`NameServers), `Enabled, DialOnDemand);
    UI::ChangeWidget(`id (`DNS1), `Enabled, DialOnDemand);
    UI::ChangeWidget(`id (`DNS2), `Enabled, DialOnDemand);

    /* MAIN CYCLE */
    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if (ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if (ret == `back) {
	    break;
	}
	else if (ret == `next) {
	    if (UI::QueryWidget(`id(`IdleSeconds), `Value) == "") {
		UI::ErrorPopup(_("You must set the idle seconds."));
		UI::SetFocus(`id(`IdleSeconds));
		continue;
	    }

	    /* FIXME
	    if (DialOnDemand && !(check_ip4(DNS1) && (size (DNS2) == 0 || check_ip4(DNS2))))
	    {
		UI::ErrorPopup(_("Wrong IP address!"));
		continue;
	    }
	    */

	    break;
	}
	else if (ret == `DialOnDemand) {
	    DialOnDemand = UI::QueryWidget(`id(`DialOnDemand), `Value);
	    UI::ChangeWidget(`id(`NameServers), `Enabled, DialOnDemand);
	    UI::ChangeWidget(`id(`DNS1), `Enabled, DialOnDemand);
	    UI::ChangeWidget(`id(`DNS2), `Enabled, DialOnDemand);
	}
	else {
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }

    /* UPDATE VARIABLES */

    if(ret == `next || ret == `Details) {
	/* update provider info */
	Providers::provider = union(Providers::provider, $[
	    "DNS1" : UI::QueryWidget(`id(`DNS1), `Value),
	    "DNS2" : UI::QueryWidget(`id(`DNS2), `Value),
	    "DEMAND" : UI::QueryWidget(`id(`DialOnDemand), `Value) ? "yes" : "no",
	    "AUTODNS" : UI::QueryWidget(`id(`AutoDNS), `Value) ? "yes" : "no",
	    "IDLETIME" : UI::QueryWidget(`id(`IdleSeconds), `Value),
	    "MODEMSUPPORTED" : "yes",
	    "ISDNSUPPORTED" : "no",
	    "DSLSUPPORTED" : "no"
	]);
	/* update firewall info */
	if(FirewallChecked != UI::QueryWidget(`id(`Firewall), `Value)) {
	    FirewallChecked = UI::QueryWidget(`id(`Firewall), `Value);
	    Firewall::Change(device_name(Modem::type, Modem::device), FirewallChecked);
	}
        //Modem::DefaultModem = UI::QueryWidget(`id(`DefaultModem), `Value);
	//Modem::IsDefault = UI::QueryWidget(`id(`IsDefault), `Value);
    }

    return ret;
}

/* EOF */
}
