/**
 * File:	include/network/dsl/dialogs.ycp
 * Package:	Network configuration
 * Summary:	Configuration dialogs for DSL
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

textdomain "network";

import "Call";
import "DSL";
import "Firewall";
import "IP";
import "Label";
import "Lan";
import "NetworkDevices";
import "Popup";
import "Wizard";

include "network/runtime.ycp";
include "network/routines.ycp";

/**
 * DSL device dialog
 * @return dialog result
 */
define any DSLDialog() ``{

    ScreenName("dsl-dialog");

    /* DSL dialog caption */
    string caption = _("DSL configuration");

    /* DSL dialog help 1/7 */
    string helptext = _("<p>Here, set the most important settings
for DSL connection.</p>") +

    /* DSL dialog help 2/7 */
    _("<p>First, choose your <b>PPP mode</b>. This is either
<i>PPP over Ethernet</i> (PPPoE) or <i>PPP over ATM</i> (PPPoATM). Use
<i>PPP over Ethernet</i> if your DSL modem is connected via ethernet to your
computer. If you are not sure which mode to use, ask your provider.</p>") +

    /* DSL dialog help 3/7 */
    _("<p>If you are using <i>PPP over Ethernet</i>, first configure your
ethernet card.</p>") +

    /* DSL dialog help 4/7 */
_("<p>The <b>PPP Mode-Dependent Settings</b> are settings required to set up
your DSL connection. The <b>VPI/VCI</b> makes sense only for <i>PPP over ATM</i>
connections, <b>Ethernet card</b> is needed for <i>PPP over Ethernet</i>
connections.</p>") +

    /* DSL dialog help 5/7 */
_("<p><b>For PPPoATM, enter your VPI/VCI pair, for example, <i>0.38</i>
for British Telecom. If unsure, ask your provider.</p>") +

    /* DSL dialog help 6/7 */
_("<p>For PPPoE, enter the device of the ethernet card to which your DSL
modem is connected. If you did not set up your ethernet card yet, do
so by pressing <b>Configure Network Cards</b>.</p>") +

    /* DSL dialog help 7/7 */
_("<p><b>Device activation</b> may either happen during boot or manually
with tools like <b>ifup</b> or <b>kinternet</b>. An activation during boot may
be appropriate for dial-on-demand connections.</p>");

    string pppmode = DSL::pppmode;
    if (pppmode == nil || pppmode == "")
	pppmode = "pppoe";

    list pppmodes = [
	/* ComboBox item */
	`item(`id("pppoe"), _("PPP over Ethernet"), pppmode == "pppoe"),
	/* ComboBox item */
	`item(`id("pppoatm"), _("PPP over ATM"), pppmode == "pppoatm"),
	/* ComboBox item */
	`item(`id("capi-adsl"), _("CAPI for ADSL"), pppmode == "capi-adsl"),
	/* ComboBox item */
	`item(`id("pptp"), _("Point to Point Tunneling Protocol"), pppmode == "pptp"),
    ];
    /* ComboBox label */
    term pppwidget = `Left(`ComboBox(`id(`pppmode), `opt(`hstretch,`notify), _("PPP &mode"), pppmodes));

    string vpivci = DSL::vpivci;
    string startmode = DSL::startmode;
    string interface = DSL::interface;
    string modemip = DSL::modemip;
    list ifaces = [];

    /**
     */
    define void UpdateInterfaces() ``{
	ifaces = NetworkDevices::GetDevices("eth");
	y2debug("ifaces=%1", ifaces);
	ifaces = union(ifaces, NetworkDevices::GetDevices("eth-pcmcia"));
	y2debug("ifaces=%1", ifaces);
	ifaces = union(ifaces, NetworkDevices::GetDevices("eth-usb"));
	y2debug("ifaces=%1", ifaces);

	/* FIXME Why is not the current interface added? */
	if(false && /*interface != "" && */!contains(ifaces, interface))
	    ifaces = add(ifaces, interface);

	y2debug("ifaces=%1", ifaces);
	ifaces = maplist(string e, ifaces,
	    ``(`item(`id(sformat("%1", e)), sformat("%1", e), e == interface)));
	y2debug("ifaces=%1", ifaces);
    }

    /* FIXME: #27137 */
    UpdateInterfaces();
    if(size(ifaces) < 1) {
	if(Lan::Propose()) {
	    Lan::Edit("eth0");
	    Lan::bootproto = "";
	    Lan::ipaddr = "";
	    Lan::Commit();
	}
    }

    /* DSL dialog contents */
    term contents = `HBox(
	`HSpacing(6),
	/* Frame label */
	`Frame(_("DSL Connection Settings"), `HBox(`HSpacing(2), `VBox(
	    `VSpacing(1),
	    pppwidget,
	    `VSpacing(1),
	    /* Frame label */
	    `Frame(_("PPP Mode-Dependent Settings"), `HBox(`HSpacing(2), `VBox(
		`VSpacing(0.2),
		/* TextEntry label */
		`TextEntry(`id(`vpivci),  _("&VPI/VCI"), vpivci),
		`VSpacing(0.2),
		`HBox(
		    /* ComboBox label */
		    `Left(`ReplacePoint(`id(`rp), `ComboBox(`id(`interface), _("&Ethernet card"), ifaces))),
		    /* TextEntry label */
		    // `TextEntry(`id(`interface), _("&Ethernet card"), interface),
		    `HSpacing(1),
		    `VBox(
			`Label(""),
			/* PushButton label */
			`PushButton(`id(`lan), _("&Configure Network Cards"))
		    )
		),
		`VSpacing(0.2),
		/* TextEntry label */
		`TextEntry(`id(`modemip), _("Modem &IP Address"), modemip)
	    ), `HSpacing(2))),
	    `VSpacing(1),
	    /* ComboBox label */
	    `Left(`ComboBox(`id(`startmode), _("&Device Activation"), [
		/* ComboBox item */
		`item(`id("manual"), _("Manually"), startmode == "manual"),
		/* ComboBox item */
		`item(`id("onboot"), _("On Boot"), startmode == "onboot"),
		/* ComboBox item */
		`item(`id("hotplug"), _("Hot Plug"), startmode == "hotplug"),
	    ])),
	    `VSpacing(1)
	    ), `HSpacing(2))),
	`HSpacing(6)
    );

    Wizard::SetContentsButtons(caption, contents, helptext,
	    Label::BackButton(), Label::NextButton());

    UI::ChangeWidget(`id(`vpivci), `Enabled, pppmode == "pppoatm");
    UI::ChangeWidget(`id(`interface), `Enabled, pppmode == "pppoe");
    UI::ChangeWidget(`id(`lan), `Enabled, pppmode == "pppoe" || pppmode == "pptp");
    UI::ChangeWidget(`id(`modemip), `Enabled, pppmode == "pptp");

    any ret = nil;
    while(true) {
	ret = UI::UserInput();

	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `back) {
	    break;
	}
	else if(ret == `next) {
	    /* check_* */
	    pppmode = (string) UI::QueryWidget(`id(`pppmode), `Value);
	    interface = (string) UI::QueryWidget(`id(`interface), `Value);
	    vpivci = (string) UI::QueryWidget(`id(`vpivci), `Value);
	    modemip = (string) UI::QueryWidget(`id(`modemip), `Value);
	    if(pppmode == "pppoatm" && vpivci == "") {
		/* Popup text */
		Popup::Error(_("Enter the VPI/VCI."));
		UI::SetFocus(`id(`vpivci));
		continue;
	    }
	    if((pppmode == "pppoe" || pppmode == "pptp") && interface == "") {
		/* Popup text */
		Popup::Error(_("At least one ethernet interface must be configured."));
		UI::SetFocus(`id(`lan));
		continue;
	    }
	    if(pppmode == "pptp" && !IP::Check4(modemip)) {
		/* Popup text */
		Popup::Error(_("Modem IP address is invalid."));
		UI::SetFocus(`id(`modemip));
		continue;
	    }
	    break;
	}
	else if(ret == `pppmode) {
	    pppmode = (string) UI::QueryWidget(`id(`pppmode), `Value);
	    UI::ChangeWidget(`id(`vpivci), `Enabled, pppmode == "pppoatm");
	    UI::ChangeWidget(`id(`interface), `Enabled, pppmode == "pppoe" || pppmode == "pptp");
	    UI::ChangeWidget(`id(`lan), `Enabled, pppmode == "pppoe" || pppmode == "pptp");
	    UI::ChangeWidget(`id(`modemip), `Enabled, pppmode == "pptp");
	    continue;
	}
	else if(ret == `lan) {
	    // WFM::CallFunction("lan_proposal", ["AskUser"]);
	    Call::Function("lan_proposal", ["AskUser"]);
	    interface = (string) UI::QueryWidget(`id(`interface), `Value);
	    UpdateInterfaces();
	    UI::ReplaceWidget(`id(`rp), `ComboBox(`id(`interface), _("&Ethernet card"), ifaces));
	    continue;
	}
	else {
	    y2error("Unexpected return code: %1", ret);
	    continue;
	}
    }

    if(ret == `next) {
	pppmode = (string) UI::QueryWidget(`id(`pppmode), `Value);
	DSL::pppmode = pppmode;
	if(pppmode == "pppoe" || pppmode == "pptp")
	    DSL::interface = (string) UI::QueryWidget(`id(`interface), `Value);
	if(pppmode == "pppoatm")
	    DSL::vpivci = (string) UI::QueryWidget(`id(`vpivci), `Value);
	if(pppmode == "pptp")
	    DSL::modemip = (string) UI::QueryWidget(`id(`modemip), `Value);
	DSL::startmode = (string) UI::QueryWidget(`id(`startmode), `Value);
    }

    return ret;
}

/* EOF */
}
