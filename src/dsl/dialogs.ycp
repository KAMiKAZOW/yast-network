/**
 * File:	include/network/dsl/dialogs.ycp
 * Package:	Network configuration
 * Summary:	Configuration dialogs for DSL
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

textdomain "network";

import "DSL";
import "Call";
import "Firewall";
import "Wizard";

include "ui/common_messages.ycp";
include "ui/common_popups.ycp";

include "network/ip.ycp";
include "network/runtime.ycp";

include "network/routines.ycp";

/**
 * DSL device dialog
 * @return dialog result
 */
global define symbol DSLDialog() ``{

    /* DSL dialog caption */
    string caption = _("DSL configuration");

    /* DSL dialog help 1/6 */
    string helptext = _("<p>Here, set the most important settings
for DSL connection.</p>") +

    /* DSL dialog help 6/6 */
_("<p>FIXME
</p>") +

    /* DSL dialog help 6/6 */
_("<p>The <b>VPI/VCI</b> makes sense only for <i>PPP over ATM</i> connections,
<b>Ethernet card</b> is needed for <i>PPP over Ethernet</i> connections.</p>") +

    /* DSL dialog help 6/6 */
_("<p>FIXME
</p>");

    string pppmode = DSL::pppmode;
    if (pppmode == nil || pppmode == "")
	pppmode = "pppoe";

    list pppmodes = [
	/* ComboBox item */
	`item(`id("pppoe"), _("PPP over Ethernet"), pppmode == "pppoe"),
	/* ComboBox item */
	`item(`id("pppoatm"), _("PPP over ATM"), pppmode == "pppoatm"),
	/* ComboBox item */
	// `item(`id("ppptp"), _("PPP tunelling protocol"), pppmode == "ppptp"),
	/* ComboBox item */
	// `item(`id("capi-adsl"), _("CAPI for ADSL"), pppmode == "capi-adsl"),
    ];
    /* ComboBox label */
    term pppwidget = `Left(`ComboBox(`id(`pppmode), `opt(`hstretch,`notify), _("PPP &mode"), pppmodes));

    string vpivci = DSL::vpivci;
    string startmode = DSL::startmode;
    string interface = DSL::interface;
    list ifaces = [];

    /**
     */
    define void UpdateInterfaces() ``{
	ifaces = Lan::GetDevices("eth");
	if(false && /*interface != "" && */!contains(ifaces, interface))
	    change(ifaces, interface);

	y2debug("ifaces=%1", ifaces);
	ifaces = maplist(string e, ifaces,
	    ``(`item(`id(sformat("%1", e)), sformat("%1", e), e == interface)));
	y2debug("ifaces=%1", ifaces);
    }

    UpdateInterfaces();

    /* DSL dialog contents */
    term contents = `HBox(
	`HSpacing(6),
	/* Frame label */
	`Frame(_("DSL connection settings"), `HBox(`HSpacing(2), `VBox(
	    `VSpacing(1),
	    pppwidget,
	    `VSpacing(1),
	    `Frame(_("PPP mode dependent settings"), `HBox(`HSpacing(2), `VBox(
		`VSpacing(0.2),
		`TextEntry(`id(`vpivci),  _("&VPI/VCI"), vpivci),
		`VSpacing(0.2),
		`HBox(
		    /* ComboBox label */
		    `Left(`ReplacePoint(`id(`rp), `ComboBox(`id(`interface), _("&Ethernet card"), ifaces))),
		    /* TextEntry label */
		    // `TextEntry(`id(`interface), _("&Ethernet card"), interface),
		    `HSpacing(1),
		    `VBox(
			`Label(""),
			/* PushButton label */
			`PushButton(`id(`lan), _("&Configure network cards"))
		    )
		)
	    ), `HSpacing(2))),
	    `VSpacing(1),
	    `Left(`ComboBox(`id(`startmode), _("&Device activation"), [
		`item(`id("manual"), _("Manualy"), startmode == "manual"),
		`item(`id("onboot"), _("On boot"), startmode == "onboot"),
	    ])),
	    `VSpacing(1)
	    ), `HSpacing(2))),
	`HSpacing(6)
    );

    Wizard::SetContentsButtons(caption, contents, helptext,
	    BackButtonLabel(), NextButtonLabel());

    UI::ChangeWidget(`id(`vpivci), `Enabled, pppmode == "pppoatm");
    UI::ChangeWidget(`id(`interface), `Enabled, pppmode == "pppoe");
    UI::ChangeWidget(`id(`lan), `Enabled, pppmode == "pppoe");

    any ret = nil;
    while(true) {
	ret = UI::UserInput();

	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `back) {
	    break;
	}
	else if(ret == `next) {
	    /* check_* */
	    pppmode = UI::QueryWidget(`id(`pppmode), `Value);
	    interface = UI::QueryWidget(`id(`interface), `Value);
	    vpivci = UI::QueryWidget(`id(`vpivci), `Value);
	    if(pppmode == "pppoatm" && vpivci == "") {
		/* Popup text */
		UI::ErrorPopup(_("Please fill in the VPI/VCI."));
		UI::SetFocus(`id(`vpivci));
		continue;
	    }
	    if(pppmode == "pppoe" && interface == "") {
		/* Popup text */
		UI::ErrorPopup(_("At least one ethernet interface must be configured."));
		UI::SetFocus(`id(`lan));
		continue;
	    }
	    break;
	}
	else if(ret == `pppmode) {
	    pppmode = UI::QueryWidget(`id(`pppmode), `Value);
	    UI::ChangeWidget(`id(`vpivci), `Enabled, pppmode == "pppoatm");
	    UI::ChangeWidget(`id(`interface), `Enabled, pppmode == "pppoe");
	    UI::ChangeWidget(`id(`lan), `Enabled, pppmode == "pppoe");
	    continue;
	}
	else if(ret == `lan) {
	    // WFM::CallFunction("lan_proposal", ["AskUser"]);
	    Call::Function("lan_proposal", ["AskUser"]);
	    interface = UI::QueryWidget(`id(`interface), `Value);
	    UpdateInterfaces();
	    UI::ReplaceWidget(`id(`rp), `ComboBox(`id(`interface), _("&Ethernet card"), ifaces));
	    continue;
	}
	else {
	    y2error("Unexpected return code: %1", ret);
	    continue;
	}
    }

    if(ret == `next) {
	pppmode = UI::QueryWidget(`id(`pppmode), `Value);
	DSL::pppmode = pppmode;
	if(pppmode == "pppoe")
	    DSL::interface = UI::QueryWidget(`id(`interface), `Value);
	else if(pppmode == "pppoatm")
	    DSL::vpivci = UI::QueryWidget(`id(`vpivci), `Value);
	DSL::startmode = UI::QueryWidget(`id(`startmode), `Value);
    }

    return ret;
}

/**
 * Helper function to create the user data frame
 * @param username  current username
 * @param password  current password
 * @param tonline if t-online account
 * @return data
 */
global define term CreateUserDataTerm(
			string username,
			string password,
			boolean tonline) ``{
    term udt = nil;

    if(tonline) {
	string user = username;
	string name = "0001";
	string lineid = "";
	string t_onlineid = "";

	if(user != "") {
	    if(issubstring(user, "@t-online.de"))
		user = regexpsub(user, "^(.*)@t-online.de$", "\\1");
	    y2debug("user=%1",user);

	    if(issubstring(user, "#")) {
		name = regexpsub(user, "^.*#(.*)$", "\\1");
		user = regexpsub(user, "^(.*)#.*$", "\\1");
	    }
	    else {
		if(size(user) > 3) {
		    name = regexpsub(user, "^.*(....)$", "\\1");
		    user = regexpsub(user, "^(.*)....$", "\\1");
		}
	    }
	    if(name == "") name = "0001";

	    y2debug("user=%1",user);
	    if(size(user) > 12) {
		lineid = regexpsub(user, "^(.{12}).*$", "\\1");
		t_onlineid = regexpsub(user, "^.{12}(.*)$", "\\1");
	    }
	    else
		lineid = user;
	}
	udt = `VBox(
	    `HBox(
		/* TextEntry label */
		`TextEntry(`id(`lineid), _("&Line ID"), lineid),
		`HSpacing(1),
		/* TextEntry label */
		`TextEntry(`id(`t_onlineid), _("&T-Online ID"), t_onlineid)
	    ),
	    `VSpacing( 0.5 ),
	    `HBox(
		/* TextEntry label */
		`TextEntry(`id(`user), _("&User code"), name),
		`HSpacing(1),
		/* Password entry label */
		`Password(`id(`password),  _("&Password"), password)
	    )
	);
    }
    else {
	// frame title
	udt = `VBox(
        /* TextEntry label */
	    `TextEntry(`id(`user), _("&User"), username),
	    `VSpacing( 0.5 ),
        /* Password entry label */
	    `Password(`id(`password), _("&Password"), password)
	);
   }
   return(udt);
}

/**
 * General DSL dialog
 * In case of T-Online, the username is 12 digit Line ID, 12 digit T-Online ID,
 * 4 digit user code and a string "@t-online.de"
 * @param tonline if split username -> Line ID, T-Online ID and username
 * @param subdialog if this dialog was called from an other module with
 *                     presetted parameter
 * @return dialog result
 */
global define symbol DSLDialog2(boolean tonline, boolean subdialog) ``{

    /* DSL dialog caption */
    string caption = _("DSL configuration");
    string helptext = "";
    boolean tdsl = nil;

    if(tonline == nil) {
	string user = DSL::username;
	if(user == "") {
	    tdsl = false;
	}
	else
	    tdsl = issubstring(user, "t-online");
    }
    else
	tdsl = tonline;

    if (tdsl)
	/* DSL dialog help 1/8 (T-Online) */
	helptext = helptext + _("<p>
This module is only used for the <b>German T-Online T-DSL</b> service.
For example, in the US, DSL connections are not configured in this dialog.
</p>");

    else
	/* DSL dialog help 1/8 */
	helptext = _("<p>
This module is only relevant for providers using PPPoE or PPPoATM.
In the US, some providers use PPTP, so you only need to configure
your ethernet card in the Network/Base module in YaST2.
If you are not sure, ask your provider.
</p>");

    if (tdsl)
        /* DSL dialog help 2/8 (T-Online) */
        helptext = helptext + _("<p>First, configure your ethernet card.</p>");

    else
        /* DSL dialog help 2/8 */
        helptext = helptext + _("<p>Frist, choose your PPP mode. This is
either PPPoE (PPP over Ethernet) or PPPaATM (PPP over ATM). Use PPPoE if
your DSL modem is connected via ethernet to your computer. If you are not
sure which mode to use, ask your provider.</p>") +

        /* DSL dialog help 3/8 */
        _("<p>If you are using PPPoE, first configure your ethernet card.</p>");

    if (tdsl)
	/* DSL dialog help 4/8 (T-Online) */
	helptext = helptext + _("<p>Second, enter your registration data.
Enter your <i>Line ID</i> (Anschlusskennung), e.g., 00056780362,
the <i>T-Online ID</i>, e.g. 870008594732, the <i>user code</i>
(Mitbenutzernummer), typically 0001, and your <i>password</i>.</p>");

    else
	/* DSL dialog help 4/8 */
	helptext = helptext + _("<p>Second, enter your access data.
You will be asked for your <i>user name</i> and <i>password</i>.</p>");

    if (tdsl)
        /* DSL dialog help 5/8 (T-Online) */
        helptext = helptext + _("<p>Enter the device of your ethernet card,
for example, <i>eth0</i>. If you have two cards, it could also be <i>eth1</i>.
</p>");

    else
        /* DSL dialog help 5/8 */
        helptext = helptext + _("<p>For PPPoE enter the device of your
ethernet card, for example, <i>eth0</i>. If you have two cards, it could also
be <i>eth1</i>. For PPPoATM enter your VPI/VCI pair, for example <i>0.38</i>
for British Telecom.</p>");

    /* DSL dialog help 6/8 */
    helptext = helptext + _("<p>The <i>idle time</i> is the time in seconds
after which the connection terminates, if no data has been transferred.</p>") +

    /* DSL dialog help 7/8 */
_("<p>Selecting <i>activate firewall</i> will block all incoming connections.
Choosing this option will make dial-up Internet connections more secure
against external attacks.</p>") +

    /* DSL dialog help 8/8 */
_("<p><i>Dial-on-demand</i> means that the DSL connection will be made
automatically if data is requested. To use this, specify at least one
<i>name server.</i></p>");


    /* DSL dialog contents */

    string dns1 = DSL::dns1;
    string dns2 = DSL::dns2;
    string idle = sformat("%1",DSL::idletime);
    string pppmode = DSL::pppmode;

    list seconds = [ "30", "60", "90", "120", "150", "180", "240", "300", "360", "480", "600" ];
    if(!contains(seconds, idle))
	change(seconds, idle);

    if (pppmode == nil || pppmode == "")
	pppmode = "pppoe";

    list pppmodes = [
	/* ComboBox item */
	`item(`id("pppoe"), _("PPP over Ethernet"), pppmode == "pppoe"),
	/* ComboBox item */
	`item(`id("pppoatm"), _("PPP over ATM"), pppmode == "pppoatm"),
	/* ComboBox item */
	`item(`id("capi-adsl"), _("CAPI for ADSL"), pppmode == "capi-adsl"),
    ];
    term pppwidget = nil;
    /* ComboBox label */
    pppwidget = `Left(`ComboBox(`id(`pppmode), `opt(`hstretch,`notify), _("PPP &mode"), pppmodes));

    string Interface = DSL::interface == "" ? DSLDevice::device : DSL::interface;

    boolean FirewallChecked = Firewall::Query("ppp0");

    boolean dod = DSL::dialondemand;

    if (tdsl && dod) {
	if(dns1 == "" && dns2 == "") {
	    dns1 = "217.5.115.7";
	    dns2 = "194.25.2.129";
	}
    }

    term contents = `HSquash(`VBox(
//	`VSpacing(1),
	/* CheckBox label */
	`Left(`CheckBox(`id(`ton),`opt(`notify), _("T-Online a&ccount"), tdsl)),
	`ReplacePoint(`id(`udt),
	    CreateUserDataTerm(DSL::username, DSL::password, tdsl)
	),
	`VSpacing(1),
	pppwidget,
	`VSpacing(1),
	`HBox(
	    `TextEntry(`id(`interface),  _("&Ethernet card or VPI/VCI"),
		Interface),
	    `HSpacing(3),
	    `ComboBox(`id(`idletime), `opt(`editable), _("&Idle time"),
		maplist(string e, seconds, ``(`item(`id(e), e, e == idle))))
	),
	`VSpacing(1),
    /* CheckBox label */
	`Left(`CheckBox(`id(`firewall), _("&Activate firewall"), FirewallChecked)),
	//`VSpacing(1),
    /* CheckBox label */
	`Left(`CheckBox(`id(`dialondemand),`opt(`notify), _("Dial &on demand"), dod)),
	`HBox(
        /* TextEntry label */
	    `TextEntry(`id(`dns1), _("Name server &1"), dns1),
	    `HSpacing(4),
        /* TextEntry label */
	    `TextEntry(`id(`dns2),  _("Name server &2"), dns2)
	),
	`VSpacing(1)
    ));

    /* DIALOG PREPARE */

    if (subdialog) {
	Wizard::SetContentsButtons(caption, contents, helptext,
		BackButtonLabel(), OKButtonLabel());
	UI::ChangeWidget(`id(`pppmode), `Enabled, false);
    }
    else
	Wizard::SetContentsButtons(caption, contents, helptext,
		BackButtonLabel(), FinishButtonLabel());

    UI::ChangeWidget(`id(`dns1), `Enabled, DSL::dialondemand);
    UI::ChangeWidget(`id(`dns2), `Enabled, DSL::dialondemand);
    UI::ChangeWidget(`id(`idletime), `ValidChars, "0123456789" );

    if(tdsl) {
	UI::ChangeWidget(`id(`lineid), `ValidChars, "0123456789" );
	UI::ChangeWidget(`id(`t_onlineid), `ValidChars, "0123456789" );
	UI::ChangeWidget(`id(`user), `ValidChars, "0123456789" );
    }

    if (pppmode == "capi-adsl") {
	UI::ChangeWidget(`id(`interface), `Value, "");
	UI::ChangeWidget(`id(`interface), `Enabled, false);
    } else
	UI::ChangeWidget(`id(`interface), `Enabled, true);

    /* MAIN CYCLE */
    any ret = nil;
    while(true) {

        ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if (UI::ReallyAbortPopup(true))
		break;
	    else
		continue;
	}
        else if(ret == `back) {
            break;
        }
	else if(ret == `ton) {
	    boolean newtdsl = UI::QueryWidget(`id(`ton), `Value);
	    string username = "";
	    if (tdsl) {
		string lineid = UI::QueryWidget(`id(`lineid), `Value);
		string tonlineid = UI::QueryWidget(`id(`t_onlineid), `Value);
		string name = UI::QueryWidget(`id(`user), `Value);
		username = lineid + tonlineid;
		if(size(tonlineid) < 12)
		    username = username + "#";
		username = username + name + "@t-online.de";
	    }
	    else {
		username = UI::QueryWidget(`id(`user), `Value);
	    }
	    string password = UI::QueryWidget(`id(`password), `Value);
	    tdsl = newtdsl;
	    UI::ReplaceWidget(`id(`udt), CreateUserDataTerm(username, password, tdsl));
	    if (dod && tdsl) {
		dns1 = tolower(UI::QueryWidget(`id(`dns1), `Value));
		dns2 = tolower(UI::QueryWidget(`id(`dns2), `Value));
		if(dns1 == "" && dns2 == "") {
		    dns1 = "217.5.115.7";
		    dns2 = "194.25.2.129";
		    UI::ChangeWidget(`id(`dns1), `Value, dns1);
		    UI::ChangeWidget(`id(`dns2), `Value, dns2);
		}
	    }
	    continue;
	}
	else if(ret == `dialondemand) {
	    dod = UI::QueryWidget(`id(`dialondemand), `Value);
	    UI::ChangeWidget(`id(`dns1), `Enabled, dod);
	    UI::ChangeWidget(`id(`dns2), `Enabled, dod);
	    if (dod && tdsl) {
		dns1 = tolower(UI::QueryWidget(`id(`dns1), `Value));
		dns2 = tolower(UI::QueryWidget(`id(`dns2), `Value));
		if(dns1 == "" && dns2 == "") {
		    dns1 = "217.5.115.7";
		    dns2 = "194.25.2.129";
		    UI::ChangeWidget(`id(`dns1), `Value, dns1);
		    UI::ChangeWidget(`id(`dns2), `Value, dns2);
		}
	    }
	    continue;
	}
	else if(ret == `pppmode) {
	    pppmode = UI::QueryWidget(`id(`pppmode), `Value);
	    if (pppmode == "capi-adsl") {
		Interface = UI::QueryWidget(`id(`interface), `Value);
		UI::ChangeWidget(`id(`interface), `Value, "");
		UI::ChangeWidget(`id(`interface), `Enabled, false);
	    }
	    else {
		UI::ChangeWidget(`id(`interface), `Value, Interface);
		UI::ChangeWidget(`id(`interface), `Enabled, true);
	    }
	}
        else if(ret == `next) {
	    dns1 = UI::QueryWidget(`id(`dns1), `Value);
	    dns2 = UI::QueryWidget(`id(`dns2), `Value);

	    /* check name servers */
	    boolean dialondemand = UI::QueryWidget(`id(`dialondemand), `Value);
	    if(dialondemand) {
		if(dns1 == "" && dns2 == "") {
            /* MessagePopup text */
		    UI::MessagePopup(_("To use dial on demand, specify a least one name server\n"));
		    UI::SetFocus(`id(`dns1));
		    continue;
		}
		if(dns1 != "" && !check_ip4(dns1)) {
            /* MessagePopup text */
		    UI::MessagePopup(_("First name server does not contain a valid IP address."));
		    UI::SetFocus(`id(`dns1));
		    continue;
		}
		if(dns2 != "" && !check_ip4(dns2)) {
            /* MessagePopup text */
		    UI::MessagePopup(_("Second name server does not contain a valid IP address."));
		    UI::SetFocus(`id(`dns2));
		    continue;
		}
	    }

	    /* check T-Online fields */
	    if (tdsl) {
		if(UI::QueryWidget(`id(`lineid), `Value) == "") {
		    /* MessagePopup text */
		    UI::MessagePopup(_("Line ID cannot be empty."));
		    UI::SetFocus(`id(`lineid));
		    continue;
		}
		if(UI::QueryWidget(`id(`t_onlineid), `Value) == "") {
		    /* MessagePopup text */
		    UI::MessagePopup(_("T-Online ID cannot be empty."));
		    UI::SetFocus(`id(`t_onlineid));
		    continue;
		}
	    }

	    /* check user name */
	    if(UI::QueryWidget(`id(`user), `Value) == "") {
        /* MessagePopup text */
		UI::MessagePopup(_("User name cannot be empty."));
		UI::SetFocus(`id(`user));
		continue;
	    }

	    /* check interface */
	    pppmode = UI::QueryWidget(`id(`pppmode), `Value);
	    if(UI::QueryWidget(`id(`interface), `Value) == "" && pppmode != "capi-adsl") {
        /* MessagePopup text */
		UI::MessagePopup(_("Ethernet card and VPI/VCI cannot be empty."));
		UI::SetFocus(`id(`interface));
		continue;
	    }

            break;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }

    }

    /* UPDATE VARIABLES */

    if(ret == `next) {
	DSL::password = UI::QueryWidget(`id(`password), `Value);
	DSL::pppmode = UI::QueryWidget(`id(`pppmode), `Value);
	if (DSL::pppmode == "capi-adsl") {
	    // no interface
	    DSL::interface = "";
	    DSLDevice::device = "";
	    DSLDevice::activate = false;
	}
	else {
	    DSL::interface = UI::QueryWidget(`id(`interface), `Value);
	    // checked already that it is nonempty
	    if (DSL::interface != DSLDevice::device)
	    {
		// Dont activate the detected device if the proposal was changed
		DSLDevice::activate = false;
	    }
	}
	DSL::idletime = tointeger(UI::QueryWidget(`id(`idletime), `Value));
	DSL::dialondemand = UI::QueryWidget(`id(`dialondemand), `Value);

	if(FirewallChecked != UI::QueryWidget(`id(`firewall), `Value)) {
	    FirewallChecked = UI::QueryWidget(`id(`firewall), `Value);
	    Firewall::Change("ppp0", FirewallChecked);
	}

	if(tdsl) {
	    string lineid = UI::QueryWidget(`id(`lineid), `Value);
	    string tonlineid = UI::QueryWidget(`id(`t_onlineid), `Value);
	    string name = UI::QueryWidget(`id(`user), `Value);

	    DSL::username = lineid + tonlineid;
	    if(size(tonlineid) < 12)
		DSL::username = DSL::username + "#";
	    DSL::username = DSL::username + name + "@t-online.de";
	}
	else {
	    DSL::username = UI::QueryWidget(`id(`user), `Value);
	}


	if(DSL::dialondemand) {
	    DSL::dns1 = tolower(UI::QueryWidget(`id(`dns1), `Value));
	    DSL::dns2 = tolower(UI::QueryWidget(`id(`dns2), `Value));
	}
	else {
	    DSL::dns1 = "";
	    DSL::dns2 = "";
	}
    }

    return ret;
}

/**
 * DSL configuration in general DSL mode
 * @return dialog result
 */
global define symbol ADSLDialog() ``{
    return DSLDialog(true);
}

/**
 * DSL configuration in T-Online mode
 * @return dialog result
 */
global define symbol TDSLDialog() ``{
    return DSLDialog(false);
}

if(false) {
    Wizard::CreateDialog();
    DSLDialog();
    DSLDialog2(false, false);
}

/* EOF */
}
