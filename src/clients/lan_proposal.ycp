/**
 * File:	clients/lan_proposal.ycp
 * Package:	Network configuration
 * Summary:	Lan configuration proposal
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

textdomain "network";

/* The main () */
y2milestone("----------------------------------------");
y2milestone("Lan proposal started");
y2milestone("Arguments: %1", WFM::Args());

import "Arch";
import "Lan";
import "Mode";
import "Progress";

/* NI: required wrt functions in routines.ycp */
block<boolean> AbortFunction = nil;
// define boolean Modified() ``{ return true; }

// include "network/routines.ycp";
include "network/lan/wizards.ycp";

list args = WFM::Args();

string func = args[0]:"";
map param = args[1]:$[];
map ret = $[];

/* create a textual proposal */
if(func == "MakeProposal") {
    string proposal = "";
    string warning = nil;
    symbol warning_level = nil;
    boolean force_reset = param["force_reset"]:false;

    if(force_reset || !Lan::proposal_valid) {
	Lan::proposal_valid = true;
	Progress::off();
	/* Popup text */
	BusyPopup(_("Detecting network cards..."));
	Lan::Read();
	BusyPopupClose();
    }
    Lan::Propose();
    list sum = Lan::Summary(false);
    proposal = sum[0]:"";
    Progress::on();

    ret = $[
	"preformatted_proposal" : proposal,
	"warning_level" : warning_level,
	"warning" : warning,
    ];
}
/* run the module */
else if(func == "AskUser") {
    map stored = Lan::Export();
    symbol seq = LanAutoSequence();
    if(seq != `next) Lan::Import(stored);
    ret = $[
	"workflow_sequence" : seq
    ];
}
/* create titles */
else if(func == "Description") {
    ret = $[
	/* RichText label */
	"rich_text_title" : _("Network Interfaces"),
	/* Menu label */
	"menu_title" : _("&Network Interfaces"),
	"id" : "lan",
    ];
}
/* write the proposal */
else if (func == "Write") {
    if (Arch::s390 || Mode::vnc || Mode::usessh || Mode::live_eval)
	Lan::WriteOnly();
    else {
	Lan::Write();
	SCR::Execute(.target.bash_background, "test -f /usr/lib/YaST2/bin/listen_remote_ipp && /usr/lib/YaST2/bin/listen_remote_ipp 120");
    }
}
/* unknown function */
else {
    y2error("unknown function: %1", func);
}

/* Finish */
y2debug("ret=%1", ret);
y2milestone("Lan proposal finished");
y2milestone("----------------------------------------");
return ret;

/* EOF */
}
