/**
 * File:	clients/lan.ycp
 * Package:	Network configuration
 * Summary:	Network cards main file
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 * Main file for network card configuration.
 * Uses all other files.
 */

{

/***
 * <h3>Network configuration</h3>
 */

textdomain "network";

/* The main () */
y2milestone("----------------------------------------");
y2milestone("Lan module started");

import "CommandLine";
import "Label";
import "Lan";
import "RichText";

include "commandline/commandline.ycp";
include "network/lan/wizards.ycp";

/* main ui function */
any ret = nil;

ret = LanSequence();
y2debug("ret == %1", ret);

return ret;
}

{
/**
 * Command line definition
 */
map cmdline = $[
    /* Commandline help title */
    "help"	: _("Network cards configuration"),
    "id"	: "lan",
    "guihandler": ``(LanSequence()),
    "initialize": ``(Lan::Read()),
    "finish"	: ``(Lan::Write()),
    "actions"	: $[
	"list" : $[
	    /* Commandline command help */
	    "help"	: _("Display configuration summary"),
	    "example"	: "lan list configured",
	    "handler"	: ``(ListHandler())
	],
	/* FIXME
	"add" : $[
	    /* Commandline command help * /
	    "help"	: _("Add a network card"),
	    "handler"	: ``(AddHandler())
	],
	*/
	"delete" : $[
	    /* Commandline command help */
	    "help"	: _("Delete a network card"),
	    "handler"	: ``(DeleteHandler())
	]
    ],
    "options" : $[
	"propose" : $[
	    /* Commandline option help */
	    "help"	: _("Propose a configuration"),
	    "example"	: "lan add propose",
	    "type"	: ""
	],
	"configured" : $[
	    /* Commandline option help */
	    "help"	: _("List only configured cards")
	],
	"unconfigured" : $[
	    /* Commandline option help */
	    "help"	: _("List only unconfigured cards")
	],
	"device" : $[
	    /* Commandline option help */
	    "help"	: _("Device identifier"),
	    "type"	: "string",
	    "example"	: "lan add device=eth0"
	],
	"ip" : $[
	    /* Commandline option help */
	    "help": _("Device IP address"),
	    "type": "ip"
	],
	"netmask" : $[
	    /* Commandline option help */
	    "help": _("Network mask"),
	    "type": "netmask"
	],
    ],
    "mappings" : $[
	"list"	: [ "configured", "unconfigured" ],
	// FIXME: "add"	: [ "device", "ip", "netmask" ],
	"delete": [ "device" ],
    ]
];

/**
 * Handler for action "list"
 * @param options action options
 */
define void ListHandler(map options) ``{

    boolean cf = false;
    boolean uncf = false;
    if(options["configured"]:nil != nil) cf = true;
    if(options["unconfigured"]:nil != nil) uncf = true;

    string summary = "";
    if(cf == false && uncf == false)
	/* Headline */
	summary = "\n" + _("Network Configuration Summary:") +
	    RichText::Rich2Plain((string) select(Lan::Summary(false), 0, "")) + "\n";
    else {
	list l = Lan::Summary(true);
	if(cf) summary = RichText::Rich2Plain(sformat("%1", l[0]:"")) + "\n";
	/* Headline */
	if(uncf) summary = _("Available Devices:") + "\n" +
	    sformat("%1", mergestring(maplist(term i, l[1]:"", ``("* " + select(i,1,"") + "\n")), ""));
	summary = "\n" + summary;
    }

    y2debug("%1", summary);
    CommandLine::Print(summary);
}

/**
 * Handler for action "add"
 * @param options action options
 */
define void AddHandler(map options) ``{
    string dev = options["device"]:"";
}

/**
 * Handler for action "delete"
 * @param options action options
 */
define void DeleteHandler(map options) ``{
    string dev = options["device"]:"";
    /* Progress text */
    CommandLine::Print(sformat(_("Deleting device: %1"), dev));

    if(Lan::Delete(dev) && Lan::Commit())
	/* Progress result */
	CommandLine::Print(_("Success"));
    else
	/* Progress result */
	CommandLine::Print(Label::ErrorMsg());
}

CommandLineRun(cmdline);

/* Finish */
y2milestone("Lan module finished");
y2milestone("----------------------------------------");

/* EOF */
}
