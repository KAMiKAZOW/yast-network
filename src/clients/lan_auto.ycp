/**
 * File:	clients/lan_proposal.ycp
 * Package:	Network configuration
 * Summary:	Lan configuration proposal
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

textdomain "network";

y2milestone("----------------------------------------");
y2milestone("Lan autoinst client started");

import "Lan";
import "Progress";
import "Mode";
include "network/lan/wizards.ycp";

/**
 * Convert data from autoyast to structure used by module.
 * @param input autoyast settings
 * @return native network settings
 */
define map FromAY(map input) ``{

    list upcase = [
		   "bootproto",
		   "broadcast",
		   "ipaddr",
		   "netmask",
		   "network",
		   "startmode",
		   "dhclient_set_down_link",
		   "wireless",
		   "wireless_mode",
		   "wireless_essid",
		   "wireless_nwid",
		   "wireless_key",
		   "wireless_nick",
		   "remote_ipaddr"
    ];

    map interfaces = listmap(map interface, input["interfaces"]:[], ``{
	map new_interface = $[];
	foreach(string k, string v, interface, ``{
	    if (contains(upcase, k)) {
		new_interface[toupper(k)] = v;
	    }
	    else if (v != "") {
		new_interface[k] = v;
	    }
	});
	return([interface["device"]:"unknown",new_interface]);
    });

    map devices = $[];
    foreach(string device, map if_data, interfaces, ``{

	integer pos = findfirstof( device, "0123456789");
	string strtok =  substring(device, 0, pos);
	string inttok = substring(device, pos);

	map device = devices[strtok]:$[];
	device=add(device, inttok, if_data);
	devices[strtok] = device;

    });
    map native_modules = $[];

    if (size(input["modules"]:[]) > 0) {
	native_modules = listmap(map mod, input["modules"]:[], ``{
	    string dev = mod["device"]:"";
	    remove(mod, "device");
	    return([dev, mod]);
	});
    }
    else if (size(input["modules"]:[]) == 0 && Mode::autoinst)
    {
	import "Arch";
	if(!Arch::s390) Lan::ReadHardware("netcard");
	list HW = Lan::GetHardware();
	devices = mapmap(string type, map devsmap, devices, ``{
	    list HW_type = filter(`dev, HW, ``(dev["type"]:"" == type ));
	    y2debug("hw from type %1 = %2", type, HW_type);
	    map newmap = mapmap(string num, map devmap, devsmap, ``{
		devmap = add(devmap, "UNIQUE", HW_type[ tointeger(num) ,"unique"]:"" );
		string device = sformat ("%1%2", type, num );
		native_modules[device] = $[ "module": HW_type[ tointeger(num) ,"module"]:"", "options": HW_type[ tointeger(num) ,"options"]:"" ];
		return([num, devmap]);
	    });
	    return ([ type, newmap ] );
	});
    }

    // FIXME: add aliasing support
    input["devices"] = devices;
    input["modules"] = native_modules;
    return input;
}

/**
 * Convert data from native network to autoyast for XML
 * @param settings native network settings
 * @return autoyast network settings
 */
define map ToAY (map settings) ``{
    list interfaces = [];
    foreach(string device, map devsmap, settings["devices"]:$[], ``{
	foreach(string num, map devmap, devsmap, ``{
	    map newmap = $[];
	    foreach(string key, string val, devmap, ``{
			if ( size(val) > 0 )
				change(newmap, tolower(key), val);
	    });
	    change(newmap, "device", device + num);
	    change(interfaces, newmap);
	});
    });
    list modules = [];
    foreach(string device, map modmap, settings["modules"]:$[], ``{
	    map newmap = $[];
	    foreach(string key, string val, modmap, ``{
			change(newmap, tolower(key), val);
	    });
	    change(newmap, "device", device);
	    change(modules, newmap);
    });
	return $[
		"interfaces": interfaces,
		"dns"		: settings["dns"]:$[],
		"routing"	: settings["routing"]:$[],
		"modules"	: modules
	];
}



any ret = nil;
string func = "";
map param = $[];

/* Check arguments */
if(size(Args()) > 0 && is(Args(0), string)) {
    func = WFM::Args(0);
    if(size(Args()) > 1 && is(Args(1), map))
	param = WFM::Args(1);
}
y2debug("func=%1", func);
y2debug("param=%1", param);


if(func == "Summary") {
    ret = select(Lan::Summary(false),0, "");
}
else if (func == "Reset") {
    Lan::Import($[]);
    ret = $[];
}
else if (func == "Change") {
    ret = LanAutoSequence();
}
else if(func == "Import") {
    map autoyast = FromAY(param);
    ret = Lan::Import(autoyast);
}
else if(func == "Read") {
	Progress::off();
	ret = Lan::Read();
	Progress::on();
}
else if (func == "Export") {
    map settings = Lan::Export();
    map autoyast = ToAY(settings);
    ret = autoyast;
}
else if (func == "Write") {
    Progress::off();
    Lan::write_only = true;
    ret = Lan::Write();
    Progress::on();
}
/* unknown function */
else {
    y2error("unknown function: %1", func);
    ret =  false;
}


y2debug("ret=%1", ret);
y2milestone("Lan auto finished");
y2milestone("----------------------------------------");

return ret;

/* EOF */
}
