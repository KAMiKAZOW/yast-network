/**
 * File:	clients/lan_proposal.ycp
 * Package:	Network configuration
 * Summary:	Lan configuration proposal
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

textdomain "network";

import "Lan";
include "network/lan/wizards.ycp";

/**
 * Convert data from autoyast to structure used by module.
 * @param autoyast settings
 * @return native network settings
 */
define map FromAY(map input) ``{

    list upcase = [
		   "bootproto",
		   "broadcast",
		   "ipaddr",
		   "netmask",
		   "network",
		   "startmode",
		   "dhclient_set_down_link",
		   "wireless",
		   "wireless_mode",
		   "wireless_essid",
		   "wireless_nwid",
		   "wireless_key",
		   "wireless_nick",
		   "remote_ipaddr"
    ];

    map interfaces = listmap(map interface, input["interfaces"]:[], ``{
	map new_interface = $[];
	foreach(string k, string v, interface, ``{
	    if (contains(upcase, k)) {
		new_interface[toupper(k)] = v;
	    }
	    else if (v != "") {
		new_interface[k] = v;
	    }
	});
	return([interface["device"]:"unknown",new_interface]);
    });

    map devices = $[];
    foreach(string device, map if_data, interfaces, ``{

	integer pos = findfirstof( device, "0123456789");
	string strtok =  substring(device, 0, pos);
	string inttok = substring(device, pos);

	map device = devices[strtok]:$[];
	device=add(device, inttok, if_data);
	devices[strtok] = device;

    });
	// FIXME: add aliasing support
    input["devices"] = devices;
    return input;
}

/**
 * Convert data from native network to autoyast for XML
 * @param native network settings
 * @return autoyast network settings
 */

define map ToAY(map settings) ``{
    list interfaces = [];
    maplist(string device, map devsmap, settings["devices"]:$[], ``{
	maplist(string num, map devmap, devsmap, ``{
	    map newmap = $[];
	    maplist(string key, string val, devmap, ``{
			change(newmap, tolower(key), val);
	    });
	    change(newmap, "device", device + num);
	    change(interfaces, newmap);
	});
    });
	return $[
		"interfaces": interfaces,
		"dns"		: settings["dns"]:$[],
		"routing"	: settings["routing"]:$[],
		"modules"	: settings["modules"]:$[]
	];
}

/* The main () */
y2milestone("----------------------------------------");
y2milestone("Lan autoinst client started");

string func = WFM::Args(0);
map param = WFM::Args(1);

if(func == "Summary") {
    map autoyast = FromAY(param);
    Lan::Import(autoyast);
    return select(Lan::Summary(false),0, "");
}
else if (func == "Reset") {
    Lan::Import($[]);
    return $[];
}
else if (func == "Change") {
    Lan::Import(FromAY(param));
    any res = LanAutoSequence();
    return res;
}
else if (func == "Result") {
    map settings = Lan::Export();
    map autoyast = ToAY(settings);
    return autoyast;
}
else if (func == "Write") {
    Lan::Import(FromAY(param));
    Lan::write_only = true;
    return Lan::Write();
}
/* unknown function */
else {
    y2error("unknown function: %1", func);
    return false;
}

/* EOF */
}
