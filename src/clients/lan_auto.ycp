/**
 * File:	clients/lan_auto.ycp
 * Package:	Configuration of network
 * Summary:	Client for autoinstallation
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 * This is a client for autoinstallation. It takes its arguments,
 * goes through the configuration and return the setting.
 * Does not do any changes to the configuration.
 */

/**
 * @param first a map of lan settings
 * @return boolean success of operation
 * @example map mm = $[ "FAIL_DELAY" : "77" ];
 * @example map ret = WFM::CallModule("lan_auto", [ mm ]);
 */

{

textdomain "network";

y2milestone("----------------------------------------");
y2milestone("Lan auto started");

import "Lan";
include "network/lan/wizards.ycp";

list args = WFM::Args();
if(size(args) <= 0) {
    y2error("Did not get the settings, probably some mistake...");
    return false;
}
if(!is(WFM::Args(0), map)) {
    y2error("Bad argument for lan_auto: %1", WFM::Args(0));
    return false;
}

/* The settings are in the first argument */
map settings = select(args, 0, $[]);
y2debug("Imported: %1", settings);

Lan::Import(settings);
define set_contents()
    ``{
    term contents =
	`VBox(
	      `VSpacing(1),
	      `RichText( `id(`summary), select(Lan::Summary(false), 0 , "")),
	      `VSpacing(0.5),
	      `HBox(
		    `PushButton(`id(`configure), _("&Configure Network")),
		    `HStretch(),
		    `PushButton(`id(`reset), _("&Reset Configuration"))
		    ),
	      `VSpacing(1)
	      );
    Wizard::SetContents(_("Network Configuration"),
			contents, "", true, true);
}
set_contents();
any result = nil;
any ret = nil;
repeat {
    ret = UI::UserInput();
    if(ret == `configure)
    {
	result = LanAutoSequence();
	if(result == `next || result == `finish)
	{
	    settings = Lan::Export();
	}
	Lan::Import(settings);
	set_contents();
    }
    else if( ret == `reset)
    {
	settings= $[];
	Lan::Import(settings);
	set_contents();
    }
} until (ret == `back ||  ret == `abort ||  ret == `next || ret ==`key);

y2milestone("Lan auto finished");
y2milestone("----------------------------------------");

return [ret, settings];

/* EOF */
}
