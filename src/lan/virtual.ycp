/**
 * File:	include/network/lan/virtual.ycp
 * Module:	Network configuration
 * Summary:	Multiple addresses dialogs
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

textdomain "network";

import "Lan";
import "Label";
import "Popup";
import "Wizard";

include "network/routines.ycp";

/*
 * TODO:
 * - bug: where to put Edit, Add?
 * - bug: aliases to overview (add,edit,delete)
 * - enh: more items (REMOTE_IPADDR, ...)
 * - enh: disallow already used IP addresses?
 * - enh: disallow already used IP addresses in lan?
 */

/*
 * Check if given host is system and present warning in this case.
 * @param host host to be checked
 * @param delete true if the host will be deleted
 * @return true if continue
 * /
global define boolean HostSystemPopup(string host, boolean delete) ``{

    if(!contains(Host::GetSystemHosts(), host)) return true;

    /* Warning popup text 1/2 * /
    string text = sformat(_("The host %1 is a system host.") + "\n", host);

    if(delete)
	/* Warning popup text 2/2 * /
	text = text + _("Really delete it?");
    else
	/* Warning popup text 2/2 * /
	text = text + _("Really change it?");

    return Popup::AnyQuestion("", text, Label::YesButton(), Label::NoButton(), `focus_no);
}
*/

/**
 * Main aliases dialog
 * @param standalone true if not run from another ycp client
 * @return dialog result
 */
global define symbol VirtualDialog(boolean standalone) ``{

    ScreenName("lan-virtual");

    /* Hosts dialog caption */
    string caption = _("Virtual Aliases");

    /* Hosts dialog help 1/2 */
    string help = _("<p>Configure virtual aliases in this dialog.</p>") +

    /* Hosts dialog help 2/2 */
    _("<p>Enter an <b>Alias Name</b>, an <b>IP Address</b>, and
the <b>Netmask</b>.</p>
");

    integer items = 0;
    integer max = 0;
    list table_items = [];

    /* make ui items from the aliases list */
    maplist(string alias, map data, Lan::aliases, ``{
	string ipaddr = data["IPADDR"]:"";
	string netmask = data["NETMASK"]:"";
	term item = `item(`id(items), alias, ipaddr, netmask);
	change(table_items, item);
	items = items + 1;
    });

    y2debug("table_items=%1", table_items);
    y2debug("items=%1", items);
    max = items;

    /* Hosts dialog contents */
    term contents = `HBox(
	`HSpacing(5),
	`VBox(
	    `VSpacing(2),
	    /* Frame label */
	    `Frame(_("Virtual Aliases"), `HBox(`HSpacing(3), `VBox(
		`VSpacing(1),
		`Table(`id(`table), `header(
                    /* Table header label */
                    _("Alias Name"),
                    /* Table header label */
                    _("IP Address"),
                    /* Table header label */
                    _("Netmask")), []),
		`HBox(
		    /* PushButton label */
		    `PushButton(`id(`add), _("Ad&d")),
		    /* PushButton label */
		    `PushButton(`id(`edit), `opt(`disabled), _("&Edit")),
		    /* PushButton label */
		    `PushButton(`id(`delete), `opt(`disabled), _("De&lete"))),
		`VSpacing(1)
		), `HSpacing(3))),
	    `VSpacing(2)
	),
	`HSpacing(5)
    );

    if(standalone == true)
	Wizard::SetContentsButtons(caption, contents, help,
		Label::BackButton(), Label::FinishButton());
    else
	Wizard::SetContentsButtons(caption, contents, help,
		Label::BackButton(), Label::OKButton());

    UI::ChangeWidget(`id(`table), `Items, table_items);
    if(items > 0) UI::SetFocus(`id(`table));

    any ret = nil;
    while(true) {

	UI::ChangeWidget(`id(`edit), `Enabled, items > 0);
	UI::ChangeWidget(`id(`delete), `Enabled, items > 0);

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	/* edit alias */
	else if(ret == `edit) {
	    integer cur = UI::QueryWidget(`id(`table), `CurrentItem);
	    list cur_item = filter(term e, table_items, ``(cur == select(select(e, 0, []), 0, nil)));

	    y2debug("cur=%1", cur);
	    y2debug("cur_item=%1", cur_item);

	    term item = cur_item[0]:nil;
	    list forbidden = maplist(term e, table_items, ``(select(e, 1, "")));
	    forbidden = filter(string h, forbidden, ``(h != select(item, 1, "")));
	    forbidden = [];

	    // if(!HostSystemPopup(select(item, 1, ""), false)) continue;
	    item = VirtualEditDialog(cur, item, forbidden);

	    if(item == nil) continue;

	    table_items = maplist(term e, table_items, ``{
		if(cur == select(select(e, 0, []), 0, -1))
		    return item;
		return e;
	    });
	    UI::ChangeWidget(`id(`table), `Items, table_items);
	    UI::ChangeWidget(`id(`table), `CurrentItem, cur);
	    continue;
	}
	/* add alias */
	else if(ret == `add) {
	    list forbidden = maplist(term e, table_items, ``(select(e, 1, "")));
	    term item = VirtualEditDialog(max, `empty(), forbidden);
	    if(item == nil) continue;

	    change(table_items, item);
	    UI::ChangeWidget(`id(`table), `Items, table_items);
	    UI::ChangeWidget(`id(`table), `CurrentItem, max);
	    items = items + 1;
	    max = max + 1;
	    continue;
	}
	/* delete alias */
	else if(ret == `delete) {
	    integer cur = UI::QueryWidget(`id(`table), `CurrentItem);
	    list cur_item = filter(term e, table_items, ``(cur == select(select(e, 0, []), 0, nil)));

	    y2debug("cur=%1", cur);
	    y2debug("cur_item=%1", cur_item);

	    term item = cur_item[0]:nil;
	    // if(!HostSystemPopup(select(item, 1, ""), true)) continue;

	    table_items = filter(term e, table_items, ``{
		string ip = select(e, 1, "");
		if(cur == select(select(e, 0, []), 0, nil)) {
		    // if(ip != "" && ip != nil)
			// change(Host::Deleted, ip);
		    return false;
		}
		return true;
	    });
	    UI::ChangeWidget(`id(`table), `Items, table_items);
	    items = size(table_items);
	    continue;
	}
	else if(ret == `back) {
	    break;
	}
	else if(ret == `next) {
	    /* check_ */
	    break;
	}
	else {
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }

    /* update aliases from widgets */
    if(ret == `next) {
	Lan::aliases = $[];
	maplist(term e, table_items, ``{
	    map alias = $[];
	    change(alias, "IPADDR", select(e, 2, ""));
	    change(alias, "NETMASK", select(e, 3, ""));
	    change(Lan::aliases, select(e, 1, ""), alias);
	});
    }

    y2debug("table_items=%1", table_items);
    y2debug("aliases=%1", Lan::aliases);

    return ret;
}

/**
 * Alias edit dialog
 * @param id id of the edited host
 * @param entry edited entry
 * @param forbidden already used IP addresses
 * @return host or nil, if canceled
 */
global define term VirtualEditDialog(integer id, term entry, list forbidden) ``{

    ScreenName("lan-virtual-edit");

    y2debug("id=%1", id);
    y2debug("entry=%1", entry);
    y2debug("forbidden=%1", forbidden);

    UI::OpenDialog(`opt(`decorated),`VBox(
	`HSpacing(1),
	`VBox(
	    /* TextEntry label */
	    `TextEntry(`id(`name), _("Alias &Name"), select(entry, 1, "")),
	    /* TextEntry label */
	    `TextEntry(`id(`ipaddr), _("&IP Address"), select(entry, 2, "")),
	    /* TextEntry label */
	    `TextEntry(`id(`netmask), _("Net&mask"), select(entry, 3, ""))
	    ),
	`HSpacing(1),
	`HBox(
	    `PushButton(`id(`ok), `opt(`default), Label::OKButton()),
	    `PushButton(`id(`cancel), Label::CancelButton())
	    )
	));

    UI::ChangeWidget(`id(`name), `ValidChars, "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");
    UI::ChangeWidget(`id(`ipaddr), `ValidChars, ValidCharsIP);
    UI::ChangeWidget(`id(`netmask), `ValidChars, ValidCharsNetmask);

    if(entry == `empty())
	UI::SetFocus(`id(`name));
    else
	UI::SetFocus(`id(`ipaddr));

    any ret = nil;
    term host = nil;

    while(true) {
	host = nil;
	ret = UI::UserInput();
	if(ret != `ok) break;

	host = `item(`id(id));
	string val = UI::QueryWidget(`id(`name), `Value);
	if(false && !check_ip(val)) {
	    /* Popup::Error text */
	    Popup::Error(_("The IP address is invalid."));
	    UI::SetFocus(`id(`name));
	    continue;
	}
	if(contains(forbidden, val)) {
	    /* Popup::Error text */
	    Popup::Error(sformat(_("IP address %1 is already present."), val));
	    UI::SetFocus(`id(`host));
	    continue;
	}
	host = add(host, val);

	val = UI::QueryWidget(`id(`ipaddr), `Value);
	if(!check_ip(val)) {
	    /* Popup::Error text */
	    Popup::Error(_("The IP address is incorrect."));
	    UI::SetFocus(`id(`ipaddr));
	    continue;
	}
	host = add(host, val);

	val = UI::QueryWidget(`id(`netmask), `Value);
	if(!check_netmask(val)) {
	    /* Popup::Error text */
	    Popup::Error(_("The subnet mask is incorrect"));
	    UI::SetFocus(`id(`netmask));
	    continue;
	}
	host = add(host, val);

	break;
    }

    UI::CloseDialog();
    if(ret != `ok) return nil;
    return host;
}

/* FIXME
include "devel/debug.ycp";

Wizard::CreateDialog();
Lan::Read();
Lan::Select("eth1");
VirtualDialog(true);
*/

/* EOF */
}
