/**
 * File:	lan/cmdline.ycp
 * Package:	Network configuration
 * Summary:	Network cards cmdline handlers
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

textdomain "network";

import "CommandLine";
import "Label";
import "Lan";
import "NetworkDevices";
import "RichText";
import "Report";

list <map<string, any> > getConfigList(){
 list <map<string, any> > confList = [];
 integer count = 0;
 list<map<string,any> > overview = (list<map<string,any> >)Lan::Overview();
 overview = overview + Lan::Unconfigured ();
 foreach(map<string, any> row, overview, {
  confList = add(confList, $[tostring(count) : $["id" : row["id"]:"",
				"rich_descr" : row["rich_descr"]:"",
				"descr" : row["table_descr", 0]:"",
				"addr" : row["table_descr", 1]:""]]);
  count = count + 1;
 });
 return confList;
}

boolean validateId(map<string, string> options, list <map<string, any> > config){
 if (options["id"]:nil == nil){
			 Report::Error( _("Use \"id\" option to determine device."));
			 return false;
			}

   if (tointeger(options["id"]:"0")>size(config)-1){
			 Report::Error( _("Value of \"id\" is out of range. Use \"list\" option to check max. value of \"id\"."));
			 return false;
			}
 return true;
}


/**
 * Handler for action "show"
 * @param options action options
 */
define boolean ShowHandler(map<string, string> options) {
   list <map<string, any> > config = getConfigList();
   if (validateId(options, config)==false) return false;
    foreach(map<string, any> row, config, {
     foreach(string key, map<string, any> value, (map<string, map<string, any> >) row, {
	if (key == options["id"]:"0"){
			 string text = sformat("echo \"%1\"|sed s/'<[/a-z]*>'/'\\n'/g", value["rich_descr"]:"");
			 map<string, any> descr = (map<string, any>)SCR::Execute(.target.bash_output, text);
			 y2internal("%1", descr);
			 CommandLine::Print( descr["stdout"]:"" );
			}
     });
    });
    return true;
}

define boolean ListHandler(map<string, string> options) {
    foreach(map<string, any> row, getConfigList(), {
     foreach(string id, map <string,any> detail, (map<string, map<string, any> >)row, {
      CommandLine::Print(sformat("%1\t%2, %3\n",id, detail["descr"]:"", detail["addr"]:""));
     });
    });
 return true;
}
/**
 * Handler for action "add"
 * @param options action options
 */
define boolean AddHandler(map<string, string> options) {
    string type = options["type"]:"";

   CommandLine::Print(type);
/*
    CommandLine::Print(sformat(_("Adding Device: %1"), dev));

    if(!Lan::Add()) {
	CommandLine::Print(Label::ErrorMsg());
	return false;
    }

    if(options["ipaddr"]:"" != "") Lan::ipaddr = options["ipaddr"]:"";
    if(options["netmask"]:"" != "") Lan::netmask = options["netmask"]:"";
    if(options["bootproto"]:"" != "") Lan::bootproto = options["bootproto"]:"";
    Lan::type = NetworkDevices::device_type(dev);
    Lan::device = NetworkDevices::device_num(dev);

    Lan::Commit();
    CommandLine::Print(_("Success"));
*/

    return true;
}

/**
 * Handler for action "delete"
 * @param options action options
 */
define boolean DeleteHandler(map<string, string> options) {
   list <map<string, any> > config = getConfigList();
   if (validateId(options, config)==false) return false;
   foreach(map<string, any> row, config, {
     foreach(string key, map<string, any> value, (map<string, map<string, any> >) row, {
        if (key == options["id"]:"0"){
			string id = value["id"]:"";
		            Lan::Delete(id);
		            Lan::Commit();
			 CommandLine::Print(_("The device was deleted."));
                        }
     });
    });


    return true;
}

/* EOF */
}
