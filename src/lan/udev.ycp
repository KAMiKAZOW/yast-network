/**
 * File:        include/network/lan/udev.ycp
 * Package:     Network configuration
 * Summary:     udev helpers
 * Authors:     Michal Filka <mfilka@suse.cz>
 *
 * Functions for handling udev rules
 */
{

list< string> GetDefaultUdevRule( string dev_name, string dev_mac)
{
    list< string> default_rule = [
             "SUBSYSTEM==\"net\"",
             "ACTION==\"add\"",
             "DRIVERS==\"?*\"",
             sformat("ATTR{address}==\"%1\"", dev_mac),
             "ATTR{type}==\"1\"",
             sformat("NAME=\"%1\"", dev_name)
	];

    return default_rule;
}

/*
 * Tells udevd to reload and update its configuration
 */
void UpdateUdevd()
{
    SCR::Execute( .target.bash, "udevadm control --reload");

    // When configuring a new s390 card, we neglect to fill
    // its Items[i, "udev", "net"], causing jumbled names (bnc#721520)
    // The udev trigger will will make udev write the persistent names
    // (which it already has done, but we have overwritten them now).
    SCR::Execute(.target.bash, "udevadm trigger --subsystem-match=net --action=add");
}

/*
 * Removes (key,operator,value) tripplet from given udev rule.
 */
list< string> RemoveKeyFromUdevRule( list< string> rule, string key)
{
    const string pattern = sformat( "%1={1,2}[^[:space:]]*", key );

    return filter( string atom, rule, {
        return !regexpmatch( atom, pattern);
    });
}

/*
 * Adds (key, operator, value) tripplet into given udev rule
 *
 * Tripplet is given as a string in form KEY="VALUE" or
 * MATCHKEY=="MATCHVALUE"
 */
list< string> AddToUdevRule( list< string> rule, string tripplet)
{
    if( !regexpmatch( tripplet, ".+={1,2}\".*\"") )
        return rule;
    if( rule == nil)
        rule = [];

    return add( rule, tripplet );
}

}
