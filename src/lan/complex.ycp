/**
 * File:	include/network/lan/dialogs.ycp
 * Package:	Network configuration
 * Summary:	Summary, overview and IO dialogs for network cards config
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

textdomain "network";

import "CWM";

import "Lan";
import "DNS";
import "Mode";
import "NetworkConfig";
import "NetworkModules";
import "NetworkService";
import "Routing";
import "Wizard";
//import "WizardHW";
import "Popup";
import "Label";
import "Product";
import "Package";
import "TablePopup";
import "CWMTab";
import "Stage";

include "network/routines.ycp";
include "network/summary.ycp";
include "network/lan/help.ycp";
include "network/services/routing.ycp";
include "network/services/dns.ycp";


/**
 * Return a modification status
 * @return true if data was modified
 */
define boolean Modified() ``{
    return Lan::Modified() || DNS::modified || Routing::Modified() ||
	NetworkConfig::Modified();
}

/**
 * Commit changes to internal structures
 * @return always `next
 */
define symbol Commit() ``{
    Lan::Commit();
    return `next;
}

/**
 * Display finished popup
 * @return dialog result
 */
define symbol FinishDialog() ``{
    return FinishPopup(Modified(), "lan", "", "mail", ["permanent"]);
}

/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
define symbol ReadDialog() ``{

    ScreenName("lan-read");

    Wizard::RestoreHelp( help["read"]:"" );
    Lan::AbortFunction = ``{return PollAbort();};
    boolean ret = Lan::Read (`cache);

    boolean xenbr = Lan::HaveXenBridge ();
    if (xenbr)
    {
	if (! Popup::ContinueCancel (
		sformat (
		    // continue-cancel popup, #178848
		    // %1 is a (long) path to a README file
_("A Xen network bridge was detected.
Due to the renaming of network interfaces by the bridge script,
network interfaces should not be configured or restarted.
See %1 for details."), "/usr/share/doc/packages/xen/README.SuSE")))
	{
	    ret = false;
	}
    }

    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
define symbol WriteDialog() ``{
    ScreenName("lan-write");

    if(!Modified()) return `next;

    Wizard::RestoreHelp(help["write"]:"");
    Lan::AbortFunction = ``{return PollAbort() && ReallyAbort();};
    boolean ret = Lan::Write();
    return ret ? `next : `abort;
}

define boolean AddInterface (integer hwid) {
    //this is the map of kernel modules vs. requested firmware 
    //non-empty keys are firmware packages shipped by SUSE
    map <string, string> request_firmware = $[
	"atmel_pci" : "atmel-firmware", 
	"atmel_cs" : "atmel-firmware", 
	"bcm43xx" : "",
	"ipw2100" : "ipw-firmware",
	"ipw2200" : "ipw-firmware",
	"prism54" : "",
	"spectrum_cs" : "",
	"zd1201" : "",
	"zd1211rw" : "",
	"acx" : "",
	"at76_usb" : "atmel-firmware",
	"ipw3945" : "ipw-firmware",
	"rt61pci" : "", 
	"rt73usb" : "",
    ];

    Lan::Add ();
    Lan::SelectHW (hwid);
    Lan::SetDefaultsForHW ();

    // warn if selecting a card without a driver, #29296
    // TODO also for DSL...
    if (NetworkModules::Alias == "")
    {
	if (!Popup::ContinueCancel (_("The device does not have a driver module.
The driver may be built in the kernel.")))
	{
	    return false;
	}
    }
    else if(haskey(request_firmware, NetworkModules::Alias)){
	string fw = request_firmware[NetworkModules::Alias]:"";
	if (fw != ""){
	    if ((!Package::Installed(fw) && !Package::Available(fw))){
		
		//check if package with the firmware is available
		//i.e. if there are any inst. sources defined
		//and if the package is available on any of them

	        Popup::Message(sformat(_("The device needs a firmware to function properly. It can be installed from
%1 Add-On CD.\nTo install the firmware, add Add-On CD to your YaST installation sources and return 
to this configuration dialog."), Product::name));
		return false;
	    }
	}
	else {
		return (Popup::ContinueCancel(_("The device needs a firmware to function properly. It can be usually downloaded 
from your driver vendor web page.\nIf you have already downloaded and installed the firmware, click \'Continue\' 
to configure the device. Otherwise click \'Cancel\' and return to this dialog
once you have installed the firmware.")));
	}
    }
    // this is one of 3 places to install packages :-(
    // - kernel modules (InstallKernel): before loaded
    // - smpppd & kinternet: before net start
    // - wlan firmware: here, just because it is copied from modems
    //   #45960
    if(Lan::Requires != [] && Lan::Requires != nil) {
	if(PackagesInstall(Lan::Requires) != `next)
	    return false;
    }
    return true;
}


define void IPv6Init (string key) {
    UI::ChangeWidget (`id (key), `CurrentButton, Lan::ipv6?"enable":"disable");
}

define void IPv6Store (string key, map event) {
 if ((string) UI::QueryWidget (`id (key), `CurrentButton)=="enable") Lan::SetIPv6(true);
	else Lan::SetIPv6(false);
}

/**
 * Initialize the NetworkManager widget
 * @param key id of the widget
 */
define void ManagedInit (string key) {
    string value = NetworkService::IsManaged ()? "managed": "ifup";
    UI::ChangeWidget (`id (key), `CurrentButton, value);
}

/**
 * Store the NetworkManager widget
 * @param key	id of the widget
 * @param event	the event being handled
 */
define void ManagedStore (string key, map event) {
    string value_g = (string) UI::QueryWidget (`id (key), `CurrentButton);
    boolean value = value_g == "managed";
    if (NetworkService::IsManaged () != value)
	Lan::SetModified ();
    NetworkService::SetManaged (value);
}

list<map<string,any> > o_items = nil;

void initOverview (string key) ``{
// if (o_items == nil){
    o_items = (list<map<string,any> >)Lan::Overview();
    o_items = o_items + Lan::Unconfigured ();
// }

    list<term> term_items = maplist (map<string,any> i, o_items, {
        term t = `item (`id (i["id"]:""));
        foreach (string l, i["table_descr"]:[], {
            t = add (t, l);
        });
        return t;
    });
    UI::ChangeWidget (`id (`_hw_items), `Items, term_items);

    if (!Mode::config() && Lan::HaveXenBridge ()) // #196479
    {
	// #178848
	foreach (symbol b, [`add, `edit, `delete], {
	    UI::ChangeWidget (`id (b), `Enabled, false);
	});
    }
}

symbol handleOverview( string key, map event ) {
  string current = (string)UI::QueryWidget (`id (`_hw_items), `CurrentItem);

 if (substring (current, 0, 1) == "-") // unconfigured
			 UI::ChangeWidget(`id(`delete), `Enabled, false);
	else UI::ChangeWidget(`id(`delete), `Enabled, true);

  foreach(map<string, any> row, o_items, {
   if (row["id"]:"" == current) UI::ChangeWidget(`_hw_sum, `Value,row["rich_descr"]:"");
  });

 if (event["EventReason"]:"" == "Activated")
 {
  switch ((symbol)event["ID"]:nil){
   case `add:
	Lan::Add();
	return `add;
   case `edit:
	    if (substring (current, 0, 1) == "-") // unconfigured
	    {
		integer i = tointeger (substring (current, 1));
		if (! AddInterface (i)) break;
	    }
	    else		// configured
	    {
		Lan::Edit(current);
		if (Lan::startmode == "managed")
		{
		    // Continue-Cancel popup
		    if (!Popup::ContinueCancel (_("The interface is currently set to be managed
by the NetworkManager applet.

If you edit the settings for this interface here,
the interface will no longer be managed by NetworkManager.
")))
		    {
			break; // means cancel
		    }
		    //
		    // TODO move the defaults to GetDefaultsForHW
		    Lan::startmode = "ifplugd";
		}
	    }
	    return `edit;

   case `delete:
	    if (substring (current, 0, 1) == "-") // unconfigured
		return nil;

	    string pop = sformat(_("All additional addresses belonging to the interface %1
will be deleted as well.

Really continue?
"), current);
	    if(Lan::HasAliases(current) && Popup::YesNoHeadline(Label::WarningMsg(), pop) != true)
		break;

	    Lan::Delete(current);
	    Lan::Commit();
	    initOverview("");
	    break;
  }
 }
/*
	else if(ret["event"]:nil == `global_managed) {
	    NetworkService::SetManaged (! NetworkService::IsManaged ());
	    Lan::SetModified ();
	    repaint = true;
	}
	else if(ret["event"]:nil == `managed) {
	    string dev = ret["selected"]:"";
	    if(dev == nil) {
		y2error("Empty device during Edit");
		continue;
	    }

	    if (substring (dev, 0, 1) == "-") // unconfigured
	    {
		integer i = tointeger (substring (dev, 1));
		if (! AddInterface (i)) continue;
	    }
	    else Lan::Edit(dev);
	    Lan::startmode = "managed";
	    Lan::nm_name = "";	// no hwcfg
	    Lan::Commit ();
	    repaint = true;
	    continue;
	}
	else if(ret["event"]:nil == `next || ret["event"]:nil == `back) {
	    break;
	}
*/
 if (size(o_items)==0){
   UI::ChangeWidget(`_hw_sum, `Value, "");
   UI::ChangeWidget (`id (`edit), `Enabled, false);
   UI::ChangeWidget (`id (`delete), `Enabled, false);
   return nil;
  }
}



map<string, map<string,any> > wd = $[
	"MANAGED": $[
	    "widget": `radio_buttons,
	    // radio button group label, method of setup
	    "label": _("Network Setup Method"),
	    "items": [
		// radio button label
		// the user can control the network with the NetworkManager
		// program
		["managed", _("&User Controlled with NetworkManager")],
		// radio button label
		// ifup is a program name
		["ifup", _("&Traditional Method with ifup")],
		],
	    "opt": [],
	    "help": help["managed"]:"",
	    "init": ManagedInit,
	    "store": ManagedStore,
	    ],
	"IPV6": $[
	    "widget": `radio_buttons,
	    // radio button group label, method of setup
	    "label": _("IPv6 Support"),
	    "items": [
		// radio button label
		// the user can enable IPv6
		["enable", _("&Enable")],
		// radio button label
		// the user can disable IPv6
		["disable", _("&Disable")],
		],
	    "opt": [],
	    "help": help["ipv6"]:"",
	    "init": IPv6Init,
	    "store": IPv6Store,
	    ],
	  "OVERVIEW" : $[
	    "widget" : `custom,
	    "custom_widget" :
		`VBox(
		`Table (`id (`_hw_items), `opt (`notify, `immediate), `header(_("Name"), _("IP Address"))),
                 `HBox (
		        `PushButton (`id (`add), Label::AddButton ()),
		        `PushButton (`id (`edit), Label::EditButton ()),
		        `PushButton (`id (`delete), Label::DeleteButton ()),
		        `HStretch ()
			),
		 `RichText (`id (`_hw_sum), "")
		),
	    "init" : initOverview,
	    "handle" : handleOverview,
//	    "store" : storeOverview,
	    "help" : help["overview"]:""
	  ],
	];

wd =  (map<string, map<string, any> >)union ( wd, widget_descr_dns );
wd =  (map<string, map<string, any> >)union ( wd, wd_routing );

map tabs_descr = $[
	"global"   : $[
	  "header" : _("Global"),
	  "contents" : `VBox (
	    "MANAGED", "IPV6",
	    `VStretch()
	   ),
	  "widget_names" : ["MANAGED", "IPV6"]
	],
	"overview" : $[
	  "header" : _("Overview"),
	  "contents" : `VBox (
	    "OVERVIEW"
	  ),
	 "widget_names" : ["OVERVIEW"]
	],
];
 tabs_descr = union(tabs_descr, route_td);
 tabs_descr = union(tabs_descr, dns_td);

symbol MainDialog(string init_tab) ``{
string caption = _("Network Setting Dialog");
    map widget_descr = $[
        "tab": CWMTab::CreateWidget($[
            "tab_order": ( Stage::normal() ) ? [ "global", "overview", "resolv", "route" ] : ["overview", "resolv", "route"],
            "tabs": tabs_descr,
            "widget_descr": wd,
            "initial_tab" : ( Stage::normal() ) ? init_tab : "overview",
            "tab_help" : "",
        ]),
    ];
    term contents = `VBox( "tab");

    list<map <string, any> > w = CWM::CreateWidgets (["tab"], (map <string, map <string, any> >)widget_descr);
    string help = CWM::MergeHelps(w);
    contents = CWM::PrepareDialog(contents, w);

    Wizard::SetContentsButtons(caption, contents, help, Label::NextButton (), Label::FinishButton ());
    Wizard::HideBackButton();

    symbol ret = CWM::Run(w, $[`abort:ReallyAbort ]);

    return ret;
}


/* EOF */
}
