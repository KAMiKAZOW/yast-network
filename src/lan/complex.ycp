/**
 * File:	include/network/lan/dialogs.ycp
 * Package:	Network configuration
 * Summary:	Summary, overview and IO dialogs for network cards config
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

textdomain "network";

import "Lan";
import "DNS";
import "Routing";

import "Wizard";
import "Wizard_hw";

import "Popup";
import "Label";

include "network/routines.ycp";
include "network/complex.ycp";

/**
 * Return a modification status
 * @return true if data was modified
 */
global define boolean Modified() ``{
    return Lan::Modified() || DNS::modified || Routing::modified;
}

/**
 * Commit changes to internal structures
 * @return always `next
 */
global define symbol Commit() ``{
    Lan::Commit();
    return `next;
}

/**
 * Display finished popup
 * @return dialog result
 */
global define symbol FinishDialog() ``{
    return FinishPopup(Modified(), "lan", "", "mail", ["permanent"]);
}

/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
global define symbol ReadDialog() ``{

    ScreenName("lan-read");

    /* Network cards read dialog help 1/2 */
    string help = _("<p><b><big>Initializing network card
configuration</big></b><br>Please wait...<br></p>") +

    /* Network cards read dialog help 2/2 */
_("<p><b><big>Aborting the initialization:</big></b><br>
Safely abort the configuration utility by pressing <B>Abort</B> now.</p>");

    Wizard::RestoreHelp(help);
    Lan::AbortFunction = ``{return PollAbort();};
    boolean ret = Lan::Read();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
global define symbol WriteDialog() ``{
    ScreenName("lan-write");

    if(!Modified()) return `next;

    /* Network cards write dialog help 1/2 */
    string help = _("<p><b><big>Saving network card
configuration</big></b><br>Please wait...<br></p>") +

    /* Network cards write dialog help 2/2 */
_("<p><b><big>Aborting saving:</big></b><br>
Abort saving by pressing <b>Abort</b>.</p>");

    Wizard::RestoreHelp(help);
    Lan::AbortFunction = ``{return PollAbort() && ReallyAbort();};
    boolean ret = Lan::Write();
    return ret ? `next : `abort;
}

/**
 * Main dialog
 * @return dialog result
 */
global define symbol SummaryDialog() ``{

    ScreenName("lan-summary");

    /* Network cards summary dialog caption */
    string caption = _("Network cards configuration");

    /* Network cards summary dialog help 1/3 */
    string help = _("<p><b><big>Network card setup</big></b><br>
Configure your network card here.<br></p>") +

    /* Network cards summary dialog help 2/3 */
_("<p><b><big>Adding a network card:</big></b><br>
Choose a network card from the list of detected network cards.
If your network card was not autodetected, select <b>Other (not detected)</b>
then press <b>Configure</b>.</p>") +

    /* Network cards summary dialog help 3/3 */
_("<p><b><big>Editing or Deleting:</big></b><br>
If you press <b>Change</b>, an additional dialog in which
to change the configuration opens.</p>");

    list summary = Lan::Summary(true);
    list unconfigured = select(summary, 1, []);
    string configured = select(summary, 0, "");

    // change(unconfigured, `item(`id(`alias), _("Virtual alias")));

    y2debug("configured=%1", configured);
    y2debug("unconfigured=%1", unconfigured);

    /* Frame label */
    term contents = Wizard_hw::DetectedContent(_("Network cards to configure"),
	    unconfigured, false, configured);

    Wizard::SetContentsButtons(caption, contents, help,
	    Label::BackButton(), Label::FinishButton());

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel || ret == `back) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	/* overview dialog */
	else if(ret == `edit_button) {
	    ret = `overview;
	    break;
	}
	/* configure the selected card */
	else if(ret == `configure_button) {
	    Lan::Add();
	    any selected = UI::QueryWidget(`id(`detected_selbox), `CurrentItem);
	    if(selected == `other) {
		ret = `other;
	    }
	    else if(is(selected, integer)) {
		Lan::SelectHW(selected);
		ret = `configure;
	    }
	    else {
		y2error("Unexpected selection code: %1", selected);
		continue;
	    }
	    break;
	}
	else if(ret == `next) {
	    break;
	}
	else {
	    y2error("Unexpected retcode: %1", ret);
	    continue;
	}
    }

    return ret;
}

/**
 * Overview dialog
 * @return dialog result
 */
global define symbol OverviewDialog() ``{

    ScreenName("lan-overview");

    /* Network cards overview dialog caption */
    string caption = _("Network cards configuration overview");

    /* Network cards overview dialog help 1/3 */
    string help = _("<p><b><big>Network card overview</big></b><br>
Obtain an overview of installed network cards. Additionally,
edit their configuration.<br></p>") +

    /* Network cards overview dialog help 2/3 */
_("<p><b><big>Adding a network card:</big></b><br>
Press <b>Add</b> to configure a new network card manually.</p>") +

    /* Network cards overview dialog help 3/3 */
_("<p><b><big>Editing or deleting:</big></b><br>
Choose a network card to change or remove.
Then press <b>Edit</b> or <b>Delete</b> as desired.</p>");

    list overview = Lan::Overview();
    y2debug("overview=%1",overview);

    term contents = OverviewTable(
	/* Table header */
	`header(/*_("No."), */_("Device"), _("Type"), _("IP Address")),
	overview
    );

    Wizard::SetContentsButtons(caption, contents, help,
	    Label::BackButton(), Label::FinishButton());

    if(size(overview) < 1) {
	UI::ChangeWidget(`id(`edit), `Enabled, false);
	UI::ChangeWidget(`id(`delete), `Enabled, false);
    }
    else
	UI::SetFocus(`id(`table));

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	/* add */
	else if(ret == `add) {
	    Lan::Add();
	    break;
	}
	/* edit */
	else if(ret == `edit || ret == `table) {
	    string dev = UI::QueryWidget(`id(`table), `CurrentItem);
	    if(dev == nil) {
		y2error("Empty device during Edit");
		continue;
	    }
	    Lan::Edit(dev);
	    ret = `edit;
	    break;
	}
	/* delete */
	else if(ret == `delete) {
	    string dev = UI::QueryWidget(`id(`table), `CurrentItem);

	    /* Popup text */
	    string pop = sformat(_("All virtual aliases belonging to the interface %1
will be deleted as well.

Really continue?
"), dev);
	    if(Lan::HasAliases(dev) && Popup::YesNoHeadline(Label::WarningMsg(), pop) != true)
		continue;

	    Lan::Delete(dev);
	    Lan::Commit();
	    overview = Lan::Overview();
	    UI::ChangeWidget(`id(`table), `Items, overview);
	    if(size(overview) < 1) {
		UI::ChangeWidget(`id(`edit), `Enabled, false);
		UI::ChangeWidget(`id(`delete), `Enabled, false);
	    }
	    y2debug("overview=%1",overview);
	    continue;
	}
	else if(ret == `next || ret == `back) {
	    break;
	}
	else {
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }

    return ret;
}

/* EOF */
}
