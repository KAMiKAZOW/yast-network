/**
 * File:	include/network/lan/hardware.ycp
 * Package:	Network configuration
 * Summary:	Hardware dialogs
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

textdomain "network";

import "Arch";
import "Label";
import "Lan";
import "NetworkDevices";
import "NetworkModules";
import "Popup";
import "Wizard";

include "network/summary.ycp";

/**
 * Manual network card configuration dialog
 * @return dialog result
 */
    /* Manual dialog help 1/4 */
    string hw_help = _("<p>Here, set up your networking device.
The values are written to <i>/etc/sysconfig/hardware/hwcfg-*</i>.</p>
") +

    /* Manual dialog help 2/4 */
_("<p><b>Options</b> for the module should be written in the format
<i>option</i>=<i>value</i>. Each entry should be space separated,
for example, <i>io=0x300 irq=5</i>. <b>Note:</b> If  two cards are configured
with the same module name, options will be merged while saving.</p>");

    if(!(Lan::operation == `edit /* FIXME: unique || Lan::unique != "" */ || Arch::s390 () == true))
    {

    /* Manual dialog help 3/4 */
hw_help = hw_help + _("<p>Get a list of available network cards by pressing
<b>Select from List</b>.</p>") +

    /* Manual dialog help 4/4 */
_("<p>If you have a <b>PCMCIA</b> network card, select PCMCIA.
If you have a <b>USB</b> network card, select USB.</p>
");
    } 
 
    if(Arch::s390 ())
    {
	// overwrite help
	/* Manual dialog help 5/4 */
	hw_help = _("<p>Here, set up your networking device. The values will be
written to <i>/etc/modprobe.conf</i> or <i>/etc/chandev.conf</i>.</p>
") +

	/* Manual dialog help 6/4 */
_("<p>Options for the module should be written in the format specified
in the <b>IBM Device Drivers and Installation Commands</b> manual.</p>");
    }
map<string, any> hardware = nil;

void initHwDialog(string text) {
    hardware = $[];
//    ScreenName("lan-hardware");

    /* Manual dialog caption */
    string caption = _("Manual Network Card Configuration");


    hardware["modul"] = NetworkModules::Alias; // FIXME: MOD Lan::Module["module"]:"";
    hardware["options"] = NetworkModules::Options; // FIXME: MOD Lan::Module["options"]:"";
    hardware["hotplug"] = Lan::hotplug;
    y2milestone("hotplug=%1", Lan::hotplug);
    hardware["modules_from_hwinfo"] = Lan::getModulesFor(Lan::nm_name, hardware["modul"]:"" );

    hardware["type"] = Lan::type;
    if(hardware["type"]:"" == "") {
	y2error("Shouldn't happen -- type is empty. Assuming eth.");
	hardware["type"] = "eth";
    }
    hardware["realtype"] = NetworkDevices::RealType(hardware["type"]:"", hardware["hotplug"]:"");
    hardware["device"] = Lan::device;
    hardware["default_device"] = Lan::device;
    // #38213, remember device id when we switch back from pcmcia/usb
    hardware["non_hotplug_device_id"] = hardware["device"]:"";
    hardware["hwcfg"] = Lan::nm_name;
if (Lan::nm_name=="" && Lan::nm_name_old!=nil) hardware["hwcfg"]=Lan::nm_name_old;

    // FIXME duplicated in address.ycp
    hardware["device_types"] = [ "arc", "bnep", "dummy", "eth", "fddi", "myri", "tr", "usb", "wlan", "bond" ];

    if(Arch::s390 ())
	hardware["device_types"] = [ "eth", "tr", "hsi", "ctc", "escon", "ficon", "iucv", "qeth", "lcs" ];

    if(Arch::ia64 ())
	hardware["device_types"] = add(hardware["device_types"]:[], "xp");

    if(issubstring(hardware["device"]:"", "bus-pcmcia"))
	hardware["hotplug"] = "pcmcia";
    else if(issubstring(hardware["device"]:"", "bus-usb"))
	hardware["hotplug"] = "usb";
    y2milestone("hotplug=%1", Lan::hotplug);

    term CheckBoxes = `HBox(
	`HSpacing(1.5),
	/* CheckBox label */
	`CheckBox(`id(`pcmcia), `opt(`notify), _("&PCMCIA"), hardware["hotplug"]:"" == "pcmcia"),
	`HSpacing(1.5),
	/* CheckBox label */
	`CheckBox(`id(`usb), `opt(`notify), _("&USB"), hardware["hotplug"]:"" == "usb"),
	`HSpacing(1.5)
    );

    /* Placeholders (translations) */
    term XBox = `HBox(
	/* ComboBox label */
	`ComboBox(`id(`hotplug), `opt(`notify), _("&Hotplug Type"), []),
	/* CheckBox label */
	`CheckBox(`id(`pci), `opt(`notify), _("P&CI"), hardware["hotplug"]:"" == "pci"),
	`HSpacing(1.5)
    );

    /* Pushbutton label */
    term ListButton = `PushButton(`id(`list), _("Select from &List"));

    /* Disable PCMCIA and USB checkboxex on Edit and s390 */
    if(Lan::operation == `edit /* FIXME: unique || Lan::unique != "" */ || Arch::s390 () == true)
	CheckBoxes = `VSpacing(0);

	// #116211 - allow user to change modules from list
    /* Frame label */
    term KernelBox = `Frame(_("&Kernel Module"), `HBox(`HSpacing(0.5), `VBox(
	`VSpacing(0.4),
	/* Text entry label */
	`TextEntry(`id(`hwcfg), _("&Hardware Configuration Name"), hardware["hwcfg"]:""),
	`HBox(
	    /* Text entry label */
	    `ComboBox(`id(`modul), `opt(`editable), _("&Module Name"), hardware["modules_from_hwinfo"]:[]),
	    `HSpacing(0.2),
	    `TextEntry(`id(`options), Label::Options (), hardware["options"]:"")
	),
	`VSpacing(0.4),
	CheckBoxes,
	`VSpacing(0.4)
    ),`HSpacing(0.5)));
    hardware["devices"] = Lan::FreeDevices(hardware["realtype"]:""); // TODO: id-, bus-, ... here
    if(!contains(hardware["devices"]:[], hardware["device"]:"")) hardware["devices"] = prepend(hardware["devices"]:[], hardware["device"]:"");

    term DeviceNumberBox = `ReplacePoint(`id(`rnum),
	/* TextEntry label */
	`ComboBox (`id(`num), `opt(`editable, `hstretch), _("&Configuration Name"), [hardware["device"]:""]));

    /* Manual dialog contents */
    term TypeNameWidgets = 
//	    `Frame(_("Network &Configuration"),
	       `VBox(
		`VSpacing(0.2),
		`HBox(
		    `HSpacing(0.5),
		    `ComboBox(`id(`dev), `opt(`hstretch, `notify),
			/* ComboBox label */
			_("&Device Type"), BuildTypesList(hardware["device_types"]:[], hardware["type"]:"")),
		    `HSpacing(1.5),
		    DeviceNumberBox,
		    `HSpacing(0.5)
		)
//		`VSpacing(0.2)
//	    )
	      );

    /* Add hardware -> don't allow some changes (card type) */
    // FIXME: devname if(Lan::operation == `add && Lan::unique != "") {

    /* Edit -> don't allow some changes */
    // FIXME: devname if(true /* FIXME: devname Lan::operation == `edit */) {
    if(Lan::operation == `edit /* FIXME: unique || Lan::unique != "" */) {

	TypeNameWidgets =
		`Left(`HSquash(`Left(`VBox(
		    `HBox(
			/* Label text */
			`HWeight(1, `Right(`Label(_("Configuration Name")))),
			`HSpacing(0.5),
			`HWeight(1, `Left(`Label(`opt(`outputField), NetworkDevices::device_name(hardware["realtype"]:"", hardware["device"]:""))))
		    ),
		    `VSpacing(0.5),
		    `HBox(
			/* Label text */
			`HWeight(1, `Right(`Label(_("Hardware Name")))),
			`HSpacing(0.5),
			`HWeight(1, `Left(`Label(`opt(`outputField), hardware["hwcfg"]:"")))
		    )
		))));
    }

    /* Frame label */
    term ButtonBox = `HBox(
	`HStretch(),
	`HSpacing(0.5),
	ListButton,
	`HSpacing(0.5),
	`HStretch()
    );

    term contents = `CheckBoxFrame(`id(`enable_hwconfig), caption, hardware["hwcfg"]:"" != "",
	`HBox(
	`HSpacing(2),
	`VBox(
	    `VSpacing(0.5),
	    TypeNameWidgets,
	    `VSpacing(1.5),
	    KernelBox,
	    `VSpacing(1.5),
	    ButtonBox,
	    `VSpacing(0.5)
	    ),
	`HSpacing(2),
	`VStretch()
	));

    UI::ReplaceWidget(`hw_content, contents);
if (Lan::nm_name=="" && Lan::nm_name_old!=nil) UI::ChangeWidget(`enable_hwconfig, `Value, false);
    hardware["no_hotplug"] = hardware["hotplug"]:"" == "";
    hardware["no_hotplug_dummy"] = hardware["no_hotplug"]:false && hardware["type"]:"" != "dummy";
    UI::ChangeWidget(`id(`modul), `Enabled, hardware["no_hotplug_dummy"]:false);
    UI::ChangeWidget(`id(`options), `Enabled, hardware["no_hotplug_dummy"]:false);
    ChangeWidgetIfExists(`id(`list), `Enabled, hardware["no_hotplug_dummy"]:false);
    ChangeWidgetIfExists(`id(`hwcfg), `Enabled, hardware["no_hotplug"]:false);
    ChangeWidgetIfExists(`id(`usb), `Enabled, (hardware["hotplug"]:"" == "usb" || hardware["hotplug"]:"" == "") && hardware["type"]:"" != "dummy");
    ChangeWidgetIfExists(`id(`pcmcia), `Enabled, (hardware["hotplug"]:"" == "pcmcia" || hardware["hotplug"]:"" == "") && hardware["type"]:"" != "dummy");

    ChangeWidgetIfExists(`id(`num), `ValidChars, NetworkDevices::ValidCharsIfcfg ());
    ChangeWidgetIfExists(`id(`hwcfg), `ValidChars, NetworkModules::ValidCharsHwcfg ());
}



/**
 * Call back for a manual selection from the list
 * @return dialog result
 */
define any SelectionDialog() {

    ScreenName("lan-hardware-selection");

    string type = Lan::type;
    integer selected = 0;

    /* map NetworkCards */
    include "network/lan/cards.ycp";

    list<map> hwlist = NetworkCards[type]:[];
    list cards = hwlist2items(hwlist, 0);

    /* Manual selection caption */
    string caption = _("Manual Network Card Selection");

    /* Manual selection help */
    string helptext = _("<p>Select the network card to configure. Search
for a particular network card by entering the name in the search entry.</p>");

    /* Manual selection contents */
    term contents = `VBox(
	`VSpacing(0.5),
	/* Selection box label */
	`ReplacePoint(`id(`rp), `SelectionBox(`id(`cards), _("&Network Card"), cards)),
	`VSpacing(0.5),
	/* Text entry field */
	`TextEntry(`id(`search), `opt(`notify), _("&Search")),
	`VSpacing(0.5)
    );

    Wizard::SetContentsButtons(caption, contents, helptext,
	    Label::BackButton(), Label::OKButton());

    UI::SetFocus(`id(`cards));

    any ret = nil;
    while(true) {
	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `search) {

	    string entry = (string) UI::QueryWidget(`id(`search), `Value);

	    list l = filter(term e, (list<term>) cards, {
		return tolower(substring(e[1]:"", 0, size(entry))) == tolower(entry);
	    });

	    if(size(entry) == 0) selected = 0;
	    if(size(l) > 0) selected = l[0, 0, 0]:0;

	    cards = [];
	    cards = hwlist2items(hwlist, selected);

	    /* Selection box title */
	    UI::ReplaceWidget(`id(`rp), `SelectionBox(`id(`cards), _("&Network Card"), cards));
	}
	else if(ret == `back) {
	    break;
	}
	else if(ret == `next) {
	    /* FIXME: check_* */
	    break;
	}
	else {
	    y2error("Unexpected return code: %1", ret);
	    continue;
	}
    }

    if(ret == `next) {
	selected = (integer) UI::QueryWidget(`id(`cards), `CurrentItem);
	if(selected == nil) selected = 0;
	map card = hwlist[selected]:$[];
	Lan::description = card["name"]:"";

	NetworkModules::Alias /* FIXME: MOD Lan::Module["module"] */ = card["module"]:"";
	NetworkModules::Options /* FIXME: MOD Lan::Module["options"] */ = card["options"]:"";
    }

    return ret;
}




symbol handleHW (string key, map event) {
 symbol ret=nil;
 if (event["EventReason"]:"" == "ValueChanged" || event["EventReason"]:"" == "Activated") ret = (symbol)event["WidgetID"]:nil;
if (ret == `list) SelectionDialog();
 if(ret == `pcmcia || ret == `usb || ret == `dev) {


	    if(UI::WidgetExists(`id(`pcmcia)) || UI::WidgetExists(`id(`usb))) {
		if(UI::QueryWidget(`id(`pcmcia), `Value) == true)
		    hardware["hotplug"] = "pcmcia";
		else if(UI::QueryWidget(`id(`usb), `Value) == true)
		    hardware["hotplug"] = "usb";
		else
		    hardware["hotplug"] = "";
	    }
	    y2debug("hotplug=%1", hardware["hotplug"]:"");

	    if(UI::WidgetExists(`id(`dev))) {
               hardware["type"] = (string) UI::QueryWidget(`id(`dev), `Value);
               hardware["realtype"] = NetworkDevices::RealType(hardware["type"]:"", hardware["hotplug"]:"");
	    }
	    y2debug("type=%1", hardware["type"]:"");
	    y2debug("realtype=%1", hardware["realtype"]:"");

	    if(hardware["type"]:"" == "usb") {
		UI::ChangeWidget(`id(`usb), `Value, true);
		hardware["hotplug"] = "usb";
	    }

           hardware["no_hotplug"] = hardware["hotplug"]:"" == "";
           hardware["no_hotplug_dummy"] = hardware["no_hotplug"]:false && hardware["type"]:"" != "dummy";
           UI::ChangeWidget(`id(`modul), `Enabled, hardware["no_hotplug_dummy"]:false);
           UI::ChangeWidget(`id(`options), `Enabled, hardware["no_hotplug_dummy"]:false);
           ChangeWidgetIfExists(`id(`list), `Enabled, hardware["no_hotplug_dummy"]:false);
           ChangeWidgetIfExists(`id(`hwcfg), `Enabled, hardware["no_hotplug"]:false);
           ChangeWidgetIfExists(`id(`usb), `Enabled, (hardware["hotplug"]:"" == "usb" || hardware["hotplug"]:"" == "") && hardware["type"]:"" != "dummy");
           ChangeWidgetIfExists(`id(`pcmcia), `Enabled, (hardware["hotplug"]:"" == "pcmcia" || hardware["hotplug"]:"" == "") && hardware["type"]:"" != "dummy");
	    hardware["device"] = (string) UI::QueryWidget (`id (`num), `Value);
	    if (hardware["device"]:"" != "bus-usb" && hardware["device"]:"" != "bus-pcmcia")
	    {
		hardware["non_hotplug_device_id"] = hardware["device"]:"";
	    }

	    if(hardware["hotplug"]:"" == "usb") hardware["device"] = "bus-usb";
	    	else if(hardware["hotplug"]:"" == "pcmcia") hardware["device"] = "bus-pcmcia";
	    		else hardware["device"] = hardware["non_hotplug_device_id"]:"";

	    UI::ChangeWidget(`id(`num), `Value, hardware["device"]:"");

	    if(Arch::s390 ()) {
		string drvtype = Lan::DriverType (hardware["type"]:"");

		if (contains (["lcs", "qeth", "ctc"], drvtype))
		    hardware["modul"] = drvtype;
		else if (drvtype == "iucv")
		    hardware["modul"] = "netiucv";
		UI::ChangeWidget(`id(`modul), `Value, hardware["modul"]:"");
	    }
	    if(hardware["type"]:"" == "xp") {
		hardware["modul"] = "xpnet";
		UI::ChangeWidget(`id(`modul), `Value, hardware["modul"]:"");
	    }
	    else if (hardware["type"]:"" == "dummy") // #44582
	    {
		hardware["hwcfg"] = (string) UI::QueryWidget (`id (`hwcfg), `Value);

		hardware["modul"] = "dummy";
		hardware["options"] = sformat ("-o dummy-%1", hardware["hwcfg"]:"");
		UI::ChangeWidget(`id(`modul), `Value, hardware["modul"]:"");
		UI::ChangeWidget(`id(`options), `Value, hardware["options"]:"");
	    }
            else if (hardware["type"]:"" == "bond")
            {
                UI::ChangeWidget(`id(`hwcfg), `Enabled, false);
                UI::ChangeWidget(`id(`modul), `Enabled, false);
                UI::ChangeWidget(`id(`options), `Enabled, false);
                UI::ChangeWidget(`id(`pcmcia), `Enabled, false);
                UI::ChangeWidget(`id(`usb), `Enabled, false);
		UI::ChangeWidget(`id(`list), `Enabled, false);

                UI::ChangeWidget(`id(`hwcfg), `Value, "");
                UI::ChangeWidget(`id(`modul), `Value, "");
                UI::ChangeWidget(`id(`options), `Value, "");
            }
	}
 return nil;
}

void storeHW (string key, map event) {
       if(!(boolean)UI::QueryWidget(`enable_hwconfig, `Value))
        {

NetworkModules::DeleteM(Lan::nm_name);
if(Lan::nm_name_old==nil) Lan::nm_name_old = Lan::nm_name;
Lan::nm_name="";
map<string, any> tmp_current=$[];
foreach(string key, any value, NetworkDevices::Current, {
if (key != "_nm_name") tmp_current[key]=value;
});
NetworkDevices::Current=tmp_current;
        } else {

	if(UI::WidgetExists(`id(`hwcfg))) {
	    Lan::nm_name_old = Lan::nm_name;
	    Lan::nm_name = (string) UI::QueryWidget(`id(`hwcfg), `Value);
	}

	    if(UI::WidgetExists(`id(`hwcfg))) {
		hardware["hwcfg"] = (string) UI::QueryWidget (`id (`hwcfg), `Value);
		if (Lan::operation == `add || hardware["hwcfg"]:"" != Lan::nm_name) {
		    if (contains (NetworkModules::ListM(""), hardware["hwcfg"]:"")) {
			UI::SetFocus (`id (`hwcfg));
			/* Popup text */
			Popup::Error(sformat(_("Hardware configuration %1 already exists.
Choose a different one."), hardware["hwcfg"]:""));
		    }
		}
	    }

	    if(Lan::operation == `add && UI::WidgetExists(`id(`num))) {
		string nm = (string) UI::QueryWidget(`id(`num), `Value);
		if(Lan::operation == `add || (hardware["device"]:"" != Lan::device && hardware["type"]:"" != Lan::type)) {
		    if(contains(NetworkDevices::List(""), NetworkDevices::device_name(hardware["type"]:"", nm))) {
			/* Popup text */
			Popup::Error(sformat(_("Configuration name %1 (%2) already exists.
Choose a different one."), nm, NetworkDevices::device_name(hardware["type"]:"", nm)));
			UI::SetFocus(`id(`num));
		    }
		}
	    }

	    if(UI::WidgetExists(`id(`num))) {
		string devic = (string) UI::QueryWidget(`id(`num), `Value);
	    }
	}

       NetworkModules::Alias  = (string) UI::QueryWidget(`id(`modul), `Value);
       NetworkModules::Options = (string) UI::QueryWidget(`id(`options), `Value);

	if(UI::WidgetExists(`id(`num)))
	    Lan::device = (string) UI::QueryWidget(`id(`num), `Value);

	if(UI::WidgetExists(`id(`pcmcia)) || UI::WidgetExists(`id(`usb))) {
	    if(UI::QueryWidget(`id(`pcmcia), `Value) == true)
		Lan::hotplug = "pcmcia";
	    else if(UI::QueryWidget(`id(`usb), `Value) == true)
		Lan::hotplug = "usb";
	    else
		Lan::hotplug = "";
	}
	Lan::hotplug = "";

	if(UI::WidgetExists(`id(`dev))) {
	    hardware["type"] = (string) UI::QueryWidget(`id(`dev), `Value);
	    Lan::type = hardware["type"]:"";
	}
}


/**
 * S/390 devices configuration dialog
 * @return dialog result
 */
define any S390Dialog() {

    ScreenName("lan-hardware-s390");

    /* S/390 dialog caption */
    string caption = _("S/390 Network Card Configuration");

    string drvtype = Lan::DriverType (Lan::type);

    string helptext = "";
    term contents = `Empty ();

    if(Lan::type == "qeth") {
	contents = `HBox(
	    `HSpacing(6),
	    /* Frame label */
	    `Frame(_("S/390 Device Settings"), `HBox(`HSpacing(2), `VBox(
		`VSpacing(1),
		/* TextEntry label */
		`TextEntry(`id(`chan_mode), _("&Port Name"), Lan::chan_mode),
		`VSpacing(1),
		/* TextEntry label */
		`TextEntry(`id(`qeth_options), Label::Options (), Lan::qeth_options),
		`VSpacing(1),
		/* CheckBox label */
		`Left(`CheckBox(`id(`ipa_takeover), _("&Enable IPA Takeover"))),
		`VSpacing(1),
		/* CheckBox label */
		`Left(`CheckBox(`id(`qeth_layer2), `opt(`notify), _("Enable &Layer 2 Support"))),
		/* TextEntry label */
		`TextEntry(`id(`qeth_macaddress), _("Layer2 &MAC Address"), Lan::qeth_macaddress),
		`VSpacing(1)
		), `HSpacing(2))),
	    `HSpacing(6)
	);
	/* S/390 dialog help: QETH Port name */
	helptext = _("<p>Enter the <b>Port Name</b> for this interface (case-sensitive).</p>") +
	/* S/390 dialog help: QETH Options */
	_("<p>Enter any additional <b>Options</b> for this interface (separated by spaces).</p>") +
	_("<p>Select <b>Enable IPA Takeover</b> if IP address takeover should be enabled for this interface.</p>") +
	_("<p>Select <b>Enable Layer 2 Support</b> if this card has been configured with layer 2 support.</p>") +
	_("<p>Enter the <b>Layer 2 MAC Address</b> if this card has been configured with layer 2 support.</p>");
    }

    if(Lan::type == "hsi") {
	contents = `HBox(
	    `HSpacing(6),
	    /* Frame label */
	    `Frame(_("S/390 Device Settings"), `HBox(`HSpacing(2), `VBox(
		`VSpacing(1),
		/* TextEntry label */
		`TextEntry(`id(`qeth_options), Label::Options (), Lan::qeth_options),
		`VSpacing(1),
		/* CheckBox label */
		`Left(`CheckBox(`id(`ipa_takeover), _("&Enable IPA Takeover"))),
		`VSpacing(1),
		/* CheckBox label */
		`Left(`CheckBox(`id(`qeth_layer2), `opt(`notify), _("Enable &Layer 2 Support"))),
		/* TextEntry label */
		`TextEntry(`id(`qeth_macaddress), _("Layer2 &MAC Address"), Lan::qeth_macaddress),
		`VSpacing(1)
		), `HSpacing(2))),
	    `HSpacing(6)
	);
	/* S/390 dialog help: QETH */
	helptext = _("<p>Enter any additional <b>Options</b> for this interface (separated by spaces).</p>") +
	_("<p>Select <b>Enable IPA Takeover</b> if IP address takeover should be enabled for this interface.</p>") +
	_("<p>Select <b>Enable Layer 2 Support</b> if this card has been configured with layer 2 support.</p>") +
	_("<p>Enter the <b>Layer 2 MAC Address</b> if this card has been configured with layer 2 support.</p>");
    }

    if(drvtype == "lcs") {
	contents = `HBox(
	    `HSpacing(6),
	    /* Frame label */
	    `Frame(_("S/390 Device Settings"), `HBox(`HSpacing(2), `VBox(
		`VSpacing(1),
		/* TextEntry label */
		`TextEntry(`id(`chan_mode), _("&Port Number"), Lan::chan_mode),
		`VSpacing(1),
		/* TextEntry label */
		`TextEntry(`id(`lcs_timeout), _("&LANCMD Time-Out"), Lan::lcs_timeout)
		), `HSpacing(2))),
	    `HSpacing(6)
	);
	/* S/390 dialog help: LCS */
	helptext = _("<p>Choose the <b>Port Number</b> for this interface.</p>") +
	           _("<p>Specify the <b>LANCMD Time-Out</b> for this interface.</p>");
    }

    list ctcitems = [
	/* ComboBox item: CTC device protocol */
	`item(`id("0"), _("Compatibility Mode")),
	/* ComboBox item: CTC device protocol */
	`item(`id("1"), _("Extended Mode")),
	/* ComboBox item: CTC device protocol */
	`item(`id("2"), _("CTC-Based tty (Linux to Linux Connections)")),
	/* ComboBox item: CTC device protocol */
	`item(`id("3"), _("Compatibility Mode with OS/390 and z/OS")),
    ];

    if(drvtype == "ctc") {
	contents = `HBox(
	    `HSpacing(6),
	    /* Frame label */
	    `Frame(_("S/390 Device Settings"), `HBox(`HSpacing(2), `VBox(
		`VSpacing(1),
		/* TextEntry label */
		`ComboBox(`id(`chan_mode), _("&Protocol"), ctcitems),
		`VSpacing(1)
		), `HSpacing(2))),
	    `HSpacing(6)
	);
	/* S/390 dialog help: CTC */
	helptext = _("<p>Choose the <b>Protocol</b> for this interface.</p>");
    }

    if(drvtype == "iucv") {
	contents = `HBox(
	    `HSpacing(6),
	    /* Frame label */
	    `Frame(_("S/390 Device Settings"), `HBox(`HSpacing(2), `VBox(
		`VSpacing(1),
		/* TextEntry label, #42789 */
		`TextEntry(`id(`chan_mode), _("&Peer Name"), ""),
		`VSpacing(1)
		), `HSpacing(2))),
	    `HSpacing(6)
	);
	/* S/390 dialog help: IUCV, #42789 */
	helptext = _("<p>Enter the name of the IUCV peer,
for example, the z/VM user name with which to connect (case-sensitive).</p>
");
    }

    Wizard::SetContentsButtons(caption, contents, helptext,
	    Label::BackButton(), Label::NextButton());

    if (drvtype == "ctc") 
        UI::ChangeWidget(`id(`chan_mode), `Value, Lan::chan_mode);

    if (drvtype == "lcs")
    {
	UI::ChangeWidget(`id(`chan_mode), `Value, Lan::chan_mode);
	UI::ChangeWidget(`id(`lcs_timeout), `Value, Lan::lcs_timeout);
    }

    if (drvtype == "qeth")
    {
        UI::ChangeWidget(`id(`ipa_takeover), `Value, Lan::ipa_takeover);
	UI::ChangeWidget(`id(`qeth_layer2), `Value, Lan::qeth_layer2);
	UI::ChangeWidget(`id(`qeth_macaddress), `ValidChars, ":0123456789abcdefABCDEF");
    }

    if (Lan::type != "hsi")
        UI::SetFocus(`id(`chan_mode));
    else
        UI::SetFocus(`id(`qeth_options));

    // FIXME: no spaces
    // UI::ChangeWidget(`id(`key), `ValidChars, "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_:;");

    any ret = nil;
    while(true) {
	if (drvtype == "qeth") {
	    boolean mac_enabled = (boolean) UI::QueryWidget(`id(`qeth_layer2),`Value);
	    UI::ChangeWidget(`id(`qeth_macaddress), `Enabled, mac_enabled);
	}

	ret = UI::UserInput();

	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `back) {
	    break;
	}
	else if(ret == `next) {
	    break;
	}
	else if(ret == `qeth_layer2) {
	    continue;
	}
	else {
	    y2error("Unexpected return code: %1", ret);
	    continue;
	}
    }

    if(ret == `next) {
	if(Lan::type == "iucv") {
	    // #176330, must be static
	    Lan::nm_name = "static-iucv-id-" + (string) UI::QueryWidget(`id(`chan_mode), `Value);
	    Lan::device = "id-" + (string) UI::QueryWidget(`id(`chan_mode), `Value);
	}
	else if (Lan::type != "hsi")
	       Lan::chan_mode = (string) UI::QueryWidget(`id(`chan_mode), `Value);
	if(Lan::type == "lcs")
	    Lan::lcs_timeout = (string) UI::QueryWidget(`id(`lcs_timeout), `Value);
	if(Lan::type == "qeth" || Lan::type == "hsi") {
	    Lan::qeth_options = (string) UI::QueryWidget(`id(`qeth_options), `Value);
	    Lan::ipa_takeover = (boolean) UI::QueryWidget(`id(`ipa_takeover), `Value);
	    Lan::qeth_layer2 = (boolean) UI::QueryWidget(`id(`qeth_layer2), `Value);
	    Lan::qeth_macaddress = (string) UI::QueryWidget(`id(`qeth_macaddress), `Value);
	}

    }

    return ret;
}


map<string, map<string,any> > widget_descr_hardware = $[
    "HWDIALOG" : $[
	"widget" : `custom,
	"custom_widget" :
		`ReplacePoint(`id(`hw_content), `Empty()),
	"init" : initHwDialog,
	"handle" : handleHW,
	"store" : storeHW,
	"help" : hw_help
		]];

any HardwareDialog (){
    string caption = _("Hardware Dialog");
    list<map <string, any> > w = CWM::CreateWidgets (["HWDIALOG"], (map <string, map <string, any> >) widget_descr_hardware);
        term contents =
                          `VBox(
                          `VStretch(),
                          `HBox(
                           `HStretch(),
                           `HSpacing (1),
                            `VBox(
                                w[0, "widget"]:`VSpacing (1)
                                ),
                           `HSpacing (1),
                           `HStretch()
                               ),
                          `VStretch()
                        );

    string help = CWM::MergeHelps(w);
    contents = CWM::PrepareDialog(contents, w);
    Wizard::SetContentsButtons(caption, contents, "",Label::BackButton(), Label::NextButton());
    return CWM::Run(w, $[`abort:ReallyAbort ]);
}


/* EOF */
}
