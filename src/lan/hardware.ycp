/**
 * File:	include/network/lan/hardware.ycp
 * Package:	Network configuration
 * Summary:	Hardware dialogs
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

textdomain "network";

import "Arch";
import "Label";
import "Lan";
import "NetworkModules";
import "Popup";
import "Wizard";
// Arch::s390=true;

include "network/summary.ycp";
include "network/routines.ycp";

/**
 * Manual network card configuration dialog
 * @return dialog result
 */
define any HardwareDialog() {

    ScreenName("lan-hardware");

    /* Manual dialog caption */
    string caption = _("Manual network card configuration");

    /* Manual dialog help 1/4 */
    string help = _("<p>Here, set up your networking device.
The values will be written into <i>/etc/modprobe.conf</i>.</p>") +

    /* Manual dialog help 2/4 */
_("<p><b>Options</b> for the module should be written in the format
<i>option</i>=<i>value</i>. Each entry should be space separated,
for example, <i>io=0x300 irq=5</i>. <b>Note:</b> If  two cards are configured
with the same module name, options will be merged while saving.</p>");

    if(!(Lan::operation == `edit /* FIXME: unique || Lan::unique != "" */ || Arch::s390 == true))

    /* Manual dialog help 3/4 */
help = help + _("<p>Get a list of available network cards by pressing
<b>Select from List</b>.</p>") +

    /* Manual dialog help 4/4 */
_("<p>If you have a <b>PCMCIA</b> network card, click on the PCMCIA check
box, if you have an <b>USB</b> network card, click on the check box USB.</p>");

    if(Arch::s390)
	/* Manual dialog help 5/4 */
	help = _("<p>Here, set up your networking device. The values will be
written into <i>/etc/modprobe.conf</i> or <i>/etc/chandev.conf</i>.</p>") +

	/* Manual dialog help 6/4 */
_("<p>Options for the module should be written in the format specified
in the <b>IBM Device Drivers and Installation Commands</b> manual.</p>");

    string modul = NetworkModules::Alias; // FIXME: MOD Lan::Module["module"]:"";
    string options = NetworkModules::Options; // FIXME: MOD Lan::Module["options"]:"";

    string hotplug = Lan::hotplug;
    string mtu = Lan::mtu;

    string type = Lan::type;
    if(type == "") {
	y2error("Shouldn't happen -- type is empty. Assuming eth.");
	type = "eth";
    }
    string realtype = RealType(type, hotplug);
    string device = Lan::device;
    string default_device = Lan::nm_name;

    list<string> device_types = [ "arc", /* FIXME */ "dummy", "eth", "fddi", "myri", "tr", /* FIXME */ "usb", "wlan" ];

    if(Arch::s390)
	device_types = [ "eth", "tr", "hsi", "ctc", "escon", "iucv" ];

    /*
    if(Arch::s390) {
	device_types = [
	    `item(`id("eth"), "OSA Ethernet", type == "eth"),
	    `item(`id("qeth"), "OSA Express Ethernet", type == "qeth"),
	    `item(`id("tr"), "OSA Token-Ring", type == "tr"),
	    `item(`id("hsi"), "Hipersockets", type == "hsi"),
	    `item(`id("ctc"), "Channel To Channel", type == "ctc"),
	    `item(`id("escon"), "Escon", type == "escon"),
	    `item(`id("iucv"), "IUCV", type == "iucv"),
	];
	if(modul == "")
	    modul = "lcs";
    }
    */

    term CheckBoxes = `HBox(
	`HSpacing(1.5),
	/* CheckBox label */
	`CheckBox(`id(`pcmcia), `opt(`notify), _("&PCMCIA"), hotplug == "pcmcia"),
	`HSpacing(1.5),
	/* CheckBox label */
	`CheckBox(`id(`usb), `opt(`notify), _("&USB"), hotplug == "usb"),
	`HSpacing(1.5)
    );

    /* Placeholders (translations) */
    term XBox = `HBox(
	/* ComboBox label */
	`ComboBox(`id(`hotplug), `opt(`notify), _("&Hot Plug Type"), []),
	/* CheckBox label */
	`CheckBox(`id(`pci), `opt(`notify), _("P&CI"), hotplug == "pci"),
	`HSpacing(1.5)
    );

    /* Pushbutton label */
    term WirelessButton = `PushButton(`id(`wire), _("Wireless &Settings"));

    /* Frame label */
    term ButtonBox = `HBox(
	`HStretch(),
	`HSpacing(0.5),
	WirelessButton,
	`HSpacing(0.5),
	/* Pushbutton label */
	`PushButton(`id(`list), _("Select from &List")),
	`HSpacing(0.5),
	`HStretch()
    );

    /* Disable PCMCIA and USB checkboxex on Edit and s390 */
    if(Lan::operation == `edit /* FIXME: unique || Lan::unique != "" */ || Arch::s390 == true)
	CheckBoxes = `VSpacing(0);

    /* Frame label */
    term KernelBox = `Frame(_("&Kernel Module"), `HBox(`HSpacing(0.5), `VBox(
	`VSpacing(0.4),
	/* Text entry label */
	`TextEntry(`id(`modul), _("&Module Name"), modul),
	`VSpacing(0.2),
	/* Text entry label */
	`TextEntry(`id(`options), _("Op&tions"), options),
	`VSpacing(0.4),
	CheckBoxes,
	`VSpacing(0.4)
    ),`HSpacing(0.5)));

    list devices = Lan::FreeDevices(realtype);
    if(!contains(devices, device)) devices = prepend(devices, device);

    term DeviceNumberBox = `ReplacePoint(`id(`rnum),
	/* TextEntry label */
	`TextEntry(`id(`num), `opt(`hstretch), _("&Configuration Name"), Lan::nm_name));

    /* TextEntry label */
    term MTUBox = `TextEntry(`id(`mtu), _("M&aximum Transfer Unit (MTU)"), mtu);
    MTUBox = `VSpacing(0);
    // FIXME: help missing

    /* Manual dialog contents */
    term contents = `HBox(
	`HSpacing(2),
	`VBox(
	    `VSpacing(0.5),
	    /* Frame label */
	    `Frame(_("Network &Configuration"),`VBox(
		`VSpacing(0.2),
		`HBox(
		    `HSpacing(0.5),
		    `ComboBox(`id(`dev), `opt(`hstretch, `notify),
			/* ComboBox label */
			_("&Device Type"), BuildTypesList(device_types, type)),
		    `HSpacing(1.5),
		    DeviceNumberBox,
		    `HSpacing(0.5)
		),
		`VSpacing(0.2)
	    )),
	    `VSpacing(0.5),
	    KernelBox,
	    `VSpacing(0.4),
	    MTUBox,
	    `VSpacing(1.5),
	    ButtonBox,
	    `VSpacing(0.5)
	    ),
	`HSpacing(2));

    /* Add hardware -> don't allow some changes (card type) */
    // FIXME: devname if(Lan::operation == `add && Lan::unique != "") {
    if(false) {

	string typ = DeviceType(type);
	if(hotplug == "pcmcia") typ = typ + " (PCMCIA)";
	if(hotplug == "usb") typ = typ + " (USB)";

	contents = `HBox(
	    `HSpacing(2),
	    `VBox(
		`VSpacing(0.5),
		/* Frame label */
		`Frame(_("Configuration Name"),`VBox(
		    `VSpacing(0.2),
		    `HBox(
			`HSpacing(0.9),
			`VBox(
			    /* Label text */
			    `Left(`Label(_("Device Type:"))),
			    `VSpacing(0.2),
			    `Left(`Label(`opt(`outputField), typ))
			),
			`HSpacing(0.5),
			DeviceNumberBox,
			`HSpacing(0.5)
		    ),
		    `VSpacing(0.2)
		)),
		`VSpacing(1.5),
		KernelBox,
		`VSpacing(0.4),
		MTUBox,
		`VSpacing(1.5),
		ButtonBox,
		/* Pushbutton label */
		// #25234 `PushButton(`id(`wire), _("Wireless &settings")),
		// FIXME: show only in the case of wireless device
		`VSpacing(0.5)
		),
	    `HSpacing(2));

    }

    /* Edit -> don't allow some changes */
    // FIXME: devname if(true /* FIXME: devname Lan::operation == `edit */) {
    if(Lan::operation == `edit /* FIXME: unique || Lan::unique != "" */) {

	if(type != "wlan") WirelessButton = `VSpacing(0);

	contents = `HBox(
	    `HSpacing(2),
	    `VBox(
		`VSpacing(0.5),
		`Left(`HSquash(`Left(`VBox(
		    `HBox(
			/* Label text */
			`HWeight(1, `Right(`Label(_("Configuration Name")))),
			`HSpacing(0.5),
			`HWeight(1, `Left(`Label(`opt(`outputField), device_name(realtype, Lan::device))))
		    ),
		    `VSpacing(0.5),
		    `HBox(
			/* Label text */
			`HWeight(1, `Right(`Label(_("Hardware Name")))),
			`HSpacing(0.5),
			`HWeight(1, `Left(`Label(`opt(`outputField), Lan::nm_name)))
		    )
		)))),
		`VSpacing(1.5),
		KernelBox,
		`VSpacing(0.4),
		MTUBox,
		`VSpacing(1.5),
		WirelessButton,
		`VSpacing(0.5)
	    ),
	    `HSpacing(2)
	);

    }

    if(Lan::operation == `edit /* FIXME: unique || Lan::unique != "" */)
	Wizard::SetContentsButtons(caption, contents, help,
		Label::BackButton(), Label::OKButton());
    else
	Wizard::SetContentsButtons(caption, contents, help,
		Label::BackButton(), Label::NextButton());

    UI::ChangeWidget(`id(`modul), `Enabled, hotplug == "" && type != "dummy");
    UI::ChangeWidget(`id(`options), `Enabled, hotplug == "" && type != "dummy");
    ChangeWidgetIfExists(`id(`list), `Enabled, hotplug == "" && type != "dummy");
    ChangeWidgetIfExists(`id(`usb), `Enabled, (hotplug == "usb" || hotplug == "") && type != "dummy");
    ChangeWidgetIfExists(`id(`pcmcia), `Enabled, (hotplug == "pcmcia" || hotplug == "") && type != "dummy");
    ChangeWidgetIfExists(`id(`wire), `Enabled, type == "wlan");
    // ChangeWidgetIfExists(`id(`num), `Value, device);

    any ret = nil;
    while(true) {
	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	/* change device type or pcmcia/usb card? */
	else if(ret == `pcmcia || ret == `usb || ret == `dev) {

	    if(UI::WidgetExists(`id(`pcmcia)) || UI::WidgetExists(`id(`usb))) {
		if(UI::QueryWidget(`id(`pcmcia), `Value) == true)
		    hotplug = "pcmcia";
		else if(UI::QueryWidget(`id(`usb), `Value) == true)
		    hotplug = "usb";
		else
		    hotplug = "";
	    }
	    y2debug("hotplug=%1", hotplug);

	    if(UI::WidgetExists(`id(`dev))) {
		type = (string) UI::QueryWidget(`id(`dev), `Value);
		realtype = RealType(type, hotplug);
	    }
	    y2debug("type=%1", type);
	    y2debug("realtype=%1", realtype);

	    if(type == "usb") {
		UI::ChangeWidget(`id(`usb), `Value, true);
		hotplug = "usb";
	    }

	    UI::ChangeWidget(`id(`modul), `Enabled, hotplug == "" && type != "dummy");
	    UI::ChangeWidget(`id(`options), `Enabled, hotplug == "" && type != "dummy");
	    ChangeWidgetIfExists(`id(`list), `Enabled, hotplug == "" && type != "dummy");
	    ChangeWidgetIfExists(`id(`usb), `Enabled, (hotplug == "usb" || hotplug == "") && type != "dummy");
	    ChangeWidgetIfExists(`id(`pcmcia), `Enabled, (hotplug == "pcmcia" || hotplug == "") && type != "dummy");
	    ChangeWidgetIfExists(`id(`wire), `Enabled, type == "wlan");

	    // list devices = Lan::FreeDevices(realtype);
	    // default_device = (string) devices[0]:"";
	    /* TextEntry label */
	    // UI::ReplaceWidget(`id(`rnum), `TextEntry(`id(`num), `opt(`hstretch), _("&Configuration Name"), Lan::nm_name));

	    if(Arch::s390) {
		if(type == "tr" || type == "eth") modul = "lcs";
		if(type == "hsi" || type == "qeth") modul = "qeth";
		if(type == "ctc" || type == "escon") modul = "ctc";
		if(type == "iucv") modul = "netiucv";
		UI::ChangeWidget(`id(`modul), `Value, modul);
	    }

	    continue;
	}
	else if(ret == `back) {
	    break;
	}
	/* select from the list *//*
	else if(ret == `list) {
	    Lan::type = type;
	    Lan::device = tointeger(UI::QueryWidget(`id(`num), `Value));
	    break;
	} */
	else if(ret == `next || ret == `list || ret == `wire) {
	    /* FIXME: check_* */
	    if(UI::WidgetExists(`id(`num))) {
		string devic = (string) UI::QueryWidget(`id(`num), `Value);
		if(devic != default_device) {
		    y2warning("Default device: %1 -> %2", default_device, devic);
		    /* Popup text */
		    string pop = _("You changed the default device number.

This possibility is only intended for systems with built-in network cards
or cards with multiple interfaces. If you do not have such network card,
this would probably result in a nonfunctional network configuration.

Really continue?
");
		    if(Popup::YesNoHeadline(Label::WarningMsg(), pop) == true) {
			y2warning("Default device changed!");
			break;
		    }
		    else continue;
		}
	    }
	    break;
	}
	else {
	    y2error("Unexpected return code: %1", ret);
	    continue;
	}
    }

    if(ret == `next || ret == `list || ret == `wire) {
	NetworkModules::Alias /* FIXME: MOD Lan::Module["module"] */ = (string) UI::QueryWidget(`id(`modul), `Value);
	NetworkModules::Options /* FIXME: MOD Lan::Module["options"] */ = (string) UI::QueryWidget(`id(`options), `Value);

	if(UI::WidgetExists(`id(`mtu)))
	    Lan::mtu = (string) UI::QueryWidget(`id(`mtu), `Value);

	if(UI::WidgetExists(`id(`num)))
	    Lan::device = (string) UI::QueryWidget(`id(`num), `Value);

	if(UI::WidgetExists(`id(`pcmcia)) || UI::WidgetExists(`id(`usb))) {
	    if(UI::QueryWidget(`id(`pcmcia), `Value) == true)
		Lan::hotplug = "pcmcia";
	    else if(UI::QueryWidget(`id(`usb), `Value) == true)
		Lan::hotplug = "usb";
	    else
		Lan::hotplug = "";
	}

	if(UI::WidgetExists(`id(`dev))) {
	    type = (string) UI::QueryWidget(`id(`dev), `Value);
	    if(type == "qeth") type = "eth";
	    Lan::type = type;
	}

	y2milestone("type=%1",type);
    }

    /* s390 screen not used #19542
    if(ret == `next && Lan::type == "hsi") ret = `s390;
    */
    return ret;
}

/**
 * Call back for a manual selection from the list
 * @return dialog result
 */
define any SelectionDialog() {

    ScreenName("lan-hardware-selection");

    string type = Lan::type;
    integer selected = 0;

    /* map NetworkCards */
    include "network/lan/cards.ycp";

    list<map> hwlist = lookup(NetworkCards, type, []);
    list cards = hwlist2items(hwlist, 0);

    /* Manual selection caption */
    string caption = _("Manual network card selection");

    /* Manual selection help */
    string helptext = _("<p>Select the network card to configure. Search
for a particular network card by entering the name in the search entry.</p>");

    /* Manual selection contents */
    term contents = `VBox(
	`VSpacing(0.5),
	/* Selection box label */
	`ReplacePoint(`id(`rp), `SelectionBox(`id(`cards), _("Se&lect network card"), cards)),
	`VSpacing(0.5),
	/* Text entry field */
	`TextEntry(`id(`search), `opt(`notify), _("&Search")),
	`VSpacing(0.5)
    );

    Wizard::SetContentsButtons(caption, contents, helptext,
	    Label::BackButton(), Label::OKButton());

    UI::SetFocus(`id(`cards));

    any ret = nil;
    while(true) {
	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `search) {

	    string entry = (string) UI::QueryWidget(`id(`search), `Value);

	    list l = filter(term e, (list<term>) cards, {
		return tolower(substring(select(e, 1, ""), 0, size(entry))) == tolower(entry);
	    });

	    if(size(entry) == 0) selected = 0;
	    if(size(l) > 0) selected = (integer) select((term) select((term) select(l, 0, `it()), 0, `it()), 0, 0);

	    cards = [];
	    cards = hwlist2items(hwlist, selected);

	    /* Selection box title */
	    UI::ReplaceWidget(`id(`rp), `SelectionBox(`id(`cards), _("Se&lect network card"), cards));
	}
	else if(ret == `back) {
	    break;
	}
	else if(ret == `next) {
	    /* FIXME: check_* */
	    break;
	}
	else {
	    y2error("Unexpected return code: %1", ret);
	    continue;
	}
    }

    if(ret == `next) {
	selected = (integer) UI::QueryWidget(`id(`cards), `CurrentItem);
	if(selected == nil) selected = 0;
	map card = (map) select(hwlist, selected, $[]);
	Lan::name = card["name"]:"";

	NetworkModules::Alias /* FIXME: MOD Lan::Module["module"] */ = card["module"]:"";
	NetworkModules::Options /* FIXME: MOD Lan::Module["options"] */ = card["options"]:"";
    }

    return ret;
}

/**
 * S/390 devices configuration dialog
 * @return dialog result
 */
define any S390Dialog() {

    ScreenName("lan-hardware-s390");

    /* S/390 dialog caption */
    string caption = _("S/390 Network Card Configuration");

    /* S/390 dialog help 1/6 */
    string helptext = _("<p>Here, set the most important settings
for S/390 networking.</p>") +

    /* S/390 dialog help 2/6 */
_("<p>The <b>Read channel</b>
...</p>") +

    /* S/390 dialog help 3/6 */
_("<p>The <b>Write channel</b>
...</p>") +

    /* S/390 dialog help 4/6 */
_("<p>The <b>Data channel</b>
...</p>") +

    /* S/390 dialog help 5/6 */
_("<p>The <b>Port name</b>
...</p>") +

    /* S/390 dialog help 6/6 */
_("<p>These values will be written to the interface configuration file
'ifcfg-*' in '/etc/sysconfig/network'. If you need additional settings,
add them manually.</p>");

    /* S/390 dialog contents */
    term contents = `HBox(
	`HSpacing(6),
	/* Frame label */
	`Frame(_("S/390 Device Settings"), `HBox(`HSpacing(2), `VBox(
	    `VSpacing(1),
	    /* TextEntry label */
	    `TextEntry(`id(`read_channel), _("R&ead Channel"), Lan::read_channel),
	    `VSpacing(0.2),
	    /* TextEntry label */
	    `TextEntry(`id(`write_channel), _("&Write Channel"), Lan::write_channel),
	    `VSpacing(0.2),
	    /* TextEntry label */
	    `TextEntry(`id(`data_channel), _("&Data Channel"), Lan::data_channel),
	    `VSpacing(0.2),
	    /* TextEntry label */
	    `TextEntry(`id(`portname), _("&Port Name"), Lan::portname),
	    `VSpacing(1)
	    ), `HSpacing(2))),
	`HSpacing(6)
    );

    Wizard::SetContentsButtons(caption, contents, helptext,
	    Label::BackButton(), Label::NextButton());

    // UI::ChangeWidget(`id(`key), `ValidChars, "0123456789abcdefABCDEF-:s");

    any ret = nil;
    while(true) {
	ret = UI::UserInput();

	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `back) {
	    break;
	}
	else if(ret == `next) {
	    break;
	}
	else if(ret == `mode) {
	    continue;
	}
	else {
	    y2error("Unexpected return code: %1", ret);
	    continue;
	}
    }

    if(ret == `next) {
	Lan::read_channel = (string) UI::QueryWidget(`id(`read_channel), `Value);
	Lan::write_channel = (string) UI::QueryWidget(`id(`write_channel), `Value);
	Lan::data_channel = (string) UI::QueryWidget(`id(`data_channel), `Value);
	Lan::portname = (string) UI::QueryWidget(`id(`portname), `Value);
    }

    return ret;
}

/* EOF */
}
