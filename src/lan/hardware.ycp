/**
 * File:	include/network/lan/hardware.ycp
 * Package:	Network configuration
 * Summary:	Hardware dialogs
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

textdomain "network";

import "Arch";
// Arch::s390=true;
import "Lan";
import "Wizard";

include "ui/common_popups.ycp";
include "ui/common_messages.ycp";

include "network/complex.ycp";
include "network/routines.ycp";

/**
 * Manual network card configuration dialog
 * @return dialog result
 */
global define symbol HardwareDialog() ``{

    ScreenName("lan-hardware");

    /* Manual dialog caption */
    string caption = _("Manual network card configuration");

    /* Manual dialog help 1/4 */
    string help = _("<p>Here, set up your networking device.
The values will be written into <i>/etc/modules.conf</i>.</p>") +

    /* Manual dialog help 2/4 */
_("<p>Options for the module should be written in the format
<i>option</i>=<i>value</i>. Each entry should be space separated,
for example, <i>io=220 irq=5</i>. <b>Note:</b> If  two cards are configured
with the same module name, options will be merged while saving.</p>") +

    /* Manual dialog help 3/4 */
_("<p>Get a list of available network cards by pressing <b>List</b>.</p>") +

    /* Manual dialog help 4/4 */
_("<p>If you have a <b>PCMCIA</b> network card, click on the PCMCIA check
box, if you have an <b>USB</b> network card, click on the check box USB.</p>");

    if(Arch::s390)
	/* Manual dialog help 5/4 */
	help = _("<p>Here, set up your networking device. The values will be
written into <i>/etc/modules.conf</i> or <i>/etc/chandev.conf</i>.</p>") +

	/* Manual dialog help 6/4 */
_("<p>Options for the module should be written in the format specified
in the <b>IBM Device Drivers and Installation Commands</b> manual.</p>");

    string modul = Lan::Module["module"]:"";
    string options = Lan::Module["options"]:"";

    string hotplug = Lan::hotplug;
    boolean wireless = Lan::wireless;
    string mtu = Lan::mtu;

    string type = Lan::type;
    if(type == "") {
	y2error("Shouldn't happen -- type is empty. Assuming eth.");
	type = "eth";
    }
    string realtype = RealType(type, hotplug);
    string device = Lan::device;
    string default_device = device;

    list device_types = [ "arc", "eth", "fddi", "myri", "tr" ];

    if(Arch::s390)
	device_types = [ "eth", "tr", "hsi", "ctc", "escon", "iucv" ];

    /*
    if(Arch::s390) {
	device_types = [
	    `item(`id("eth"), "OSA Ethernet", type == "eth"),
	    `item(`id("qeth"), "OSA Express Ethernet", type == "qeth"),
	    `item(`id("tr"), "OSA Token-Ring", type == "tr"),
	    `item(`id("hsi"), "Hipersockets", type == "hsi"),
	    `item(`id("ctc"), "Channel To Channel", type == "ctc"),
	    `item(`id("escon"), "Escon", type == "escon"),
	    `item(`id("iucv"), "IUCV", type == "iucv"),
	];
	if(modul == "")
	    modul = "lcs";
    }
    */

    term CheckBoxes = `HBox(
	`HSpacing(1.5),
	/* CheckBox label */
	`CheckBox(`id(`pcmcia), `opt(`notify), _("&PCMCIA"), hotplug == "pcmcia"),
	`HSpacing(1.5),
	/* CheckBox label */
	`CheckBox(`id(`usb), `opt(`notify), _("&USB"), hotplug == "usb"),
	`HSpacing(1.5)
    );

    /* Placeholders (translations) */
    term XBox = `HBox(
	/* ComboBox label */
	`ComboBox(`id(`hotplug), `opt(`notify), _("&Hot Plug Type"), []),
	/* CheckBox label */
	`CheckBox(`id(`pci), `opt(`notify), _("P&CI"), hotplug == "pci"),
	`HSpacing(1.5)
    );

    /* Disable PCMCIA and USB checkboxex on Edit and s390 */
    if(Lan::operation == `edit || Lan::unique != "" || Arch::s390 == true)
	CheckBoxes = `VSpacing(0);

    /* Frame label */
    term KernelBox = `Frame(_("&Kernel module"), `HBox(`HSpacing(0.5), `VBox(
	`VSpacing(0.4),
	/* Text entry label */
	`TextEntry(`id(`modul), _("&Module name"), modul),
	`VSpacing(0.2),
	/* Text entry label */
	`TextEntry(`id(`options), _("Op&tions"), options),
	`VSpacing(0.4),
	CheckBoxes,
	`VSpacing(0.4)
    ),`HSpacing(0.5)));

    term DeviceNumberBox = `ReplacePoint(`id(`rnum),
	/* Combobox label */
	`ComboBox(`id(`num), `opt(`hstretch), _("D&evice number"),
	    Lan::FreeDevices(realtype)));
	    // FIXME maplist(integer d, Lan::FreeDevices(realtype), ``(sformat("%1", d)))));

    /* TextEntry label */
    term MTUBox = `TextEntry(`id(`mtu), _("M&aximum Transfer Unit (MTU)"), mtu);
    MTUBox = `VSpacing(0);
    // FIXME: help missing

    /* Manual dialog contents */
    term contents = `HBox(
	`HSpacing(2),
	`VBox(
	    `VSpacing(0.5),
	    /* Frame label */
	    `Frame(_("Network &interface"),`VBox(
		`VSpacing(0.2),
		`HBox(
		    `HSpacing(0.5),
		    `ComboBox(`id(`dev), `opt(`hstretch, `notify),
			/* ComboBox label */
			_("Network &device"), BuildTypesList(device_types, type)),
		    `HSpacing(1.5),
		    DeviceNumberBox,
		    `HSpacing(0.5)
		),
		`VSpacing(0.2)
	    )),
	    `VSpacing(0.5),
	    /* Frame label */
	    `Frame(_("Wireless support"),`VBox(
	    `VSpacing(0.4),
	    `HBox(
		`HStretch(),
		`HSpacing(0.5),
		/* CheckBox label */
		`CheckBox(`id(`wireless), `opt(`notify), _("&Wireless device"), wireless),
		`HSpacing(1.5),
		/* Pushbutton label */
		`PushButton(`id(`wire), _("Wireless &settings")),
		`HSpacing(0.5),
		`HStretch()
	    ),
	    `VSpacing(0.4)
	    )),
	    `VSpacing(0.5),
	    KernelBox,
	    `VSpacing(0.4),
	    MTUBox,
	    `VSpacing(0.4),
	    /* Pushbutton label */
	    `PushButton(`id(`list), _("Select from &list")),
	    `VSpacing(0.5)
	    ),
	`HSpacing(2));

    /* Add hardware -> don't allow some changes (card type) */
    if(Lan::operation == `add && Lan::unique != "") {

	string typ = DeviceType(type);
	if(hotplug == "pcmcia") typ = typ + " (PCMCIA)";
	if(hotplug == "usb") typ = typ + " (USB)";

	contents = `HBox(
	    `HSpacing(2),
	    `VBox(
		`VSpacing(0.5),
		/* Frame label */
		`Frame(_("Network &interface"),`VBox(
		    `VSpacing(0.2),
		    `HBox(
			`HSpacing(0.9),
			`VBox(
			    /* Label text */
			    `Left(`Label(_("Device Type:"))),
			    `VSpacing(0.2),
			    `Left(`Label(`opt(`outputField), typ))
			),
			`HSpacing(0.5),
			DeviceNumberBox,
			`HSpacing(0.5)
		    ),
		    `VSpacing(0.2)
		)),
		`VSpacing(1.5),
		KernelBox,
		`VSpacing(0.4),
		MTUBox,
		`VSpacing(0.4),
		`HBox(
		    `HStretch(),
		    `HSpacing(0.5),
		    /* CheckBox label */
		    `CheckBox(`id(`wireless), `opt(`notify), _("&Wireless device"), wireless),
		    `HSpacing(1.5),
		    /* Pushbutton label */
		    `PushButton(`id(`wire), _("Wireless &settings")),
		    `HSpacing(0.5),
		    `HStretch()
		),
		/* Pushbutton label */
		// #25234 `PushButton(`id(`wire), _("Wireless &settings")),
		// FIXME: show only in the case of wireless device
		`VSpacing(0.5)
		),
	    `HSpacing(2));

    }

    /* Edit -> don't allow some changes */
    if(Lan::operation == `edit) {

	contents = `HBox(
	    `HSpacing(2),
	    `VBox(
		`VSpacing(0.5),
		`Left(`HBox(
		    /* Label text */
		    `Label(_("Network device")),
		    `HSpacing(0.5),
		    `Label(`opt(`outputField), realtype + Lan::device)
		)),
		`VSpacing(1.5),
		KernelBox,
		`VSpacing(0.4),
		MTUBox,
		`VSpacing(0.4),
		/* Pushbutton label */
		`PushButton(`id(`wire), _("Wireless &settings")),
		// FIXME: show only in the case of wireless device
		`VSpacing(0.5)
		),
	    `HSpacing(2));

    }

    if(Lan::operation == `edit || Lan::unique != "")
	Wizard::SetContentsButtons(caption, contents, help,
		BackButtonLabel(), OKButtonLabel());
    else
	Wizard::SetContentsButtons(caption, contents, help,
		BackButtonLabel(), NextButtonLabel());

    UI::ChangeWidget(`id(`modul), `Enabled, hotplug == "");
    UI::ChangeWidget(`id(`options), `Enabled, hotplug == "");
    ChangeWidgetIfExists(`id(`list), `Enabled, hotplug == "");
    ChangeWidgetIfExists(`id(`usb), `Enabled, hotplug == "usb" || hotplug == "");
    ChangeWidgetIfExists(`id(`pcmcia), `Enabled, hotplug == "pcmcia" || hotplug == "");
    ChangeWidgetIfExists(`id(`wire), `Enabled, wireless);
    ChangeWidgetIfExists(`id(`num), `Value, device);

    any ret = nil;
    while(true) {
	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	/* change device type or pcmcia/usb card? */
	else if(ret == `pcmcia || ret == `usb || ret == `dev) {

	    if(ret == `pcmcia || ret == `usb) {
		if(UI::WidgetExists(`id(`pcmcia)) || UI::WidgetExists(`id(`usb))) {
		    if(UI::QueryWidget(`id(`pcmcia), `Value) == true)
			hotplug = "pcmcia";
		    else if(UI::QueryWidget(`id(`usb), `Value) == true)
			hotplug = "usb";
		    else
			hotplug = "";
		}

		y2debug("hotplug=%1", hotplug);
		UI::ChangeWidget(`id(`modul), `Enabled, hotplug == "");
		UI::ChangeWidget(`id(`options), `Enabled, hotplug == "");
		ChangeWidgetIfExists(`id(`list), `Enabled, hotplug == "");
		ChangeWidgetIfExists(`id(`usb), `Enabled, hotplug == "usb" || hotplug == "");
		ChangeWidgetIfExists(`id(`pcmcia), `Enabled, hotplug == "pcmcia" || hotplug == "");
	    }

	    if(UI::WidgetExists(`id(`dev))) {
		type = UI::QueryWidget(`id(`dev), `Value);
		realtype = RealType(type, hotplug);
	    }

	    list devices = [];
	    devices = Lan::FreeDevices(realtype);
	    // FIXME devices = maplist(integer d, Lan::FreeDevices(realtype), ``(sformat("%1",d)));
	    default_device = select(devices, 0, "");
	    /* Combobox label */
	    UI::ReplaceWidget(`id(`rnum), `ComboBox(`id(`num), `opt(`hstretch), _("D&evice number"), devices));

	    if(Arch::s390) {
		if(type == "tr" || type == "eth") modul = "lcs";
		if(type == "hsi" || type == "qeth") modul = "qeth";
		if(type == "ctc" || type == "escon") modul = "ctc";
		if(type == "iucv") modul = "netiucv";
		UI::ChangeWidget(`id(`modul), `Value, modul);
	    }

	    continue;
	}
	else if(ret == `wireless) {
	    wireless = UI::QueryWidget(`id(`wireless), `Value);
	    UI::ChangeWidget(`id(`wire), `Enabled, wireless);
	    continue;
	}
	else if(ret == `back) {
	    break;
	}
	/* select from the list *//*
	else if(ret == `list) {
	    Lan::type = type;
	    Lan::device = tointeger(UI::QueryWidget(`id(`num), `Value));
	    break;
	} */
	else if(ret == `next || ret == `list || ret == `wire) {
	    /* FIXME: check_* */
	    if(UI::WidgetExists(`id(`num))) {
		string devic = UI::QueryWidget(`id(`num), `Value);
		if(devic != default_device) {
		    y2warning("Default device: %1 -> %2", default_device, devic);
		    /* Popup text */
		    string pop = _("You changed the default device number.

This possibility is only intended for systems with built-in network cards
or cards with multiple interfaces. If you do not have such network card,
this would probably result in a nonfunctional network configuration.

Really continue?
");
		    if(UI::YesNoHeadlinePopup(WarningMsg(), pop) == true) {
			y2warning("Default device changed!");
			break;
		    }
		    else continue;
		}
	    }
	    break;
	}
	else {
	    y2error("Unexpected return code: %1", ret);
	    continue;
	}
    };

    if(ret == `next || ret == `list || ret == `wire) {
	Lan::Module["module"] = UI::QueryWidget(`id(`modul), `Value);
	Lan::Module["options"] = UI::QueryWidget(`id(`options), `Value);

	if(UI::WidgetExists(`id(`mtu)))
	    Lan::mtu = UI::QueryWidget(`id(`mtu), `Value);

	if(UI::WidgetExists(`id(`num)))
	    Lan::device = UI::QueryWidget(`id(`num), `Value);

	if(UI::WidgetExists(`id(`wireless)))
	    Lan::wireless = UI::QueryWidget(`id(`wireless), `Value);

	if(UI::WidgetExists(`id(`pcmcia)) || UI::WidgetExists(`id(`usb))) {
	    if(UI::QueryWidget(`id(`pcmcia), `Value) == true)
		Lan::hotplug = "pcmcia";
	    else if(UI::QueryWidget(`id(`usb), `Value) == true)
		Lan::hotplug = "usb";
	    else
		Lan::hotplug = "";
	}

	if(UI::WidgetExists(`id(`dev))) {
	    type = UI::QueryWidget(`id(`dev), `Value);
	    if(type == "qeth") type = "eth";
	    Lan::type = type;
	}

	y2milestone("type=%1",type);
    }

    /* s390 screen not used #19542
    if(ret == `next && Lan::type == "hsi") ret = `s390;
    */
    return ret;
}

/**
 * Call back for a manual selection from the list
 * @return dialog result
 */
global define symbol SelectionDialog() ``{

    ScreenName("lan-hardware-selection");

    string type = Lan::type;
    if(Lan::wireless) type = "wireless";
    integer selected = 0;

    /* map NetworkCards */
    include "network/lan/cards.ycp";

    list hwlist = lookup(NetworkCards, type, []);
    list cards = hwlist2items(hwlist, 0);

    /* Manual selection caption */
    string caption = _("Manual network card selection");

    /* Manual selection help */
    string helptext = _("<p>Select the network card to configure. Search
for a particular network card by entering the name in the search entry.</p>");

    /* Manual selection contents */
    term contents = `VBox(
	`VSpacing(0.5),
	/* Selection box label */
	`ReplacePoint(`id(`rp), `SelectionBox(`id(`cards), _("Se&lect network card"), cards)),
	`VSpacing(0.5),
	/* Text entry field */
	`TextEntry(`id(`search), `opt(`notify), _("&Search")),
	`VSpacing(0.5)
    );

    Wizard::SetContentsButtons(caption, contents, helptext,
	    BackButtonLabel(), OKButtonLabel());

    UI::SetFocus(`id(`cards));

    any ret = nil;
    while(true) {
	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `search) {

	    string entry = UI::QueryWidget(`id(`search), `Value);

	    list l = filter(`e, cards, ``(tolower(substring(select(e, 1, ""), 0, size(entry))) == tolower(entry)));

	    if(size(entry) == 0) selected = 0;
	    if(size(l) > 0) selected = select(select(select(l, 0, []), 0, []), 0, 0);

	    cards = [];
	    cards = hwlist2items(hwlist, selected);

	    /* Selection box title */
	    UI::ReplaceWidget(`id(`rp), `SelectionBox(`id(`cards), _("Se&lect network card"), cards));
	}
	else if(ret == `back) {
	    break;
	}
	else if(ret == `next) {
	    /* FIXME: check_* */
	    break;
	}
	else {
	    y2error("Unexpected return code: %1", ret);
	    continue;
	}
    };

    if(ret == `next) {
	selected = UI::QueryWidget(`id(`cards), `CurrentItem);
	map card = select(hwlist, selected, $[]);
	Lan::name = card["name"]:"";
	Lan::Module["module"] = card["module"]:"";
	Lan::Module["options"] = card["options"]:"";
    }

    return ret;
}

/**
 * Wireless devices configuration dialog
 * @return dialog result
 */
global define symbol WirelessDialog() ``{

    ScreenName("lan-hardware-wireless");

    /* Wireless dialog caption */
    string caption = _("Wireless network card configuration");

    /* Wireless dialog help 1/7 */
    string helptext = _("<p>Here, set the most important settings
for wireless networking.</p>") +

    /* Wireless dialog help 2/7 */
_("<p>The <b>operating mode</b> depends on the network topology. The mode can
be Ad-hoc (network composed of only one cell without an access point), Managed
(network composed of many cells with roaming or an access point), Master
(the node is the synchronization master or acts as an access point), Repeater
(the node forward packets on the air), Secondary (the node acts as a backup
master or repeater), or Auto.</p>") +

    /* Wireless dialog help 3/7 */
_("<p>Set the <b>Network name (ESSID)</b>, which is used to identify cells that are
part of the same virtual network. As opposed to the NWID, which defines a
single cell, the ESSID defines a group of cells, connected via repeaters or
infrastructure, where the user may roam.</p>") +

    /* Wireless dialog help 4/7 */
_("<p>As all adjacent wireless networks share the same medium, the <b>Network
identifier (NWID)</b> is used to differentiate them (create logical colocated
networks) and identify nodes belonging to the same cell.</p>") +

    /* Wireless dialog help 5/7 */
_("<p>To set the current <b>Encryption key</b>, enter the key in hex digits as
XXXX-XXXX-XXXX-XXXX or XXXXXXXX. You can also enter the key as an ASCII
string by using the 's:' prefix.</p>") +

    /* Wireless dialog help 6/7 */
_("<p>The <b>Nick Name</b> means the station name. Most 802.11 products
define it, but only some diagnostic tools use it.</p>") +

    /* Wireless dialog help 7/7 */
_("<p>These values will be written to the interface configuration file
'ifcfg-*' in '/etc/sysconfig/network'. If you need additional settings,
add them manually. Refer to the file 'wireless' in the same directory for all
available options.</p>");

    /* Wireless dialog contents */
    term contents = `HBox(
	`HSpacing(6),
	/* Frame label */
	`Frame(_("Wireless device settings"), `HBox(`HSpacing(2), `VBox(
	    `VSpacing(1),
	    /* Combobox item */
	    `ComboBox(`id(`mode), `opt(`hstretch), _("O&perating mode"), [
		/* Combobox item */
		`item(`id("Ad-hoc"), _("Ad-hoc"), Lan::wl_mode == "Ad-hoc"),
		/* Combobox item */
		`item(`id("Managed"), _("Managed"), Lan::wl_mode == "Managed"),
		/* Combobox item */
		`item(`id("Repeater"), _("Repeater"), Lan::wl_mode == "Repeater"),
		/* Combobox item */
		`item(`id("Secondary"), _("Secondary"), Lan::wl_mode == "Secondary"),
		/* Combobox item */
		`item(`id("Automatic"), _("Automatic"), Lan::wl_mode == "Auto")
	     ]),
	    `VSpacing(0.2),
	    /* Text entry label */
	    `TextEntry(`id(`essid), _("Ne&twork name (ESSID)"), Lan::wl_essid),
	    `VSpacing(0.2),
	    /* Text entry label */
	    `TextEntry(`id(`nwid), _("Network &identifier (NWID)"), Lan::wl_nwid),
	    `VSpacing(0.2),
	    /* Text entry label */
	    `TextEntry(`id(`key), _("&Encryption key"), Lan::wl_key),
	    `VSpacing(0.2),
	    /* Text entry label */
	    `TextEntry(`id(`nick), _("Nic&k name"), Lan::wl_nick),
	    `VSpacing(1)
	    ), `HSpacing(2))),
	`HSpacing(6)
    );

    Wizard::SetContentsButtons(caption, contents, helptext,
	    BackButtonLabel(), OKButtonLabel());

    // FIXME: provide a better check and an error message, #17546
    // removed #24839 UI::ChangeWidget(`id(`key), `ValidChars, "0123456789abcdefABCDEF-:s");

    any ret = nil;
    while(true) {
	ret = UI::UserInput();

	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `back) {
	    break;
	}
	else if(ret == `next) {
	    break;
	}
	else {
	    y2error("Unexpected return code: %1", ret);
	    continue;
	}
    }

    if(ret == `next) {
	Lan::wl_essid = UI::QueryWidget(`id(`essid), `Value);
	Lan::wl_nick = UI::QueryWidget(`id(`nick), `Value);
	Lan::wl_nwid = UI::QueryWidget(`id(`nwid), `Value);
	Lan::wl_mode = UI::QueryWidget(`id(`mode), `Value);
	Lan::wl_key = UI::QueryWidget(`id(`key), `Value);
    }

    return ret;
}

/**
 * S/390 devices configuration dialog
 * @return dialog result
 */
global define symbol S390Dialog() ``{

    ScreenName("lan-hardware-s390");

    /* S/390 dialog caption */
    string caption = _("S/390 Network Card Configuration");

    /* S/390 dialog help 1/6 */
    string helptext = _("<p>Here, set the most important settings
for S/390 networking.</p>") +

    /* S/390 dialog help 2/6 */
_("<p>The <b>Read channel</b>
...</p>") +

    /* S/390 dialog help 3/6 */
_("<p>The <b>Write channel</b>
...</p>") +

    /* S/390 dialog help 4/6 */
_("<p>The <b>Data channel</b>
...</p>") +

    /* S/390 dialog help 5/6 */
_("<p>The <b>Port name</b>
...</p>") +

    /* S/390 dialog help 6/6 */
_("<p>These values will be written to the interface configuration file
'ifcfg-*' in '/etc/sysconfig/network'. If you need additional settings,
add them manually.</p>");

    /* S/390 dialog contents */
    term contents = `HBox(
	`HSpacing(6),
	/* Frame label */
	`Frame(_("S/390 Device Settings"), `HBox(`HSpacing(2), `VBox(
	    `VSpacing(1),
	    /* TextEntry label */
	    `TextEntry(`id(`read_channel), _("R&ead Channel"), Lan::read_channel),
	    `VSpacing(0.2),
	    /* TextEntry label */
	    `TextEntry(`id(`write_channel), _("&Write Channel"), Lan::write_channel),
	    `VSpacing(0.2),
	    /* TextEntry label */
	    `TextEntry(`id(`data_channel), _("&Data Channel"), Lan::data_channel),
	    `VSpacing(0.2),
	    /* TextEntry label */
	    `TextEntry(`id(`portname), _("&Port Name"), Lan::portname),
	    `VSpacing(1)
	    ), `HSpacing(2))),
	`HSpacing(6)
    );

    Wizard::SetContentsButtons(caption, contents, helptext,
	    BackButtonLabel(), NextButtonLabel());

    // UI::ChangeWidget(`id(`key), `ValidChars, "0123456789abcdefABCDEF-:s");

    any ret = nil;
    while(true) {
	ret = UI::UserInput();

	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `back) {
	    break;
	}
	else if(ret == `next) {
	    break;
	}
	else if(ret == `mode) {
	    continue;
	}
	else {
	    y2error("Unexpected return code: %1", ret);
	    continue;
	}
    };

    if(ret == `next) {
	Lan::read_channel = UI::QueryWidget(`id(`read_channel), `Value);
	Lan::write_channel = UI::QueryWidget(`id(`write_channel), `Value);
	Lan::data_channel = UI::QueryWidget(`id(`data_channel), `Value);
	Lan::portname = UI::QueryWidget(`id(`portname), `Value);
    }

    return ret;
}


/* EOF */
}
