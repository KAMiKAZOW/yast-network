{				// -*- c++ -*-
// $Id$
textdomain "network";
map<string, map<string,any> > widget_descr = $[

    "NDLABEL": $[
	"widget": `label,
	/* Label text */
	"label": _("Network Device"),
	"help": _("H"),
	],

    "DEVICETYPE": $[
	"widget": `combobox,
	/* ComboBox label */
	"label": _("&Device Type"),
	"opt": [`hstretch, `notify],
	"help": _("H"),
	],

    "CNAME": $[
	"widget": `combobox,
	/* ComboBox label */
	"label": _("&Configuration Name"),
	"opt": [`hstretch, `editable],
	"help": _("H"),
	],

    "IPADDR": $[
	"widget": `textentry,
	/* Text entry label for IP address */
	"label": _("&IP Address"),
	"help": _("H"),
	],

    "NETMASK": $[
	"widget": `textentry,
	/* Text entry label for network mask */
	"label": _("&Subnet Mask"),
	"help": _("H"),
	],

    "REMOTEIP": $[
	"widget": `textentry,
	/* Text entry label */
	"label": _("R&emote IP Address"),
	"help": _("H"),
	],
    "USERCONTROL": $[
	"widget": `checkbox,
	/* CheckBox label */
	// is the interface administrable by users (as opposed to root)
	"label": _("&User Controlled"),
	"opt": [`notify],
	"help":
	// Details dialog help
_("<p>Normally only the system administrator is allowed to activate and 
deactivate a network interface. With <b>User Controlled</b>, an 
ordinary user may control the interface with KInternet.</p>
"),
	],
    "FWZONE": $[
	"widget": `combobox,
	// Combo Box label
	"label": _("Firewall &Zone"),
	"opt": [],
	"help": _("<p>Select the <b>Firewall Zone</b> to put the interface in. If you
select a zone, the firewall will be enabled. If you do not and other 
firewalled interfaces exist, the firewall
will stay enabled but all traffic will be blocked for this
interface. If you do not select a zone and no others exist, 
the firewall will be disabled.</p>"),
	],
    "MANDATORY": $[
	"widget": `checkbox,
	"label": _("&Mandatory interface"),
	"opt": [],
	"help": _("<p>TODO: <b>Mandatory Interface</b> specifies whether the network service will report failure if the interface fails to start at boot time.</p>"),
	],
    "IFNAME": $[
	"widget": `textentry,
	"label": _("&Name of interface"),
	"opt": [],
	"help": _("<p>TODO kind of vague!</p>"),
	],
    "BINDTOHW": $[
	"widget": `combobox,
	"label": _("&Device to use"),
	"opt": [`editable],
	"help": _("<p>Which hardware to bind to</p>"),
	// IDEA: "help" is the traditional detached help, has to include
	// widget name; "tooltip" or "toolhelp" is visually bound to the
	// widget, does not need to contain its name (the translator comment
	// needs to, though)
	],
    "GATEWAY": $[
	"widget": `textentry,
	"label": _("Default &Gateway"),
	"opt": [],
	"help": _("<p><b>Default Gateway</b> TODO: the original help is bad</p>"),
	],
    // obsoleted by BOOTPROTO_*
    "BOOTPROTO": $[
	"widget": `radio_buttons,
	// radio button group label,method of setup
	"label": _("Setup Method"), // is this necessary?
	"items": [
	    // radio button label
	    ["dhcp", _("A&utomatic Address Setup (via DHCP)")],
	    // radio button label
	    ["static", _("S&tatic Address Setup")],
	    ],
	"opt": [],
	"help": _("<p>H</p>"),
	],
    "BOOTPROTO_dhcp": $[
	"widget": `radio_button,
	// radio button label
	"label": _("A&utomatic Address Setup (via DHCP)"),
	"opt": [],
	"help": _("<p>H</p>"),
	],
    "BOOTPROTO_static": $[
	"widget": `radio_button,
	// radio button label
	"label": _("S&tatic Address Setup"),
	"opt": [],
	"help": _("<p>H</p>"),
	],

    "BOOTPROTO_dhcp_autoip": $[
	"widget": `radio_button,
	/* Radio button label */
	"label": _("A&utomatic Address Setup (via DHCP+AUTOIP)"),
	"opt": [`notify],
	"help": _("H"),
	],

    "BOOTPROTO_autoip": $[
	"widget": `radio_button,
	/* Radio button label */
	"label": _("A&utomatic Address Setup (via AUTOIP)"),
	"opt": [`notify],
	"help": _("H"),
	],
    "BOOTPROTO_noaddr": $[
	"widget": `radio_button,
	/* Radio button label */
	"label": _("&Without an address"),
	"opt": [`notify],
	"help": _("without an IPv4 address, this is useful when the interface is used for pppoe"),
	],
    "DHCP_ADVANCED": $[
	"widget": `push_button,
	"label": _("DH&CP Options"),
	"opt": [],
	"help": _("<p>H</p>"),	// no help?
	],
    "ADDITIONAL_ADDRESSES": $[
	"widget": `push_button,
	"label": _("Addi&tional Addresses"),
	"opt": [],
	"help": _("<p>H</p>"),	// no help?
	],
/*
    "": $[
	"widget": `,
	"label": _(""),
	"opt": [],
	"help": _("<p>H</p>"),
	],
    "": $[
	"widget": `,
	"label": _(""),
	"opt": [],
	"help": _("<p>H</p>"),
	],
    "": $[
	"widget": `,
	"label": _(""),
	"opt": [],
	"help": _("<p>H</p>"),
	],
*/
    ];

include "./widgets-old.ycp";

widget_descr["STARTMODE"] = MakeStartmode (
    ["auto", "ifplugd", "hotplug", "manual", "off", ]);

/*
term contents = `VBox (
    "IPADDR",
    "NETMASK"
    );
*/
/*
term contents = `HSquash (`VBox (
    "IPADDR",
    "NETMASK"
    ));
*/

term general_contents = `VBox ("IFNAME", "BINDTOHW", "STARTMODE",
			       "MANDATORY", "USERCONTROL", "FWZONE");

term address_contents = `VBox (
    `RadioButtonGroup (
	`id ("BOOTPROTO"),	// CWM must not expand `id
	`VBox (
	    `Left ("BOOTPROTO_dhcp"), // TODO: widget attribute align: left
	    `Left ("BOOTPROTO_static"),
	    `Frame (
		// frame label
//		_("Static Address Setup"),
		"",		// labelless frame
		`VBox (
		    "IPADDR",
		    "NETMASK",
		    "GATEWAY")
		)
	    )
	)
    );

term address_advanced_contents = `VBox (
    `RadioButtonGroup (
	`id ("BOOTPROTO"),	// CWM must not expand `id
	`VBox (
	    `Left ("BOOTPROTO_dhcp_autoip"), // TODO: widget attribute align: left
	    `Left ("BOOTPROTO_dhcp"),
	    `Left (`HBox (`HSpacing (4), "DHCP_ADVANCED")),
	    `Left ("BOOTPROTO_autoip"),
	    `Left ("BOOTPROTO_noaddr"),
	    `Left ("BOOTPROTO_static"),
	    `Frame (
		// frame label
//		_("Static Address Setup"),
		"",		// labelless frame
		`VBox (
		    "IPADDR",
		    "NETMASK",
		    "GATEWAY")
		),
	    `Left (`HBox (`HSpacing (4), "ADDITIONAL_ADDRESSES")) // make it a tab?
	    )
	)
    );

term point_to_point_contents = `VBox ();

import "CWM";
import "CWMTab";
import "Label";
import "Wizard";

    /**
      * Process term with the dialog, return all strings.
      * To be used as an argument for widget_names until they are obsoleted.
      * @param t term dialog containing strings
      * @return strings found in the term
      */
    define list<string> StringsOfTerm (term t) {
	list<string> rets = [];
	integer args = size (t);
	integer index = 0;
	while (index < args)
	{
	    any arg = t[index]:nil;
	    symbol current = symbolof (t);
	    if (current == `Frame && index == 0)
	    {
		y2debug ("Leaving untouched %1", arg);
	    }
	    else if (is (arg, term) && arg != nil)
	    {
		symbol s = symbolof ((term)arg);
		if (contains ([ `VBox, `HBox, `Left, `Right, `Frame,
		    `RadioButtonGroup,
		    `HWeight, `VWeight], s))
		{
		    rets = rets + StringsOfTerm ((term)arg);
		}
	    }
	    else if (is (arg, string))
	    {
		rets = add (rets, (string)arg);
	    }
	    index = index + 1;
	}
	return rets;
    }

widget_descr = (map<string, map<string,any> >) union (widget_descr, $[
	"tab" : CWMTab::CreateWidget (
	    $[
		"tab_order" : ["general", "addr", "addr_adv", "wlan", "dns"],
		"tabs" : $[
                    "general" : $[
                        "header" : _("General"),
                        "contents" : general_contents,
                        "widget_names" : StringsOfTerm (general_contents),
			// FIXME we have helps per widget and for the whole
			// tab set but not for one tab
			"help": _("General help"),
                    ],
                    "addr" : $[
			// FIXME: here it does not complain about missing
			// shortcuts
                        "header" : _("Address"),
                        "contents" : address_contents,
                        "widget_names" : StringsOfTerm (address_contents),
                    ],
                    "addr_adv" : $[
			// FIXME: here it does not complain about missing
			// shortcuts
                        "header" : _("Address Advanced"),
                        "contents" : address_advanced_contents,
                        "widget_names" : StringsOfTerm (address_advanced_contents),
                    ],
                    "wlan" : $[
                        "header" : _("Wireless"),
                        "contents" : `Empty (),
                        "widget_names" : [],
                    ],
                    "dns" : $[
                        "header" : _("DNS"),
                        "contents" : `Empty (),
                        "widget_names" : [],
                    ],
                ],
		"initial_tab" : "addr", // check that it exists
		"widget_descr" : widget_descr,
		"tab_help" : _("<p>Help for all tabs</p>"), // docs: <p>
            ])
        ]);

Wizard::CreateDialog ();

term contents = `HBox ("tab");

any ret = CWM::ShowAndRun (
    $[
	"widget_names": ["tab"],
	"widget_descr": widget_descr,
	"contents": contents,
	"caption": _("CAPTION"),
        "back_button" : Label::BackButton (),
        "next_button" : Label::OKButton (),
	]);
y2milestone ("ShowAndRun: %1", ret);

Wizard::CloseDialog ();
}
