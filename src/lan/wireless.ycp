/**
 * File:	include/network/lan/wireless.ycp
 * Package:	Network configuration
 * Summary:	Wireless dialogs
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

textdomain "network";

import "Label";
import "Lan";
import "Popup";
import "Wizard";

include "network/routines.ycp";

/**
 * Wireless devices configuration dialog
 * @return dialog result
 */
define any WirelessDialog() ``{

    ScreenName("lan-hardware-wireless");

    /* Wireless dialog caption */
    string caption = _("Wireless Network Card Configuration");

    /* Wireless dialog help 1/7 */
    string helptext = _("<p>Here, set the most important settings
for wireless networking.</p>") +

    /* Wireless dialog help 2/7 */
_("<p>The <b>Operating Mode</b> depends on the network topology. The mode
can be <b>Ad-hoc</b> (peer-to-peer network without an access point),
<b>Managed</b> (network managed by an access point, sometimes also
called <i>Infrastructure Mode</i>), <b>Master</b> (the node is the
synchronization master or acts as an access point), <b>Repeater</b>
(the node forwards packets on the air), <b>Secondary</b> (the node acts
as a backup master or repeater), or <b>Auto</b>.</p>") +

    /* Wireless dialog help 3/7 */
_("<p>Set the <b>Network Name (ESSID)</b> used to identify cells that are
part of the same virtual network. As opposed to the NWID, which defines a
single cell, the ESSID defines a group of cells, connected via repeaters or
infrastructure, where the user may roam.</p>") +

    /* Wireless dialog help 4/7 */
_("<p>As all adjacent wireless networks share the same medium, the <b>Network
Identifier (NWID)</b> is used to differentiate them (create logical colocated
networks) and identify nodes belonging to the same cell.</p>") +

    /* Wireless dialog help 5/7 */
_("<p>To set the current <b>Encryption Key</b>, enter the key in hex digits as
XXXX-XXXX-XXXX-XXXX or XXXXXXXX. You can also enter the key as an ASCII
string by using the 's:' prefix.</p>") +

    /* Wireless dialog help 6/7 */
_("<p>The <b>Nick Name</b> means the station name. Most 802.11 products
define it, but only some diagnostic tools use it.</p>") +

    /* Wireless dialog help 7/7 */
_("<p>These values will be written to the interface configuration file
'ifcfg-*' in '/etc/sysconfig/network'. If you need additional settings,
add them manually. Refer to the file 'wireless' in the same directory for all
available options.</p>");

    /* PushButton label */
    term multikeys = `PushButton(`id(`keys), _("&Multiple Keys"));
    // multikeys = `VSpacing(0);

    /* Wireless dialog contents */
    term contents = `HBox(
	`HSpacing(4),
	`VBox(
	    `VSpacing(0.5),
	    /* Frame label */
	    `Frame(_("Wireless Device Settings"), `HBox(`HSpacing(2), `VBox(
		`VSpacing(1),
		/* ComboBox label */
		`ComboBox(`id(`mode), `opt(`hstretch), _("O&perating Mode"), [
		    /* ComboBox item */
		    `item(`id("Ad-hoc"), _("Ad-hoc"), Lan::wl_mode == "Ad-hoc"),
		    /* ComboBox item */
		    `item(`id("Managed"), _("Managed"), Lan::wl_mode == "Managed"),
		    /* ComboBox item */
		    `item(`id("Repeater"), _("Repeater"), Lan::wl_mode == "Repeater"),
		    /* ComboBox item */
		    `item(`id("Secondary"), _("Secondary"), Lan::wl_mode == "Secondary"),
		    /* ComboBox item */
		    `item(`id("Automatic"), _("Automatic"), Lan::wl_mode == "Auto")
		 ]),
		`VSpacing(0.2),
		/* Text entry label */
		`TextEntry(`id(`essid), _("Ne&twork Name (ESSID)"), Lan::wl_essid),
		`VSpacing(0.2),
		/* Text entry label */
		`TextEntry(`id(`nwid), _("Network &Identifier (NWID)"), Lan::wl_nwid),
		`VSpacing(0.2),
		/* Text entry label */
		`TextEntry(`id(`key), _("&Encryption Key"), Lan::wl_key),
		`VSpacing(0.2),
		/* Text entry label */
		`TextEntry(`id(`nick), _("Nic&k Name"), Lan::wl_nick),
		`VSpacing(1)
		), `HSpacing(2))),
	    `VSpacing(0.5),
	    `HBox(
		/* PushButton label */
		`PushButton(`id(`expert), _("E&xpert Settings")),
		`HSpacing(0.5),
		multikeys
	     ),
	    `VSpacing(0.5)
	),
	`HSpacing(4)
    );

    Wizard::SetContentsButtons(caption, contents, helptext,
	    Label::BackButton(), Label::OKButton());

    // UI::ChangeWidget(`id(`keys), `Enabled, false);

    any ret = nil;
    while(true) {
	ret = UI::UserInput();

	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `back) {
	    break;
	}
	else if(ret == `next || ret == `expert || ret == `keys) {

	    string essid = (string) UI::QueryWidget(`id(`essid), `Value);
	    if(essid != "" && size(essid) > 32) {
		/* Popup text */
		Popup::Error(_("The network name must be shorter than 32 characters."));
		UI::SetFocus(`id(`key));
		continue;
	    }

	    /* Key is either:
	     *   s:AAAAA (5 ascii chars or more) or
	     *   XXXX-XXXX-XX or XXXXXXXXXX (10 or more hex digits)
	     */
	    string key = (string) UI::QueryWidget(`id(`key), `Value);
	    if(key != "") {

		if(regexpmatch(key, "^s:.{5,}$")) break;
		if(regexpmatch(key, "^[0-9A-Fa-f]{10,}$")) break;

		string h = "[0-9A-Fa-f]";
		if(size(key) < 12 || !regexpmatch(key, "^"+h+"{4}"+"(-"+h+"{4}){1,}-"+h+"{1,4}$")) {
		    /* Popup text */
		    Popup::Error(_("The encryption key is invalid."));
		    UI::SetFocus(`id(`key));
		    continue;
		}
	    }
	    else {
		/* Popup text */
		string pop = _("Using no encryption is a security risk!
Really continue?");
		if(!Popup::YesNo(pop)) {
		    UI::SetFocus(`id(`key));
		    continue;
		}
	    }
	    break;
	}
	else {
	    y2error("Unexpected return code: %1", ret);
	    continue;
	}
    }

    if(ret == `next || ret == `expert || ret == `keys) {
	Lan::wl_essid = (string) UI::QueryWidget(`id(`essid), `Value);
	Lan::wl_nick = (string) UI::QueryWidget(`id(`nick), `Value);
	Lan::wl_nwid = (string) UI::QueryWidget(`id(`nwid), `Value);
	Lan::wl_mode = (string) UI::QueryWidget(`id(`mode), `Value);
	Lan::wl_key = (string) UI::QueryWidget(`id(`key), `Value);
    }

    return ret;
}

/**
 * Wireless expert configuration dialog
 * @return dialog result
 */
define any WirelessExpertDialog() ``{

    ScreenName("lan-hardware-wireless-expert");

    /* Wireless expert dialog caption */
    string caption = _("Wireless Expert Settings");

    /* Wireless expert dialog help 1/5 */
    string helptext = _("<p>Here, set additional configuration parameters
(rarely needed).</p>") +

    /* Wireless expert dialog help 2/5 */
    _("<p>If you want to use your wireless LAN card in master or ad-hoc mode,
you can set the <b>Channel</b> the card should use here. This is not needed
for managed mode, the card will hop through the channels searching for access
points in that case.</p>") +

    /* Wireless expert dialog help 3/5 */
_("<p>In some rare cases, you may want to set a transmission
<b>Bit Rate</b> explicitly. The default is to go as fast as possible.</p>") +

    /* Wireless expert dialog help 4/5 */
_("<p>In an environment with multiple <b>Access Points</b>, you may want to
define the one to which to connect by entering its MAC address.</p>") +

    /* Wireless expert dialog help 5/5 */
_("<p>You can <b>Use Power Management</b> to enable power saving mechanisms.
This is generally a good idea, especially if you are a notebook user and may
be disconnected from AC power.</p>");

    string helpunused =
    /* Wireless expert dialog help 2b/5 */
    _("<p>If you would prefer to specify the <b>Frequency</b> instead of
the channel, do this by selecting the desired value.</p>");

    /* Combobox label */
    term freq = `ComboBox(`id(`frequency), `opt(`hstretch), _("&Frequency"), [
	/* Combobox item */
	`item(`id("Automatic"), _("Automatic"), Lan::wl_frequency == ""),
	`item(`id("Automatic"), "FIXME: ASK jg@suse.de", Lan::wl_frequency != ""),
     ]);

    list channels = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" ];
    if(Lan::wl_channel != "" && !contains(channels, Lan::wl_channel))
	channels = prepend(channels, Lan::wl_channel);
    /* Combobox item */
    channels = prepend(channels, `item(`id(""), _("Automatic")));

    list bitrates = [ "54", "48", "36", "24", "18", "12", "11", "9", "6", "5.5", "2", "1" ];
    if(Lan::wl_bitrate != "" && !contains(bitrates, Lan::wl_bitrate))
	bitrates = prepend(bitrates, Lan::wl_bitrate);
    /* Combobox item */
    bitrates = prepend(bitrates, `item(`id(""), _("Automatic")));

    list b = [];

    /* Wireless expert dialog contents */
    term contents = `HBox(
	`HSpacing(4),
	`VBox(
	    `VSpacing(0.5),
	    /* Frame label */
	    `Frame(_("Wireless Expert Settings"), `HBox(`HSpacing(2), `VBox(
		`VSpacing(1),
		/* Combobox label */
		`ComboBox(`id(`channel), `opt(`hstretch), _("&Channel"), channels),
		`VSpacing(0.2),
		/* Combobox label */
		`ComboBox(`id(`bitrate), `opt(`hstretch), _("B&it Rate"), bitrates),
		`VSpacing(0.2),
		/* Text entry label */
		`TextEntry(`id(`accesspoint), _("&Access Point"), Lan::wl_accesspoint),
		`VSpacing(0.2),
		/* CheckBox label */
		`Left(`CheckBox(`id(`power), _("Use &Power Management"), Lan::wl_power == true)),
		`VSpacing(1)
		), `HSpacing(2))),
	    `VSpacing(0.5)
	),
	`HSpacing(4)
    );

    Wizard::SetContentsButtons(caption, contents, helptext,
	    Label::BackButton(), Label::OKButton());

    UI::ChangeWidget(`id(`bitrate), `Value, Lan::wl_bitrate);
    UI::ChangeWidget(`id(`channel), `Value, Lan::wl_channel);

    any ret = nil;
    while(true) {
	ret = UI::UserInput();

	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `back) {
	    break;
	}
	else if(ret == `next) {
	    /* Check */
	    break;
	}
	else {
	    y2error("Unexpected return code: %1", ret);
	    continue;
	}
    }

    if(ret == `next) {
	Lan::wl_channel = (string) UI::QueryWidget(`id(`channel), `Value);
	Lan::wl_frequency = (string) UI::QueryWidget(`id(`frequency), `Value);
	Lan::wl_bitrate = (string) UI::QueryWidget(`id(`bitrate), `Value);
	Lan::wl_accesspoint = (string) UI::QueryWidget(`id(`accesspoint), `Value);
	Lan::wl_power = (boolean) UI::QueryWidget(`id(`power), `Value) == true;
    }

    return ret;
}

/**
 * Wireless expert configuration dialog
 * @return dialog result
 */
define any WirelessKeysDialog() ``{

    ScreenName("lan-hardware-wireless-keys");

    /* Wireless keys dialog caption */
    string caption = _("Wireless Keys");

    /* Wireless keys dialog help 1/3 */
    string helptext = _("<p>In this dialog, define your WEP keys used
to encrypt your data before it is transmitted. You can have up to four keys,
although only one key is used to encrypt the data. This is the default key.
The other keys can be used to decrypt data. Usually you have only
one key.</p>") +

    /* Wireless keys dialog help 2/3 */
    _("<p><b>Key Length</b> defines the bit length of your WEP keys.
Possible are 64 and 128 bit, sometimes also referred to as 40 and 104 bit.
Some older hardware might not be able to handle 128 bit keys, so if your
wireless LAN connection does not establish, you may need to set this
value to 64.</p>") +

    /* Wireless keys dialog help 3/3 */
    _("<p>The <b>Authentication Mode</b> defines the behavior of your card when
using encryption. <b>Open</b> mode means that no authentication is performed.
<b>Shared Key</b> mode means that shared key authentication gets done if
needed.</p>") +

    /* Wireless keys dialog help 3/3 */
    _("<p>NOTE: Shared key authentication makes it easier for a potential
attacker to break into your network. Unless you have specific needs for shared
key authentication, use the <b>Open</b> mode.</p>");

    /* Wireless keys dialog contents */
    term contents = `HBox(
	`HSpacing(5),
	`VBox(
	    `VSpacing(2),
	    /* Frame label */
	    `Frame(_("WEP Keys"), `HBox(`HSpacing(3), `VBox(
		`VSpacing(1),
		/* ComboBox label */
		`Left(`ComboBox(`id(`length), _("&Key Length"), ["128","64"])),
		`VSpacing(0.2),
		/* ComboBox label */
		`Left(`ComboBox(`id(`authmode), _("&Authentication Mode"), [
		    /* ComboBox item */
		    _("Open"),
		    /* ComboBox item */
		    _("Shared Key"),
		])),
		`VSpacing(1),
		`Table(`id(`table), `opt(`notify), `header(
                    /* Table header label */
                    _("Nr."),
                    /* Table header label */
                    _("Key"),
                    /* Table header label */
                    _("Default")), []),
		`HBox(
		    /* PushButton label */
		    `PushButton(`id(`edit), `opt(`disabled), Label::EditButton()),
		    /* PushButton label */
		    `PushButton(`id(`delete), `opt(`disabled), Label::DeleteButton()),
		    /* PushButton label */
		    `PushButton(`id(`default), _("&Set as Default"))),
		`VSpacing(1)
		), `HSpacing(3))),
	    `VSpacing(2)
	),
	`HSpacing(5)
    );

    Wizard::SetContentsButtons(caption, contents, helptext,
	    Label::BackButton(), Label::OKButton());

    any ret = nil;
    while(true) {
	ret = UI::UserInput();

	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `back) {
	    break;
	}
	else if(ret == `next) {

	    /* Key is either:
	     *   s:AAAAA (5 ascii chars or more) or
	     *   XXXX-XXXX-XX or XXXXXXXXXX (10 or more hex digits)
	     */
	    string key = (string) UI::QueryWidget(`id(`key), `Value);
	    if(key != "") {

		if(regexpmatch(key, "^s:.{5,}$")) break;
		if(regexpmatch(key, "^[0-9A-Fa-f]{10,}$")) break;

		string h = "[0-9A-Fa-f]";
		if(size(key) < 12 || !regexpmatch(key, "^"+h+"{4}"+"(-"+h+"{4}){1,}-"+h+"{1,4}$")) {
		    /* Popup text */
		    Popup::Error(_("The encryption key is invalid."));
		    UI::SetFocus(`id(`key));
		    continue;
		}
	    }

	    break;
	}
	else {
	    y2error("Unexpected return code: %1", ret);
	    continue;
	}
    }

    if(ret == `next) {
	Lan::wl_essid = (string) UI::QueryWidget(`id(`essid), `Value);
	Lan::wl_nick = (string) UI::QueryWidget(`id(`nick), `Value);
	Lan::wl_nwid = (string) UI::QueryWidget(`id(`nwid), `Value);
	Lan::wl_mode = (string) UI::QueryWidget(`id(`mode), `Value);
	Lan::wl_key = (string) UI::QueryWidget(`id(`key), `Value);
    }

    return ret;
}

/* EOF */
}
