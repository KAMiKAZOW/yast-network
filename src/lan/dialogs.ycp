/**
 * File:	include/network/lan/dialogs.ycp
 * Package:	Configuration of network
 * Summary:	Summary, overview and IO dialogs for network cards config
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

textdomain "network";

import "Lan";

import "Wizard";
import "Wizard_hw";

include "ui/common_popups.ycp";
include "ui/common_messages.ycp";

include "network/routines.ycp";
include "network/lan/helps.ycp";

/**
 * Return a modification status
 * @return true if data was modified
 */
global define boolean Modified() ``{
    return Lan::Modified() || DNS::modified || Routing::modified;
}

/**
 * Commit changes to internal structures
 * @return always `next
 */
global define symbol Commit() ``{
    Lan::Commit();
    return `next;
}

/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
global define symbol ReadDialog() ``{

    /* Network read dialog help 1/2 */
    string help = _("<p><b><big>Initializing network card
configuration</big></b><br>Please wait...<br></p>") +

    /* Network read dialog help 2/2 */
_("<p><b><big>Aborting the initialization:</big></b><br>
Safely abort the configuration utility by pressing <B>Abort</B> now.</p>");

    Wizard::RestoreHelp(help);
    Lan::AbortFunction = ``{return PollAbort();};
    boolean ret = Lan::Read();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
global define symbol WriteDialog() ``{
    if(!Modified()) return `next;

    /* Network write dialog help 1/2 */
    string help = _("<p><b><big>Saving network card
configuration</big></b><br>Please wait...<br></p>") +

    /* Network write dialog help 2/2 */
_("<p><b><big>Aborting saving:</big></b><br>
Abort saving by pressing <b>Abort</b>.</p>");

    Wizard::RestoreHelp(help);
    Lan::AbortFunction = ``{return PollAbort() && ReallyAbort();};
    boolean ret = Lan::Write();
    return ret ? `next : `abort;
}

/**
 * Main dialog
 * @return dialog result
 */
global define symbol SummaryDialog() ``{

    string caption = _("Network cards configuration");

    /* Network summary dialog help 1/3 */
    string help = _("<p><b><big>Network card setup</big></b><br>
Configure your network card here.<br></p>") +

    /* Network summary dialog help 2/3 */
_("<p><b><big>Adding a network card:</big></b><br>
Choose a network card from the list of detected network cards.
If your network card was not autodetected, select <b>Other (not detected)</b>
then press <b>Configure</b>.</p>") +

    /* Network summary dialog help 3/3 */
_("<p><b><big>Editing or deleting:</big></b><br>
If you press <b>Edit</b>, an additional dialog in which
to change the configuration opens.</p>");

    list summary = Lan::Summary(true);
    list unconfigured = select(summary, 1, []);
    string configured = select(summary, 0, "");

    y2debug("unconfigured=%1",unconfigured);
    term contents = Wizard_hw::DetectedContent(_("Network cards to configure"),
	    unconfigured, false, configured);

    Wizard::SetContentsButtons(caption, contents, help,
	    BackButtonLabel(), FinishButtonLabel());

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	/* overview dialog */
	else if(ret == `edit_button) {
	    ret = `overview;
	    break;
	}
	/* configure the selected card */
	else if(ret == `configure_button) {
	    Lan::AddEdit("");
	    any selected = UI::QueryWidget(`id(`detected_selbox), `CurrentItem);
	    if(selected == `other) {
		ret = `other;
	    }
	    else {
		Lan::Select(selected);
		ret = `configure;
	    }
	    break;
	}
	else if(ret == `next || ret == `back) {
	    break;
	}
	else {
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }

    return ret;
}

/**
 * Overview dialog
 * @return dialog result
 */
global define symbol OverviewDialog() ``{

    string caption = _("Network cards configuration overview");

    /* Network overview dialog help 1/3 */
    string help = _("<p><b><big>Network card overview</big></b><br>
Obtain an overview of installed network cards. Additionally,
edit their configuration.<br></p>") +

    /* Network overview dialog help 2/3 */
_("<p><b><big>Adding a network card:</big></b><br>
Press <b>Add</b> to configure a new network card manually.</p>") +

    /* Network overview dialog help 3/3 */
_("<p><b><big>Editing or deleting:</big></b><br>
Choose a network card to change or remove.
Then press <b>Edit</b> or <b>Delete</b> as desired.</p>");

    list overview = Lan::Overview();
    y2debug("overview=%1",overview);

    /* Header of table with installed cards */
    term contents = Wizard_hw::ConfiguredContent(
	    `header(_("No."), _("Type"), _("Device"), /*_("Active"),*/ _("IP Address")/*, "PCMCIA", "Driver"*/),
	    overview, nil, nil, nil, nil);

    contents = Wizard_hw::SpacingAround(contents, 1.5, 1.5, 1.0, 1.0);

    Wizard::SetContentsButtons(caption, contents, help,
	    BackButtonLabel(), FinishButtonLabel());

    if(size(overview) < 1) {
	UI::ChangeWidget(`id(`edit_button), `Enabled, false);
	UI::ChangeWidget(`id(`delete_button), `Enabled, false);
    }

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	/* add */
	else if(ret == `add_button) {
	    Lan::AddEdit("");
	    ret = `add;
	    break;
	}
	/* edit */
	else if(ret == `edit_button) {
	    string dev = UI::QueryWidget(`id(`table), `CurrentItem);
	    Lan::AddEdit(dev);
	    ret = `edit;
	    break;
	}
	/* delete */
	else if(ret == `delete_button) {
	    string dev = UI::QueryWidget(`id(`table), `CurrentItem);
	    Lan::Delete(dev);
	    Lan::Commit();
	    overview = Lan::Overview();
	    UI::ChangeWidget(`id(`table), `Items, overview);
	    if(size(overview) < 1) {
		UI::ChangeWidget(`id(`edit_button), `Enabled, false);
		UI::ChangeWidget(`id(`delete_button), `Enabled, false);
	    }
	    y2debug("overview=%1",overview);
	    continue;
	}
	else if(ret == `next || ret == `back) {
	    break;
	}
	else {
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }

    return ret;
}

/* EOF */
}
