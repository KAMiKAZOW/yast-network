/**
 * File:	include/network/lan/manual.ycp
 * Package:	Network configuration
 * Summary:	Network card adresss configuration dialogs
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

textdomain "network";

import "Arch";
import "Lan";
import "Wizard";

include "ui/common_popups.ycp";
include "ui/common_messages.ycp";

include "network/routines.ycp";
include "network/ip.ycp";

/**
 * Dialog for setting up IP address
 * @return dialog result
 */
global define symbol AddressDialog() ``{

    ScreenName("lan-address");

    /* Address dialog caption */
    string caption = _("Network address setup");

    /* Address dialog help 1/8 */
    string help = _("<p>Configure your IP address.</p>") +

    /* Address dialog help 2/8 */
    _("<p>You can select dynamic address assignment, if you have a
<b>DHCP server</b> running on your local network.</p>") +

    /* Address dialog help 3/8 */
    _("<p>Also select this if you do not have a static IP address assigned
by the system administrator or your cable or DSL provider.</p>") +

    /* Address dialog help 4/8 */
    _("<p>Network addresses will then be obtained <b>automatically</b>
from the server.</p>") +

    /* Address dialog help 5/8 */
    _("<p>Clicking <b>Next</b> completes the configuration.</p>") +

    /* Address dialog help 6/8 */
    _("<p>Otherwise, network addresses must be assigned <b>manually</b>.</p>") +

    /* Address dialog help 7/8 */
    _("<p>Enter the IP address (e.g., 192.168.100.99) for your computer,
the network mask (usually 255.255.255.0), and, optionally, the default gateway
IP address.</p>") +

    /* Address dialog help 8/8 */
    _("<p>Contact your <b>network administrator</b> for more information about
the network configuration.</p>");

    string bootproto = Lan::bootproto;
    string ipaddr = Lan::ipaddr;
    string remoteip = Lan::remoteip;
    string netmask = Lan::netmask;
    string type = Lan::type;
    string device = "";

    if(!Arch::s390 && bootproto == "static" && ipaddr == "")
	bootproto = "dhcp";

    if(ipaddr == "" && netmask == "")
	netmask = "255.255.255.0";

    if(Lan::device == "")
	/* Label text (Network device: unknown device) */
	device = _("Unknown device");
    else
	device = RealType(Lan::type, Lan::hotplug) + Lan::device;

    if(Lan::alias != "") {
	device = device + ":" + Lan::alias;
	bootproto = "static";
    }

    term label = `HBox(
	/* Label text */
	`Label(_("Network device")),
	`HSpacing(0.5),
	`Label(`opt(`outputField), device)
    );

    /* Allow to edit the device (#17346) * /
    if(Lan::operation == `add)
	label = `ComboBox(`id(`num), `opt(`hstretch),
		_("N&etwork device"),
		maplist(integer d, Lan::FreeDevices(RealType), ``(
		    sformat("%1%2",type,d)
		)));

    Moved to lan/hardware.ycp */

    /* Frame label */
    term frame1 = `Frame(_("Choose the setup method"),
	`RadioButtonGroup(`id(`rb), `HBox(`HSpacing(1),
	    `VBox(
		`VSpacing(0.5),
		/* Radio button label */
		`Left(`RadioButton(`id(`dhcp), `opt(`notify), _("A&utomatic address setup (via DHCP)"), bootproto == "dhcp")),
		`VSpacing(0.4),
		/* Radio button label */
		`Left(`RadioButton(`id(`static), `opt(`notify), _("S&tatic address setup"), bootproto == "static")),
		`HBox(
		    /* Text entry label for IP address */
		    `TextEntry(`id(`ipaddr), _("&IP Address"), ipaddr),
		    `HSpacing(2),
		    /* Text entry label for network mask */
		    `TextEntry(`id(`netmask), _("&Subnet mask"), netmask)
		),
		`VSpacing(0.5)
	    ),
	`HSpacing(1)))
    );

    if(Arch::s390) {

    /* Address dialog help 1/8 */
    help = _("<p>Configure your IP address.</p>");

    if(!Arch::s390)
    /* Address dialog help 2/8 */
    help = help + _("<p>You can select dynamic address assignment,
if you have a <b>DHCP server</b> running on your local network.</p>") +

    /* Address dialog help 3/8 */
_("<p>Also select this if you do not have a static
IP address assigned by the system administrator or your cable or DSL provider.
</p>") +

    /* Address dialog help 4/8 */
_("<p>Network addresses will then be obtained
<b>automatically</b> from the server.</p>") +

    /* Address dialog help 5/8 */
_("<p>Otherwise, network addresses must be assigned
<b>manually</b>.</p>");

    if(type == "ctc" || type == "escon" || type == "iucv")
    /* Address dialog help 6/8 */
help = help + _("<p>Enter the <b>IP Address</b> (e.g., 192.168.100.99)
for your computer and the <b>Remote IP Address</b> (e.g., 192.168.100.254)
of your peer.</p>");

    else
    /* Address dialog help 6/8 */
    help = help + _("<p>Enter the IP address (e.g., 192.168.100.99) for
your computer, the network mask (usually 255.255.255.0), and, optionally, the
default gateway IP address.</p>");

    /* Address dialog help 7/8 */
    help = help + _("<p>Contact your <b>network administrator</b>
for more information about the network configuration.</p>") +

    /* Address dialog help 8/8 */
_("<p>Clicking <b>Next</b> 
completes the configuration.</p>");

    /* s390 help hackery */
    }

    /* S/390 Hipersockets or virtual alias */
    if(type == "hsi" || Arch::s390 || Lan::alias != "")

	/* Frame label */
	frame1 = `Frame(_("Static Address Setup"),
	    `VBox(
		`VSpacing(0.5),
		`HBox(
		    /* Text entry label */
		    `TextEntry(`id(`ipaddr), _("&IP Address"), ipaddr),
		    `HSpacing(2),
		    /* Text entry label */
		    `TextEntry(`id(`netmask), _("&Subnet mask"), netmask)
		),
		`VSpacing(0.5)
	    ));


    /* S/390 CTC, ESCON and IUCV */
    if(type == "ctc" || type == "escon" || type == "iucv")

	/* Frame label */
	frame1 = `Frame(_("Static Address Setup"),
	    `VBox(
		`VSpacing(0.5),
		`HBox(
		    /* Text entry label */
		    `TextEntry(`id(`ipaddr), _("&IP Address"), ipaddr),
		    `HSpacing(2),
		    /* Text entry label */
		    `TextEntry(`id(`remoteip), _("R&emote IP Address"), remoteip)
		),
		`VSpacing(0.5)
	    ));

    /* Push button label */
    term HardwareButton = `PushButton(`id(`hardware), `opt(`hstretch), _("H&ardware Details"));
    if(Lan::operation == `add && Lan::unique == "")
	HardwareButton = `VSpacing(0);

    /* Frame label */
    term frame2 = `Frame(_("Detailed settings"), `HBox(`HStretch(),
	`HSquash(`VBox(
	    `VSpacing(0.4),
	    /* Push button label */
	    `PushButton(`id(`hostname), `opt(`hstretch), _("&Host name and name server")),
	    /* Push button label */
	    `PushButton(`id(`routing), `opt(`hstretch), _("R&outing")),
	    HardwareButton,
	    /*
	    Lan::wireless?
		`PushButton(`id(`wire), `opt(`hstretch), _("Wireless &settings"))
		:`VSpacing(0), */
	    `VSpacing(0.4)
	)),
	`HStretch()
    ));

    /* Address dialog help */
    term contents = `HSquash(`VBox(
	`Left(label),
	`VSpacing(1),
	frame1,
	`VSpacing(1),
	frame2
    ));

    Wizard::SetContentsButtons(caption, contents, help,
	    BackButtonLabel(), NextButtonLabel());

    UI::ChangeWidget(`id(`ipaddr), `Enabled, bootproto == "static");
    ChangeWidgetIfExists(`id(`netmask), `Enabled, bootproto == "static");
    ChangeWidgetIfExists(`id(`dhcp), `Value, bootproto == "dhcp");
    ChangeWidgetIfExists(`id(`static), `Value, bootproto == "static");

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	/* static ip address */
	else if(ret == `dhcp) {
	    UI::ChangeWidget(`id(`ipaddr), `Enabled, false);
	    ChangeWidgetIfExists(`id(`netmask), `Enabled, false);
	    ChangeWidgetIfExists(`id(`remoteip), `Enabled, false);
	    continue;
	}
	/* dynamic ip address via dhcp */
	else if(ret == `static) {
	    UI::ChangeWidget(`id(`ipaddr), `Enabled, true);
	    ChangeWidgetIfExists(`id(`netmask), `Enabled, true);
	    ChangeWidgetIfExists(`id(`remoteip), `Enabled, true);
	    continue;
	}
	/* netmask from bits to IP mapping */
	else if(ret == `netmask) {
	    string nm = UI::QueryWidget(`id(`netmask), `Value);
	    if(regexpmatch(nm, "^[0-9]+$"))
		UI::ChangeWidget(`id(`netmask), `Value, bits2netmask(tointeger(nm)));
	    continue;
	}
	/* back */
	else if(ret == `back) {
	    break;
	}
	/* FIXME: better hostname and routing workflow */
	else if(ret == `next || ret == `routing || ret == `hostname || ret == `hardware) {

	    y2debug("bootproto=%1", bootproto);
	    if(UI::WidgetExists(`id(`rb))) {
		if(UI::QueryWidget(`id(`rb), `CurrentButton) == `dhcp)
		    bootproto = "dhcp";
		else if(UI::QueryWidget(`id(`rb), `CurrentButton) == `static)
		    bootproto = "static";
		else
		    bootproto = "";
	    }

	    y2debug("bootproto=%1", bootproto);
	    if(bootproto == "static") {
		if(!check_ip4(UI::QueryWidget(`id(`ipaddr), `Value))) {
		    /* Popup text */
		    UI::ErrorPopup(_("The IP address is incorrect"));
		    UI::SetFocus(`id(`ipaddr));
		    continue;
		}
		if(UI::WidgetExists(`id(`remoteip)) && !check_ip4(UI::QueryWidget(`id(`remoteip), `Value))) {
		    /* Popup text */
		    UI::ErrorPopup(_("The remote IP address is invalid."));
		    UI::SetFocus(`id(`remoteip));
		    continue;
		}
		if(UI::WidgetExists(`id(`netmask)) && !check_netmask(UI::QueryWidget(`id(`netmask), `Value))) {
		    /* Popup text */
		    UI::ErrorPopup(_("The subnet mask is incorrect"));
		    UI::SetFocus(`id(`netmask));
		    continue;
		}
	    }
	    break;
	}
	else {
	    y2error("Unexpected retcode: %1", ret);
	    continue;
	}

    }

    /* update the configuration */
    if(ret == `next || ret == `routing || ret == `hostname || ret == `hardware) {

	Lan::bootproto = bootproto;
	Lan::ipaddr = UI::QueryWidget(`id(`ipaddr), `Value);

	Lan::netmask = QueryWidgetIfExists(`id(`netmask), `Value, Lan::netmask);
	Lan::remoteip = QueryWidgetIfExists(`id(`remoteip), `Value, Lan::remoteip);

	// not used any more
	if(UI::WidgetExists(`id(`num))) {
	    string uidev = sformat("%1", UI::QueryWidget(`id(`num), `Value));
	    y2milestone("num=%1", device_num(uidev));
	    Lan::device = device_num(uidev);
	}
    }

    if(ret == `routing)
	Routing::SetDevices(Lan::GetDevices("all"));

    return ret;
}

/* EOF */
}
