/**
 * File:	include/network/lan/manual.ycp
 * Package:	Configuration of network
 * Summary:	Network card adresss configuration
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 * Dialogs definitions.
 */

{

textdomain "network";

import "Wizard";
import "Lan";

include "ui/common_popups.ycp";
include "ui/common_messages.ycp";

include "network/routines.ycp";
include "network/ip.ycp";

/**
 * Dialog for setting up IP address
 * @return dialog result
 */
global define symbol AddressDialog() ``{

    /* Address dialog caption */
    string caption = _("Network address setup");

    /* Address dialog help 1/8 */
    string helptext = _("<p>Configure your IP address.</p>");

    /* Address dialog help 2/8 */
    helptext = helptext + _("<p>You can select dynamic address assignment,
if you have a <b>DHCP server</b> running on your local network.</p>");

    /* Address dialog help 3/8 */
    helptext = helptext + _("<p>Also select this if you do not have a static
IP address assigned by the system administrator or your cable or DSL provider.
</p>");

    /* Address dialog help 4/8 */
    helptext = helptext + _("<p>Network addresses will then be obtained
<b>automatically</b> from the server.</p>");

    /* Address dialog help 5/8 */
    helptext = helptext + _("<p>Clicking <b>Next</b> 
completes the configuration.</p>");

    /* Address dialog help 6/8 */
    helptext = helptext + _("<p>Otherwise,  network addresses must be assigned
<b>manually</b>.</p>");

    /* Address dialog help 7/8 */
    helptext = helptext + _("<p>Enter the IP address (e.g., 192.168.100.99) for
your computer, the network mask (usually 255.255.255.0), and, optionally, the
default gateway IP address.</p>");

    /* Address dialog help 8/8 */
    helptext = helptext + _("<p>Contact your <b>network administrator</b>
for more information about the network configuration.</p>");

    string bootproto = Lan::bootproto;
    string ipaddr = Lan::ipaddr;
    string netmask = Lan::netmask;
    string type = Lan::type;
    string device = "";

    if(bootproto == "static" && ipaddr == "")
	bootproto = "dhcp";

    if(ipaddr == "" && netmask == "")
	netmask = "255.255.255.0";

    if(Lan::device == -1)
	device = _("Unknown device");
    else
	device = type + Lan::device;

    // Label for radio button group (dynamic/static ip address setup method)
    term label = `HBox(
	`Label(_("Network device")),
	`HSpacing(0.5),
	// Network device: [unknown]
	`Label(`opt(`outputField), device)
	//`ComboBox(`id(`num), `opt(`hstretch,`editable), "", [ "eth1" ])
    );
    //label = `ComboBox(`id(`num), `opt(`hstretch,`editable), _("Network device"), [ "eth1" ]);

    /* Frame label */
    term frame1 = `Frame(_("Choose the setup method"),
	`HBox(`HSpacing(1),
	    `VBox(
		`VSpacing(0.5),
		// Radio button label
		`Left(`RadioButton(`id(`dynamic), `opt(`notify), _("A&utomatic address setup (via DHCP)"), bootproto != "static")),
		`VSpacing(0.5),
		// Radio button label
		`Left(`RadioButton(`id(`static), `opt(`notify), _("S&tatic address setup"), bootproto == "static")),
		`HBox(
		    // Text entry label for IP address
		    `TextEntry(`id(`ipaddr), _("&IP Address"), ipaddr),
		    `HSpacing(2),
		    // Text entry label for network mask
		    `TextEntry(`id(`netmask), _("&Subnet mask"), netmask)
		),
		`VSpacing(0.5)
	    ),
	`HSpacing(1))
    );

    /* Frame label */
    term frame2 = `Frame(_("Detailed settings"), `HBox(`HStretch(),
	`HSquash(`VBox(
	    `VSpacing(0.5),
	    // Push button label
	    `PushButton(`id(`hostname), `opt(`hstretch), _("&Host name and name server")),
	    // Push button label
	    `PushButton(`id(`routing), `opt(`hstretch), _("R&outing")),
	    `VSpacing(0.5)
	)),
	`HStretch()
    ));

    /* Address dialog help */
    term contents = `RadioButtonGroup(`id(`rb), `HSquash(`VBox(
	`Left(label),
	`VSpacing(1),
	frame1,
	`VSpacing(1),
	frame2
    )));

    Wizard::SetContentsButtons(caption, contents, helptext,
	    BackButtonLabel(), NextButtonLabel());

    UI::ChangeWidget(`id(`ipaddr), `Enabled, bootproto=="static");
    UI::ChangeWidget(`id(`netmask), `Enabled, bootproto=="static");
    UI::ChangeWidget(`id(`dynamic), `Value, bootproto!="static");
    UI::ChangeWidget(`id(`static), `Value, bootproto=="static");

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	/* static ip address */
	else if(ret == `dynamic) {
	    UI::ChangeWidget(`id(`ipaddr), `Enabled, false);
	    UI::ChangeWidget(`id(`netmask), `Enabled, false);
	    continue;
	}
	/* dynamic ip address via dhcp */
	else if(ret == `static) {
	    UI::ChangeWidget(`id(`ipaddr), `Enabled, true);
	    UI::ChangeWidget(`id(`netmask), `Enabled, true);
	    continue;
	}
	/* netmask from bits to IP mapping */
	else if(ret == `netmask) {
	    string nm = UI::QueryWidget(`id(`netmask), `Value);
	    if(regexpmatch(nm, "^[0-9]+$"))
		UI::ChangeWidget(`id(`netmask), `Value, bits2netmask(tointeger(nm)));
	    continue;
	}
	/* back */
	else if(ret == `back) {
	    break;
	}
	/* FIXME: better hostname and routing workflow */
	else if(ret == `next || ret == `routing || ret == `hostname) {
	    if(UI::QueryWidget(`id(`rb), `CurrentButton) != `dynamic) {
		if(!check_ip4(UI::QueryWidget(`id(`ipaddr), `Value))) {
		    UI::ErrorPopup(_("The IP address is incorrect"));
		    UI::SetFocus(`id(`ipaddr));
		    continue;
		}
		if(!check_netmask(UI::QueryWidget(`id(`netmask), `Value))) {
		    UI::ErrorPopup(_("The subnet mask is incorrect"));
		    UI::SetFocus(`id(`netmask));
		    continue;
		}
	    }
	    break;
	}
	else {
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}

    }

    /* update the configuration */
    if(ret == `next || ret == `routing || ret == `hostname) {
	Lan::ipaddr = UI::QueryWidget(`id(`ipaddr), `Value);
	Lan::netmask = UI::QueryWidget(`id(`netmask), `Value);
	if(UI::QueryWidget(`id(`rb), `CurrentButton) == `dynamic)
	    Lan::bootproto = "dhcp";
	else
	    Lan::bootproto = "static";
    }

    return ret;
}

/* EOF */
}
