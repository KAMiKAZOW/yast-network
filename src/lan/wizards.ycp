/**
 * File:
 *   include/network/lan/wizards.ycp
 *
 * Package:
 *   Configuration of network cards
 *
 * Summary:
 *   User interface functions.
 *
 * Authors:
 *   Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 * Wizards definitions.
 *
 */

{

textdomain "network";

import "Wizard";
import "Wizard_hw";
import "Progress";
import "Lan";

include "ui/common_popups.ycp";
include "ui/common_messages.ycp";
include "wizard/sequencer.ycp";

include "network/routines.ycp";

include "network/lan/manual.ycp";
include "network/lan/address.ycp";
//include "network/lan/summary.ycp";
include "network/lan/helps.ycp"; // remove

/**
 * Whole configuration of network
 * @return sequence result
 */
global define symbol LanSequence() ``{

    map aliases = $[
	"read"	: [ ``( ReadDialog() ), true ],
	"main"	:   ``( MainSequence() ),
	"write"	: [ ``( WriteDialog() ), true ]
    ];

    map sequence = $[
	"ws_start" : "read",
	"read" :
	$[
	    `abort	: `abort,
	    `next	: "main"
	],
	"main" :
	$[
	    `abort	: `abort,
	    `next	: "write"
	],
	"write" : $[
	    `abort	: `abort,
	    `next	: `next
	]
    ];

    string caption = _("Network cards configuration");
    term contents = `Label(_("Initializing ..."));

    Wizard::CreateDialog();
    Wizard::SetContentsButtons(caption, contents, "",
				BackButtonLabel(), NextButtonLabel());

    symbol ret = WizardSequencer(aliases, sequence);

    UI::CloseDialog();
    return ret;
}

/**
 * Whole configuration of network but without reading and writing.
 * For use with autoinstallation.
 * @return sequence result
 */
global define symbol LanAutoSequence() ``{
    string caption = _("Network cards configuration");
    term contents = `Label(_("Initializing ..."));

    Wizard::CreateDialog();
    Wizard::SetContentsButtons(caption, contents, "",
				BackButtonLabel(), NextButtonLabel());

    symbol ret = MainSequence();

    UI::CloseDialog();
    return ret;
}

/**
 * Main workflow of the network configuration
 * @return sequence result
 */
global define symbol MainSequence() ``{

    map aliases = $[
	"summary"	: ``( SummaryDialog() ),
	"overview"	: ``( OverviewDialog() ),
	"configure"	: ``(AddressDialog()),
	"other"		: [ ``( ManualSequence() ), true ],
	"add"		: [ ``( ManualSequence() ), true ],
	"edit"		: ``(AddressDialog()),
	"delete"	: ``(DeleteDialog())
    ];

    map sequence = $[
	"ws_start" : "summary",
	"summary" : $[
	    `abort	: `abort,
	    `next	: `next,
	    `configure	: "configure",
	    `other	: "other",
	    `edit	: "overview"
	],
	"overview" : $[
	    `abort	: `abort,
	    `next	: `next,
	    `add	: "add",
	    `edit	: "edit",
	    `delete	: "delete"
	],
	"other" : $[
	    `abort	: `abort,
	    `next	: "summary",
	],
	"configure" : $[
	    `abort	: `abort,
	    `next	: "summary",
	],
	"add" : $[
	    `abort	: `abort,
	    `next	: "overview",
	],
	"edit" : $[
	    `abort	: `abort,
	    `next	: "overview",
	],
	"delete" : $[
	    `abort	: `abort,
	    `next	: "overview",
	],
    ];

    return WizardSequencer(aliases, sequence);
}

/**
 * Configuration sequence
 * @return sequence result
 */
global define symbol ManualSequence() ``{

    map aliases = $[
	"manual"	: ``(ManualDialog()),
	"address"	: ``(AddressDialog()),
	"list"		: ``(ManualSelection())
    ];

    map sequence = $[
	"ws_start"	: "manual",
	"manual" : $[
	    `abort	: `abort,
	    `list	: "list",
	    `next	: "address",
	],
	"list" : $[
	    `ok		: "manual",
	    `abort	: `abort,
	],
	"address" : $[
	    `abort	: `abort,
	    `next	: `next,
	],
    ];

    return WizardSequencer(aliases, sequence);
}

/**
 * Return a modification status
 * @return true if data was modified
 */
global define boolean Modified() ``{
    return Lan::Modified();
}

/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
global define symbol ReadDialog() ``{
    Wizard::RestoreHelp(ReadDialogHelp());
    //Lan::AbortFunction = ``(PollAbort());
    boolean ret = Lan::Read();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
global define symbol WriteDialog() ``{
    Wizard::RestoreHelp(WriteDialogHelp());
    //Lan::AbortFunction = ``(PollAbort());
    boolean ret = Lan::Write();
    return ret ? `next : `abort;
}

/**
 * Main dialog
 * @return dialog result
 */
global define symbol SummaryDialog() ``{

    string caption = _("Network cards configuration");

    list summary = Lan::Summary();
    list configured = select(summary, 0, "");
    string unconfigured = select(summary, 1, []);

    term contents = Wizard_hw::DetectedContent(_("Network cards to configure"),
	    configured, false, unconfigured);

    Wizard::SetContentsButtons(caption, contents, SummaryDialogHelp(),
	    BackButtonLabel(), FinishButtonLabel());

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	/* summary dialog */
	else if(ret == `edit_button) {
	    ret = `edit;
	    break;
	}
	/* configure the selected card */
	else if(ret == `configure_button) {
	    any selected = UI::QueryWidget(`id(`detected_selbox), `CurrentItem);
	    if(selected == `other) {
		Lan::SelectHW(-1);
		ret = `other;
	    }
	    else {
		Lan::SelectHW(selected);
		ret = `configure;
		//ret = `other;
	    }
	    break;
	}
	else if(ret == `next || ret == `back) {
	    break;
	}
	else {
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }

    return ret;
}

/**
 * Delete dialog
 * @return dialog result
 */
global define symbol DeleteDialog() ``{
    return `next;
}

/**
 * Overview dialog
 * @return dialog result
 */
global define symbol OverviewDialog() ``{

    string caption = _("Network cards configuration overview");

    // TODO FIXME: real data for the table
    term contents =
	// For translators: Header of the table with installed cards
	Wizard_hw::ConfiguredContent( `header ( _("Number"),
	// For translators: Header of the table with installed cards
						 _("Lan blah")),
						 [],
						 nil, nil, nil, nil );
    contents = Wizard_hw::SpacingAround( contents, 1.5, 1.5, 1.0, 1.0 );


    Wizard::SetContentsButtons(caption, contents, OverviewDialogHelp(),
	    BackButtonLabel(), FinishButtonLabel());

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	/* add */
	else if(ret == `add_button) {
	    ret = `add;
	    break;
	}
	/* edit */
	else if(ret == `edit_button) {
	    ret = `edit;
	    break;
	}
	/* delete */
	else if(ret == `delete_button) {
	    ret = `delete;
	    break;
	}
	else if(ret == `next || ret == `back) {
	    break;
	}
	else {
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }

    return ret;
}

/* EOF */
}
