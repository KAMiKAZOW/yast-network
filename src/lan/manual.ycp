/**
 * File:	include/network/lan/manual.ycp
 * Package:	Configuration of network
 * Summary:	Manual network card configuration
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 * Dialogs definitions.
 */

{

textdomain "network";

import "Wizard";
import "Lan";

include "ui/common_popups.ycp";
include "ui/common_messages.ycp";

include "network/routines.ycp";

/**
 * Manual network card configuration dialog
 * @return dialog result
 */
global define symbol ManualDialog() ``{

    /* Manual dialog caption */
    string caption = _("Manual network card configuration");

    /* Manual dialog help 1/4 */
    string help = _("<p>Here, set up your networking device.
The values will be written into <i>/etc/modules.conf</i>.</p>")
        +
    /* Manual dialog help 2/4 */
    _("<p>Options for the module should be written in the format
<i>option</i>=<i>value</i>. Each entry should be space separated,
for example, <i>io=220 irq=5</i>. <b>Note:</b> If  two cards are configured
with the same module name, options will be merged while saving.</p>")
        +
    /* Manual dialog help 3/4 */
    _("<p>Get a list of available network cards 
by pressing <b>List</b>.</p>")
	+
    /* Manual dialog help 4/4 */
    _("<p>If you have a <b>PCMCIA</b> network card, click on the PCMCIA check
box, if you have an <b>USB</b> network card, click on the check box USB.</p>");

    string modul = Lan::modul;
    string options = Lan::options;

    boolean wireless = Lan::wireless;
    boolean pcmcia = Lan::pcmcia;
    boolean usb = Lan::usb;

    string type = Lan::type;
    string realtype = type;
    string device = "";

    if(Lan::device == -1)
	device = _("Unknown device");
    else
	device = sformat("%1",Lan::device);

    if(pcmcia) realtype = type + "-pcmcia-";
    else if(usb) realtype = type + "-usb-";

    /* satisfy check_ycp -- don't translate these strings */
    string PCMCIA = "&PCMCIA";
    string USB = "&USB";

    /* Manual dialog contents */
    term contents = `HBox(
	`HSpacing(2),
	// frame label
	`VBox(
	    `VSpacing(0.5),
	    `Frame(_("Network &interface"),`VBox(
		`VSpacing(0.2),
		`HBox(
		    `HSpacing(0.5),
		    // combo box label
		    `ComboBox(`id(`dev), `opt(`hstretch, `notify), _("Network &device"),
			[`item(`id("eth"), "Ethernet", type == "eth"), `item(`id("tr"), "Token-Ring", type == "tr")]),
		    `HSpacing(1.5),
		    `ReplacePoint(`id(`rnum),
			// combo box label
			`ComboBox(`id(`num), `opt(`hstretch), _("D&evice number"),
			    maplist(`d,Lan::FreeDevices(realtype),``(sformat("%1",d))))),
		    `HSpacing(0.5)
		),
		`VSpacing(0.2)
	    )),
	    `VSpacing(0.5),
	    `Frame(_("Wireless support"),`VBox(
	    `VSpacing(0.4),
	    `HBox(
		`HStretch(),
		`HSpacing(0.5),
		`CheckBox(`id(`wireless), `opt(`notify), _("&Wireless device"), wireless),
		`HSpacing(1.5),
		`PushButton(`id(`wire), _("Wireless &settings")),
		`HSpacing(0.5),
		`HStretch()
	    ),
	    `VSpacing(0.4)
	    )),
	    `VSpacing(0.5),
	    // frame label
	    `Frame(_("&Kernel module"), `HBox(`HSpacing(0.5), `VBox(
		`VSpacing(0.4),
		// text entry label
		`TextEntry(`id(`modul), _("&Module name"), modul),
		`VSpacing(0.2),
		// textentry label
		`TextEntry(`id(`options), _("Op&tions"), options),
		`VSpacing(0.4),
		`HBox(
		    `HSpacing(1.5),
		    `CheckBox(`id(`pcmcia), `opt(`notify), PCMCIA, pcmcia),
		    `HSpacing(1.5),
		    `CheckBox(`id(`usb), `opt(`notify), USB, usb),
		    `HSpacing(1.5)
		),
		`VSpacing(0.4)
	    ),`HSpacing(0.5))),
	    `VSpacing(0.4),
	    // button label
	    `PushButton(`id(`list), _("Select from &list")),
	    `VSpacing(0.5)
	    ),
	`HSpacing(2));

    Wizard::SetContentsButtons(caption, contents, help,
	    BackButtonLabel(), NextButtonLabel());

    UI::ChangeWidget(`id(`modul), `Enabled, !(pcmcia||usb));
    UI::ChangeWidget(`id(`options), `Enabled, !(pcmcia||usb));
    UI::ChangeWidget(`id(`list), `Enabled, !(pcmcia||usb));
    UI::ChangeWidget(`id(`wire), `Enabled, wireless);
    UI::ChangeWidget(`id(`num), `Value, device);
    UI::SetFocus(`id(`next));

    any ret = nil;
    while(true) {
	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	/* change device type or pcmcia/usb card? */
	else if(ret == `pcmcia || ret == `usb || ret == `dev) {
	    if(ret == `pcmcia || ret == `usb) {
		pcmcia = UI::QueryWidget(`id(`pcmcia), `Value);
		usb = UI::QueryWidget(`id(`usb), `Value);
		UI::ChangeWidget(`id(`modul), `Enabled, !(pcmcia||usb));
		UI::ChangeWidget(`id(`options), `Enabled, !(pcmcia||usb));
		UI::ChangeWidget(`id(`list), `Enabled, !(pcmcia||usb));
		UI::ChangeWidget(`id(`usb), `Enabled, !pcmcia);
		UI::ChangeWidget(`id(`pcmcia), `Enabled, !usb);
	    }
	    type = UI::QueryWidget(`id(`dev), `Value);
	    if(pcmcia) realtype = type + "-pcmcia-";
	    else if(usb) realtype = type + "-usb-";
	    else realtype = type;

	    list devices = [];
	    devices = maplist(`d,Lan::FreeDevices(realtype),``(sformat("%1",d)));
	    UI::ReplaceWidget(`id(`rnum),`ComboBox(`id(`num), `opt(`hstretch), _("D&evice number"), devices));
	    continue;
	}
	else if(ret == `wireless) {
	    wireless = UI::QueryWidget(`id(`wireless), `Value);
	    UI::ChangeWidget(`id(`wire), `Enabled, wireless);
	    continue;
	}
	else if(ret == `back) {
	    break;
	}
	/* select from the list *//*
	else if(ret == `list) {
	    Lan::type = type;
	    Lan::device = tointeger(UI::QueryWidget(`id(`num), `Value));
	    break;
	} */
	else if(ret == `next || ret == `list || ret == `wire) {
	    /* FIXME: check_* */
	    break;
	}
	else {
	    y2error("Unexpected return code: %1", ret);
	    continue;
	}
    };

    if(ret == `next || ret == `list || ret == `wire) {
	Lan::modul = UI::QueryWidget(`id(`modul), `Value);
	Lan::options = UI::QueryWidget(`id(`options), `Value);
	Lan::device = tointeger(UI::QueryWidget(`id(`num), `Value));
	Lan::wireless = UI::QueryWidget(`id(`wireless), `Value);
	Lan::pcmcia = UI::QueryWidget(`id(`pcmcia), `Value);
	Lan::usb = UI::QueryWidget(`id(`usb), `Value);
	type = UI::QueryWidget(`id(`dev), `Value);
	if(pcmcia) type = type + "-pcmcia-";
	if(usb) type = type + "-usb-";
	Lan::type = type;
    }

    return ret;
}

/**
 * Call back for a manual selection from the list
 * @return dialog result
 */
global define symbol ManualSelection() ``{

    string type = Lan::type;
    if(Lan::wireless) type = "wireless";
    integer selected = 0;

    /* map NetworkCards */
    include "network/lan/cards.ycp";

    list hwlist = lookup(NetworkCards, type, []);
    list cards = hwlist2items(hwlist, 0);

    /* Manual selection caption */
    string caption = _("Manual network card selection");

    /* Manual selection help */
    string helptext = _("<p>Select the network card to configure. Search
for a particular network card by entering the name in the search entry.</p>");

    /* Manual selection contents */
    term contents = `VBox(
	`VSpacing(0.5),
	/* Selection box label */
	`ReplacePoint(`id(`rp), `SelectionBox(`id(`cards), _("Se&lect network card"), cards)),
	`VSpacing(0.5),
	/* Text entry field */
	`TextEntry(`id(`search), `opt(`notify), _("&Search")),
	`VSpacing(0.5)
    );

    Wizard::SetContentsButtons(caption, contents, helptext,
	    BackButtonLabel(), OKButtonLabel());

    any ret = nil;
    while(true) {
	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `search) {

	    string entry = UI::QueryWidget(`id(`search), `Value);

	    list l = filter(`e, cards, ``(tolower(substring(select(e, 1, ""), 0, size(entry))) == tolower(entry)));

	    if(size(entry) == 0) selected = 0;
	    if(size(l) > 0) selected = select(select(select(l, 0, []), 0, []), 0, 0);

	    cards = [];
	    cards = hwlist2items(hwlist, selected);

	    /* Selection box title */
	    UI::ReplaceWidget(`id(`rp), `SelectionBox(`id(`cards), `opt(`notify), _("Se&lect network card"), cards));
	}
	else if(ret == `back) {
	    break;
	}
	else if(ret == `next) {
	    /* FIXME: check_* */
	    break;
	}
	else {
	    y2error("Unexpected return code: %1", ret);
	    continue;
	}
    };

    if(ret == `next) {
	selected = UI::QueryWidget(`id(`cards), `CurrentItem);
	map card = select(hwlist, selected, $[]);
	Lan::name = lookup(card, "name", "");
	Lan::modul = lookup(card, "module", "");
	Lan::options = lookup(card, "options", "");
    }

    return ret;
}

/**
 * Wireless devices configuration dialog
 * @return dialog result
 */
global define symbol WirelessDialog() ``{

    /* Wireless dialog caption */
    string caption = _("Wireless network card configuration");

    /* Wireless dialog help 1/1 */
    string helptext = _("<p>Here, set the most important settings
for wireless networking.</p>") +

_("<p>The <b>operating mode</b> depends on the network topology. The mode can
be Ad-hoc (network composed of only one cell without an access point), Managed
(network composed of many cells with roaming or an access point), Master
(the node is the synchronization master or acts as an access point), Repeater
(the node forward packets on the air), Secondary (the node acts as a backup
master or repeater), or Auto.</p>") +

_("<p>Set the <b>Network name (ESSID)</b>, which is used to identify cells that are
part of the same virtual network. As opposed to the NWID, which defines a
single cell, the ESSID defines a group of cells, connected via repeaters or
infrastructure, where the user may roam.</p>") +

_("<p>As all adjacent wireless networks share the same medium, the <b>Network
identifier (NWID)</b> is used to differentiate them (create logical colocated
networks) and identify nodes belonging to the same cell.</p>") +

_("<p>To set the current <b>Encryption key</b>, enter the key in hex digits as
XXXX-XXXX-XXXX-XXXX or XXXXXXXX. You can also enter the key as an ASCII
string by using the 's:' prefix.</p>") +

_("<p>The <b>Nick name</b> means the station name. Most 802.11 products do
define it, but only some diagnostic tools use it.</p>") +

_("<p>These values will be written to the interface configuration file
'ifcfg-*' in '/etc/sysconfig/network'. If you need additional settings,
add them manually. Refer to the file 'wireless' in the same directory for all
available options.</p>");

    /* Wireless dialog contents */
    term contents = `HBox(
	`HSpacing(6),
	`Frame(_("Wireless device settings"), `HBox(`HSpacing(2), `VBox(
	    `VSpacing(1),
	    /* Combobox label */
	    `ComboBox(`id(`mode), `opt(`hstretch, `notify), _("O&perating mode"), [
		`item(`id("Ad-hoc"), _("Ad-hoc"), Lan::wl_mode == "Ad-hoc"),
		`item(`id("Managed"), _("Managed"), Lan::wl_mode == "Managed"),
		`item(`id("Repeater"), _("Repeater"), Lan::wl_mode == "Repeater"),
		`item(`id("Secondary"), _("Secondary"), Lan::wl_mode == "Secondary"),
		`item(`id("Automatic"), _("Automatic"), Lan::wl_mode == "Auto")
	     ]),
	    `VSpacing(0.2),
	    /* Text entry label */
	    `TextEntry(`id(`essid), _("Ne&twork name (ESSID)"), Lan::wl_essid),
	    `VSpacing(0.2),
	    /* Text entry label */
	    `TextEntry(`id(`nwid), _("Network &identifier (NWID)"), Lan::wl_nwid),
	    `VSpacing(0.2),
	    /* Text entry label */
	    `TextEntry(`id(`key), _("&Encryption key"), Lan::wl_key),
	    `VSpacing(0.2),
	    /* Text entry label */
	    `TextEntry(`id(`nick), _("Nic&k name"), Lan::wl_nick),
	    `VSpacing(1)
	    ), `HSpacing(2))),
	`HSpacing(6)
    );

    Wizard::SetContentsButtons(caption, contents, helptext,
	    BackButtonLabel(), OKButtonLabel());

    any ret = nil;
    while(true) {
	ret = UI::UserInput();

	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `back) {
	    break;
	}
	else if(ret == `next) {
	    break;
	}
	else {
	    y2error("Unexpected return code: %1", ret);
	    continue;
	}
    };

    if(ret == `next) {
	    Lan::wl_essid = UI::QueryWidget(`id(`essid), `Value);
	    Lan::wl_nick = UI::QueryWidget(`id(`nick), `Value);
	    Lan::wl_nwid = UI::QueryWidget(`id(`nwid), `Value);
	    Lan::wl_mode = UI::QueryWidget(`id(`mode), `Value);
	    Lan::wl_key = UI::QueryWidget(`id(`key), `Value);
    }

    return ret;
}


/* EOF */
}
