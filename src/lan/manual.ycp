/**
 * File:
 *   include/network/lan/manual.ycp
 *
 * Package:
 *   Configuration of network
 *
 * Summary:
 *   Manual network card configuration
 *
 * Authors:
 *   Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 * Dialogs definitions.
 *
 */

{

textdomain "network";

import "Wizard";
import "Lan";

include "ui/common_popups.ycp";
include "ui/common_messages.ycp";

include "network/routines.ycp";

/**
 * Manual network card configuration dialog
 * @return dialog result
 */
global define symbol ManualDialog() ``{

    /* Manual dialog caption */
    string caption = _("Manual network card configuration");

    /* Manual dialog help 1/4 */
    string help = _("<p>Here, set up your networking device.
The values will be written into <i>/etc/modules.conf</i>.</p>")
        +
    /* Manual dialog help 2/4 */
    _("<p>Options for the module should be written in the format
<i>option</i>=<i>value</i>. Each entry should be space separated,
for example, <i>io=220 irq=5</i>. <b>Note:</b> If  two cards are configured
with the same module name, options will be merged while saving.</p>")
        +
    /* Manual dialog help 3/4 */
    _("<p>Get a list of available network cards 
by pressing <b>List</b>.</p>")
	+
    /* Manual dialog help 4/4 */
    _("<p>If you have a <b>PCMCIA</b> network card, click on the PCMCIA check
box, if you have an <b>USB</b> network card, click on the check box USB.</p>");

    string modul = Lan::modul;
    string options = Lan::options;
    boolean pcmcia = Lan::pcmcia;
    boolean usb = Lan::usb;
    string type = Lan::type;
    string realtype = type;
    string device = "";

    if(Lan::device == -1)
	device = _("Unknown device");
    else
	device = sformat("%1",Lan::device);

    if(pcmcia) realtype = type + "-pcmcia-";
    else if(usb) realtype = type + "-usb-";

    /* satisfy check_ycp -- don't translate this string */
    string PCMCIA = "&PCMCIA";
    string USB = "&USB";

    /* Manual dialog contents */
    term contents = `HBox(
	`HSpacing(2),
	// frame label
	`VBox(
	    `Frame(_("Network &interface"),`VBox(
		`VSpacing(0.2),
		`HBox(
		    // combo box label
		    `ComboBox(`id(`dev), `opt(`hstretch, `notify), _("Network &device"),
			[`item(`id("eth"), "Ethernet", type == "eth"), `item(`id("tr"), "Token-Ring", type == "tr")]),
		    `ReplacePoint(`id(`rnum),
			// combo box label
			`ComboBox(`id(`num), `opt(`hstretch), _("D&evice number"),
			    maplist(`d,Lan::FreeDevices(realtype),``(sformat("%1",d)))))
		),
		`VSpacing(0.2)
	    )),
	    `VSpacing(),
	    // frame label
	    `Frame(_("&Kernel module"), `VBox(
		`VSpacing(0.2),
		// text entry label
		`TextEntry(`id(`modul), _("&Module name"), modul),
		`VSpacing(0.2),
		// textentry label
		`TextEntry(`id(`options), _("Op&tions"), options),
		`VSpacing(0.2),
		`HBox(
		    `HSpacing(0.2),
		    `CheckBox(`id(`pcmcia), `opt(`notify), PCMCIA, pcmcia),
		    `HSpacing(0.2),
		    `CheckBox(`id(`usb), `opt(`notify), USB, usb),
		    `HSpacing(0.2)
		),
		`VSpacing(0.2)
	    )),
	    `VSpacing(2),
	    // button label
	    `PushButton(`id(`list), _("Select from &list"))
	    ),
	`HSpacing(2));

    Wizard::SetContentsButtons(caption, contents, help,
	    BackButtonLabel(), NextButtonLabel());

    UI::ChangeWidget(`id(`modul), `Enabled, !(pcmcia||usb));
    UI::ChangeWidget(`id(`options), `Enabled, !(pcmcia||usb));
    UI::ChangeWidget(`id(`list), `Enabled, !(pcmcia||usb));
    UI::ChangeWidget(`id(`num), `Value, device);
    UI::SetFocus(`id(`next));

    any ret = nil;
    while(true) {
	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	/* select from the list */
	else if(ret == `list) {
	    Lan::type = type;
	    Lan::device = tointeger(UI::QueryWidget(`id(`num), `Value));
	    break;
	}
	/* change device type or pcmcia/usb card? */
	else if(ret == `pcmcia || ret == `usb || ret == `dev) {
	    if(ret == `pcmcia || ret == `usb) {
		pcmcia = UI::QueryWidget(`id(`pcmcia), `Value);
		usb = UI::QueryWidget(`id(`usb), `Value);
		UI::ChangeWidget(`id(`modul), `Enabled, !(pcmcia||usb));
		UI::ChangeWidget(`id(`options), `Enabled, !(pcmcia||usb));
		UI::ChangeWidget(`id(`list), `Enabled, !(pcmcia||usb));
		if(ret == `pcmcia)
		    UI::ChangeWidget(`id(`usb), `Enabled, !pcmcia);
		if(ret == `usb)
		    UI::ChangeWidget(`id(`pcmcia), `Enabled, !usb);
	    }
	    type = UI::QueryWidget(`id(`dev), `Value);
	    if(pcmcia) realtype = type + "-pcmcia-";
	    else if(usb) realtype = type + "-usb-";

	    list devices = [];
	    devices = maplist(`d,Lan::FreeDevices(realtype),``(sformat("%1",d)));
	    UI::ReplaceWidget(`id(`rnum),`ComboBox(`id(`num), `opt(`hstretch), _("D&evice number"), devices));
	    continue;
	}
	else if(ret == `back) {
	    break;
	}
	else if(ret == `next) {
	    /* FIXME: check_* */
	    break;
	}
	else {
	    y2error("Unexpected return code: %1", ret);
	    continue;
	}
    };

    if(ret == `next) {
	Lan::modul = UI::QueryWidget(`id(`modul), `Value);
	Lan::options = UI::QueryWidget(`id(`options), `Value);
	Lan::device = tointeger(UI::QueryWidget(`id(`num), `Value));
	Lan::pcmcia = UI::QueryWidget(`id(`pcmcia), `Value);
	Lan::usb = UI::QueryWidget(`id(`usb), `Value);
	type = UI::QueryWidget(`id(`dev), `Value);
	if(pcmcia) type = type + "-pcmcia-";
	else if(usb) type = type + "-usb-";
	Lan::type = type;
    }

    return ret;
}

/**
 * Call back for a manual selection from the list
 * @return dialog result
 */
global define symbol ManualSelection() ``{

    string type = Lan::type;
    integer selected = 0;

    map db = SCR::Read(.target.yast2, "netcards.ycp");
    if(db == nil) {
	/* Error popup */
	UI::MessagePopup(_("Network card database not found."));
	return `cancel;
    }

    list hwlist = lookup(db, type, []);
    list cards = hwlist2items(hwlist, 0);

    /* Manual selection caption */
    string caption = _("Manual network card selection");

    /* Manual selection help */
    string helptext = _("<p>Select the network card to configure. Search
for a particular network card by entering the name in the search entry.</p>");

    /* Manual selection contents */
    term contents = `VBox(
	/* Selection box label */
	`ReplacePoint(`id(`rp), `SelectionBox(`id(`cards), _("Se&lect network card"), cards)),
	/* Text entry field */
	`TextEntry(`id(`search), `opt(`notify), _("&Search"))
    );

    Wizard::SetContentsButtons(caption, contents, helptext,
	    BackButtonLabel(), OKButtonLabel());

    any ret = nil;
    while(true) {
	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `search) {

	    string entry = UI::QueryWidget(`id(`search), `Value);

	    list l = filter(`e, cards, ``(tolower(substring(select(e, 1, ""), 0, size(entry))) == tolower(entry)));

	    if(size(entry) == 0) selected = 0;
	    if(size(l) > 0) selected = select(select(select(l, 0, []), 0, []), 0, 0);

	    cards = [];
	    cards = hwlist2items(hwlist, selected);

	    /* Selection box title */
	    UI::ReplaceWidget(`id(`rp), `SelectionBox(`id(`cards), `opt(`notify), _("Se&lect network card"), cards));
	}
	else if(ret == `back) {
	    break;
	}
	else if(ret == `next) {
	    /* FIXME: check_* */
	    break;
	}
	else {
	    y2error("Unexpected return code: %1", ret);
	    continue;
	}
    };

    if(ret == `next) {
	selected = UI::QueryWidget(`id(`cards), `CurrentItem);
	map card = select(hwlist, selected, $[]);
	Lan::name = lookup(card, "name", "");
	Lan::modul = lookup(card, "module", "");
	Lan::options = lookup(card, "options", "");
    }

    return ret;
}

/* EOF */
}
