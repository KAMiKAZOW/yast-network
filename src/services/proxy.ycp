/**
 * File:	include/network/services/proxy.ycp
 * Package:	Network configuration
 * Summary:	Proxy configuration
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

textdomain "network";

import "Proxy";
import "URL";
import "Wizard";

include "network/dns.ycp";
include "network/complex.ycp";
include "network/routines.ycp";
include "network/url.ycp";

import "Popup";
import "Label";

/**
 * Display popup at the end of the proxy configuration
 * @param modified true if proxy settings have been modified
 */
global define void ProxyFinishPopup(boolean modified) ``{

    /* Popup text */
string text = _("Applications that support it, such as YaST2 Online Update,
will use them immediately. Other applications will use them after a new login
(lynx, wget). Some applications, like Mozilla, do not support these settings
at all -- they use their own settings system.");

    FinishPopup(modified, "proxy", text, "", []);
}

/**
 * Proxy dialog
 * @param standalone true if not run from another ycp client
 * @return dialog result
 */
global define symbol ProxyMainDialog(boolean standalone) ``{

    ScreenName("proxy");

    boolean enabled = Proxy::enabled;
    string http = Proxy::http;
    string ftp = Proxy::ftp;
    string no = Proxy::no;
    string user = Proxy::user;
    string pass = Proxy::pass;

    /* Proxy dialog caption */
    string caption = _("Proxy Configuration");

    /* Proxy dialog help 1/5 */
    string help = _("<p>Here, configure your Internet proxy (caching) settings.</p>") +

    /* Proxy dialog help 2/5 */
    _("<p><b>HTTP proxy URL</b> is the name of the proxy server for your access
to the world wide web (WWW).</p>") +

    /* Proxy dialog help 2.5/5 */
    _("<p>Example: <i>http://proxy.provider.com:3128</i></p>") +

    /* Proxy dialog help 3/5 */
    _("<p><b>FTP proxy URL</b> is the name of the proxy server for your access
to the file transfer services (FTP).</p>") +

    /* Proxy dialog help 4/5 */
    _("<p><b>No proxy domains</b> is a list of domains for which the requests
should be done directly without caching.</p>") +

    /* Proxy dialog help 5/5 */
    _("<p>If you are using a proxy server with authorization, fill in
<b>Proxy user name</b> and <b>Proxy password</b>.</p>");

    /* Proxy dialog contents */
    term contents = `HBox(
	`HSpacing(6),
	`VBox(
	/* CheckBox entry label */
	`Left(`CheckBox(`id(`enabled), `opt(`notify), _("&Enable Proxy"), enabled)),
	`VSpacing(1),
	/* Frame label */
	`Frame(`id(`frame), _("Proxy settings"), `HBox(`HSpacing(2), `VBox(
	    `VSpacing(1),
	    /* Text entry label */
	    `TextEntry(`id(`http), _("&HTTP proxy URL"), http),
	    `VSpacing(0.2),
	    /* Text entry label */
	    `TextEntry(`id(`ftp), _("F&TP proxy URL"), ftp),
	    `VSpacing(0.2),
	    /* Text entry label */
	    `TextEntry(`id(`no), _("N&o proxy domains"), no),
	    `VSpacing(0.2),
	    /* Text entry label */
	    `TextEntry(`id(`user), _("Proxy &user name"), user),
	    `VSpacing(0.2),
	    /* Password entry label */
	    `Password(`id(`pass), _("Proxy &password"), pass),
	    `VSpacing(1)
	    ), `HSpacing(2)))
	),
	`HSpacing(6)
    );

    if(standalone == true)
	Wizard::SetContentsButtons(caption, contents, help,
		Label::BackButton(), Label::FinishButton());
    else
	Wizard::SetContentsButtons(caption, contents, help,
		Label::BackButton(), Label::OKButton());

    string ValidCharsUsername = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.:_-/\\";
    UI::ChangeWidget(`id(`http), `ValidChars, ValidCharsUrl);
    UI::ChangeWidget(`id(`ftp), `ValidChars, ValidCharsUrl);
    UI::ChangeWidget(`id(`no), `ValidChars, ValidCharsDomain + " ,");
    UI::ChangeWidget(`id(`user), `ValidChars, ValidCharsUsername);
    UI::ChangeWidget(`id(`frame), `Enabled, enabled);
    UI::SetFocus(`id(`http));

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel || ret == `back) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	if(ret == `enabled) {
	    enabled = UI::QueryWidget(`id(`enabled), `Value);
	    UI::ChangeWidget(`id(`frame), `Enabled, enabled);
	    continue;
	}
	/* next */
	else if(ret == `next) {

	    http = UI::QueryWidget(`id(`http), `Value);
	    ftp = UI::QueryWidget(`id(`ftp), `Value);
	    enabled = UI::QueryWidget(`id(`enabled), `Value);
	    user = UI::QueryWidget(`id(`user), `Value);
	    pass = UI::QueryWidget(`id(`pass), `Value);

	    if(enabled == false) break;

	    /* check_* */
	    if(user == "" && pass != "") {
		/* Popup::Error text */
		Popup::Error(_("You cannot enter a password and leave the user name empty."));
		UI::SetFocus(`id(`user));
		continue;
	    }
	    if(http != "" && !URL::Check(http)) {
		/* Popup::Error text */
		Popup::Error(_("HTTP proxy URL is incorrect"));
		UI::SetFocus(`id(`http));
		continue;
	    }
	    if(ftp != "" && !URL::Check(ftp)) {
		/* Popup::Error text */
		Popup::Error(_("FTP proxy URL is incorrect"));
		UI::SetFocus(`id(`ftp));
		continue;
	    }
	    break;
	}
	/* back */
	else if(ret == `back) {
	    break;
	}
	else {
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }

    if(ret == `next) {

	enabled = UI::QueryWidget(`id(`enabled), `Value);
	if(enabled) {
	    http = UI::QueryWidget(`id(`http), `Value);
	    ftp = UI::QueryWidget(`id(`ftp), `Value);
	    no = UI::QueryWidget(`id(`no), `Value);
	    user = UI::QueryWidget(`id(`user), `Value);
	    pass = UI::QueryWidget(`id(`pass), `Value);
	}

	if(Proxy::http == http && Proxy::ftp == ftp && Proxy::no == no &&
		Proxy::user == user && Proxy::pass == pass && Proxy::enabled == enabled) {

	    y2debug("not modified");
	    return ret;
	}

	Proxy::enabled = enabled;
	if(enabled) {
	    Proxy::http = http;
	    Proxy::ftp = ftp;
	    Proxy::no = no;
	    Proxy::user = user;
	    Proxy::pass = pass;
	}

	Proxy::modified = true;
	ProxyFinishPopup(true);
    }

    return ret;
}

/* EOF */
}
