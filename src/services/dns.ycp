/**
 * File:
 *   include/network/services/dns.ycp
 *
 * Module:
 *   Configuration of network
 *
 * Summary:
 *   Hostname and DNS setup dialog
 *
 * Authors:
 *   Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 */

{

textdomain "network";

import "DNS";
import "Wizard";

include "ui/common_popups.ycp";
include "network/dns.ycp";
include "network/ip.ycp";
include "network/routines.ycp";

/**
 * If there's running a process modifying resolv.conf,
 * present a wanrning popup and return the result.
 * @return true if resolv.conf should be modified
 * (ie. no process running, or user decided to do so)
 */
global define boolean ModifyResolvConfPopup() ``{

    string process = DNS::resolv_conf_process;
    if(process == "") return true;

    /* warning popup text 1/2 */
    string text = _("<p>The resolver configuration file (/etc/resolv.conf)
has been temporarily modified by %1. You have two options:</p>");

    /* warning popup text 2/2 */
    text = text + _("<ol>
<li>Modify the current (changed!) version of the file</li>
<li>Press 'Accept' now and continue editing other (non resolver) data. You
could return to this dialog later, when the above service has terminated.</li>
</ol>");

    /* has been modified by "unknown process" */
    text = sformat(text, size(process) > 1 ? process : _("unknown process"));

    UI::OpenDialog(`opt(`decorated), `VBox(
	`HSpacing(60),
	`HBox(
	    `VSpacing(8),
	    `RichText(text)
	),
	`HBox(
	    `PushButton(`id(`accept), `opt(`default), _("&Accept")),
	    `HSpacing(2),
	    `PushButton(`id(`modify), _("&Modify"))
	)
    ));

    any ret = UI::UserInput();
    UI::CloseDialog();

    DNS::resolv_conf_force = (ret == `modify);
    return DNS::resolv_conf_force;
}

/**
 * Dialog for querying DNS & hostname info
 * @return user input
 */
global define symbol DNSMainDialog() ``{

    string hostname = DNS::hostname;
    string domain = DNS::domain;
    list nameservers = DNS::nameservers;
    list searchlist = DNS::searchlist;
    boolean dhcp_hostname = DNS::dhcp_hostname;
    boolean dhcp_resolv = DNS::dhcp_resolv;

    // FIXME
    boolean has_dhcp = true;

    /* DNS dialog caption */
    string caption = _("Host name and name server configuration");

    /* DNS dialog helptext 1/6 */
    string helptext = _("<p>Insert the host name and domain name for your
computer. Name server list and domain search list are optional.</p>");

    /* DNS dialog helptext 2/6 */
    helptext = helptext + _("<p>A name server is a computer that translates
host names into IP addresses. This value must be entered as an
<b>IP address</b> (e.g., 10.10.0.1), not as a host name.</p>");

    /* DNS dialog helptext 3/6 */
    helptext = helptext + _("<p>Search domain is the domain name where host
name searching starts. The primary search domain is usually the same as the
<b>domain name</b> of your computer (e.g., suse.de). There may be additional
search domains (e.g., suse.com).</p>");

    /* DNS dialog helptext 4/6 */
    helptext = helptext + _("<p>If you are using DHCP to get an IP address,
check whether to get a host name via DHCP or to set name servers and searched
domains via DHCP.</p>");

    /* DNS dialog helptext 5/6 */
    helptext = helptext + _("<p>If you plan to use a dial-up Internet
connection and have set up your connection to use dynamic DNS assignment,
these values will be temporarily disabled during the connection.</p>");

    /* DNS dialog helptext 6/6 */
    /* FIXME: button label
    helptext = helptext + _("<p>Select the <b>Finish</b> button to <b>save</b>
your changes and <b>finish</b> the network configuration.</p>");
    */

    /* domain search */
    string s1 = "";
    string s2 = "";
    string s3 = "";

    /* name servers */
    string ns1 = "";
    string ns2 = "";
    string ns3 = "";

    ns1 = select(nameservers, 0, "");
    ns2 = select(nameservers, 1, "");
    ns3 = select(nameservers, 2, "");

    s1 = select(searchlist, 0, "");
    s2 = select(searchlist, 1, "");
    s3 = select(searchlist, 2, "");

    /* DNS dialog contents */
    term contents = `HSquash(`VBox(
	`Frame(_("Host name and domain name"), `VBox(
	    `HBox(
		// text entry label
		`TextEntry(`id(`host), _("&Host name"), hostname),
		// text entry label
		`TextEntry(`id(`domain), _("&Domain name"), domain)
	    ),
	    `Left(`CheckBox(`id(`dn), _("&Change host name via DHCP")))
	)),
	`VSpacing(1),
	`Frame(_("Name servers and domain search list"), `VBox(
	`HBox(
	    `VBox(
		`TextEntry(`id(`ns1), _("Name server &1"), ns1),
		`TextEntry(`id(`ns2), _("Name server &2"), ns2),
		`TextEntry(`id(`ns3), _("Name server &3"), ns3)
	    ),
	    `VBox(
		`TextEntry(`id(`s1), _("D&omain search 1"), s1),
		`TextEntry(`id(`s2), _("Do&main search 2"), s2),
		`TextEntry(`id(`s3), _("Dom&ain search 3"), s3)
	    )
	),
	`Left(`CheckBox(`id(`dr), `opt(`notify), _("&Update name servers and search list via DHCP")))
	))
    ));

    Wizard::SetContents(caption, contents, helptext, true, true);

    UI::ChangeWidget(`id(`dn), `Enabled, has_dhcp);
    UI::ChangeWidget(`id(`dr), `Enabled, has_dhcp);
    if(has_dhcp) UI::ChangeWidget(`id(`dn), `Value, dhcp_hostname);
    if(has_dhcp) UI::ChangeWidget(`id(`dr), `Value, dhcp_resolv);

    UI::ChangeWidget(`id(`host), `ValidChars, "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-");
    UI::ChangeWidget(`id(`domain), `ValidChars, "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-.");
    UI::ChangeWidget(`id(`s1), `ValidChars, "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-.");
    UI::ChangeWidget(`id(`s2), `ValidChars, "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-.");
    UI::ChangeWidget(`id(`s3), `ValidChars, "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-.");
    UI::ChangeWidget(`id(`ns1), `ValidChars, "0123456789.");
    UI::ChangeWidget(`id(`ns2), `ValidChars, "0123456789.");
    UI::ChangeWidget(`id(`ns3), `ValidChars, "0123456789.");

    if(ModifyResolvConfPopup() != true) {
	UI::ChangeWidget(`id(`dr), `Enabled, false);
	UI::ChangeWidget(`id(`s1), `Enabled, false);
	UI::ChangeWidget(`id(`s2), `Enabled, false);
	UI::ChangeWidget(`id(`s3), `Enabled, false);
	UI::ChangeWidget(`id(`ns1), `Enabled, false);
	UI::ChangeWidget(`id(`ns2), `Enabled, false);
	UI::ChangeWidget(`id(`ns3), `Enabled, false);
    }

    // ugly hack for ISDN call (#6020)
    //if(ok_label) UI::ChangeWidget(`id(`next), `Label, _("&OK")));

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	/* hostname via dhcp */
	else if(ret == `dn) {
	    dhcp_hostname = UI::QueryWidget(`id(`dn), `Value);
	    UI::ChangeWidget(`id(`host), `Enabled, !dhcp_hostname);
	    UI::ChangeWidget(`id(`domain), `Enabled, !dhcp_hostname);
	    continue;
	}
	/* resolv.conf via dhcp */
	else if(ret == `dr) {
	    dhcp_resolv = UI::QueryWidget(`id(`dr), `Value);
	    UI::ChangeWidget(`id(`ns1), `Enabled, !dhcp_resolv);
	    UI::ChangeWidget(`id(`ns2), `Enabled, !dhcp_resolv);
	    UI::ChangeWidget(`id(`ns3), `Enabled, !dhcp_resolv);
	    UI::ChangeWidget(`id(`s1), `Enabled, !dhcp_resolv);
	    UI::ChangeWidget(`id(`s2), `Enabled, !dhcp_resolv);
	    UI::ChangeWidget(`id(`s3), `Enabled, !dhcp_resolv);
	    continue;
	}
	else if(ret == `back) {
	    break;
	}
	else if(ret == `next) {

	    if(!dhcp_hostname) {
		/* check host name and domain */
		if(!check_hostname(UI::QueryWidget(`id(`host), `Value))) {
		    UI::ErrorPopup(_("The host name is incorrect"));
		    UI::SetFocus(`id(`host));
		    continue;
		}
		if(!check_domainname(UI::QueryWidget(`id(`domain), `Value))) {
		    UI::ErrorPopup(_("The domain name is incorrect"));
		    UI::SetFocus(`id(`domain));
		    continue;
		}
	    }

	    /* check nameservers */
	    ns1 = tolower(UI::QueryWidget(`id(`ns1), `Value));
	    ns2 = tolower(UI::QueryWidget(`id(`ns2), `Value));
	    ns3 = tolower(UI::QueryWidget(`id(`ns3), `Value));

	    if(ns1 != "" && !check_ip4(ns1)) {
		UI::ErrorPopup(_("The primary name server is not correct"));
		UI::SetFocus(`id(`ns1));
		continue;
	    }
	    if(ns2 != "" && !check_ip4(ns2)) {
		UI::ErrorPopup(_("The secondary name server is not correct"));
		UI::SetFocus(`id(`ns2));
		continue;
	    }
	    if(ns3 != "" && !check_ip4(ns3)) {
		UI::ErrorPopup(_("The tertiary name server is not correct"));
		UI::SetFocus(`id(`ns3));
		continue;
	    }

	    /* check search domains */
	    s1 = tolower(UI::QueryWidget(`id(`s1), `Value));
	    s2 = tolower(UI::QueryWidget(`id(`s2), `Value));
	    s3 = tolower(UI::QueryWidget(`id(`s3), `Value));

	    if(s1 != "" && !check_domainname(s1)) {
		UI::ErrorPopup(_("The primary search domain is not correct"));
		UI::SetFocus(`id(`s1));
		continue;
	    }
	    if(s2 != "" && !check_domainname(s2)) {
		UI::ErrorPopup(_("The secondary search domain is not correct"));
		UI::SetFocus(`id(`s2));
		continue;
	    }
	    if(s3 != "" && !check_domainname(s3)) {
		UI::ErrorPopup(_("The tertiary search domain is not correct"));
		UI::SetFocus(`id(`s3));
		continue;
	    }

	    break;
	}
	else {
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}

    }

    if(ret == `next) {

	DNS::hostname = UI::QueryWidget(`id(`host), `Value);
	DNS::domain = UI::QueryWidget(`id(`domain), `Value);

	DNS::nameservers = filter(`n, [ ns1, ns2, ns3 ], ``(n != ""));
	DNS::searchlist = filter(`s, [ s1, s2, s3 ], ``(s != ""));

	DNS::dhcp_hostname = UI::QueryWidget(`id(`dn), `Value);
	DNS::dhcp_resolv = UI::QueryWidget(`id(`dr), `Value);

	/* update modified flag */
	if(hostname != DNS::hostname || domain != DNS::domain ||
		nameservers != DNS::nameservers ||
		searchlist != DNS::searchlist ||
		dhcp_resolv != DNS::dhcp_resolv ||
		dhcp_hostname != DNS::dhcp_hostname)
	    DNS::modified = true;
	else
	    y2debug("not modified");
    }

    return ret;
}

/* EOF */
}
