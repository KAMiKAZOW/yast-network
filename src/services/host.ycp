/**
 * File:	include/network/services/host.ycp
 * Module:	Network configuration
 * Summary:	Hosts configuration dialogs
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 * Hosts configuration dialogs
 */

{

textdomain "network";

import "Host";
import "Wizard";

include "network/ip.ycp";
include "network/dns.ycp";
include "network/routines.ycp";

include "ui/common_popups.ycp";

/**
 * Check if given host is system and present warning in this case.
 * @param host host to be checked
 * @return true if continue
 */
global define boolean HostSystemPopup(string host) ``{
    if(!contains(Host::GetSystemHosts(), host)) return true;
    return UI::YesNoPopup(sformat(_("The host %1 is a system host.
Do you really want to change it?"), host));
}

/**
 * Main hosts dialog
 * @param standalone true if not run from another ycp client
 * @return dialog result
 */
global define symbol HostsMainDialog(boolean standalone) ``{

    /* Hosts dialog caption */
    string caption = _("Hosts configuration");

    /* Hosts dialog help 1/1 */
    string help = _("<p>The hosts can be set up in this dialog.</p>") +

    _("<p>Fill in a host <b>IP address</b>, a <b>host name</b> and optional
<b>host aliases</b>.</p>");

    integer items = 0;
    integer max = 0;
    list table_items = [];

    /* make ui items from the hosts list */
    maplist(string host, string names, Host::hosts, ``{
	if(size(names) < 1) {
	    y2error("Invalid host: %1, (%2)", host, names);
	    return;
	}
	string name = names[0]:"";
	string aliases = mergestring(remove(names, 0), " ");
	term item = `item(`id(items), host, name, aliases);
	change(table_items, item);
	items = items + 1;
    });

    y2debug("table_items=%1", table_items);
    y2debug("items=%1", items);
    max = items;

    /* Hosts dialog contents */
    term contents = `HBox(
	`HSpacing(5),
	`VBox(
	    `VSpacing(2),
	    /* Frame label */
	    `Frame(_("Current hosts"), `HBox(`HSpacing(3), `VBox(
		`VSpacing(1),
		`Table(`id(`table), `header(
                    /* Table header label */
                    _("IP address"),
                    /* Table header label */
                    _("Host names"),
                    /* Table header label */
                    _("Host aliases")), []),
		`HBox(
		    /* PushButton label */
		    `PushButton(`id(`add), _("Ad&d")),
		    /* PushButton label */
		    `PushButton(`id(`edit), `opt(`disabled), _("&Edit")),
		    /* PushButton label */
		    `PushButton(`id(`delete), `opt(`disabled), _("De&lete"))),
		`VSpacing(1)
		), `HSpacing(3))),
	    `VSpacing(2)
	),
	`HSpacing(5)
    );

    if(standalone == true)
	Wizard::SetContentsButtons(caption, contents, help,
		BackButtonLabel(), FinishButtonLabel());
    else
	Wizard::SetContentsButtons(caption, contents, help,
		BackButtonLabel(), OKButtonLabel());

    UI::ChangeWidget(`id(`table), `Items, table_items);
    UI::ChangeWidget(`id(`edit), `Enabled, items > 0);
    UI::ChangeWidget(`id(`delete), `Enabled, items > 0);

    any ret = nil;

    /* TODO:
     * check_*
     * devices
     * current item should stay the same
     */
    while(true) {
	UI::ChangeWidget(`id(`edit), `Enabled, items > 0);
	UI::ChangeWidget(`id(`delete), `Enabled, items > 0);
	if(items > 0) {
	    integer cur = select(select(select(table_items, 0, []), 0, []), 0, 0);
	    UI::ChangeWidget(`id(`table), `CurrentItem, cur);
	}

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	/* expert mode */
	else if(ret == `expert) {
	    expert = ! expert;
	    UI::ChangeWidget(`id(`table), `Enabled, expert);
	    UI::ChangeWidget(`id(`add), `Enabled, expert);
	    continue;
	}
	/* edit route */
	else if(ret == `edit) {
	    integer cur = UI::QueryWidget(`id(`table), `CurrentItem);
	    y2debug("cur=%1", cur);
	    list cur_item = filter(term e, table_items, ``(cur == select(select(e, 0, []), 0, nil)));
	    y2debug("cur_item=%1", cur_item);
	    term item = cur_item[0]:nil;
	    list forbidden = maplist(term e, table_items, ``(select(e, 1, "")));
	    forbidden = filter(string h, forbidden, ``(h != select(item, 1, "")));

	    if(!HostSystemPopup(select(item, 1, "")))
		continue;

	    item = HostDialog(cur, item, forbidden);

	    if(item == nil) continue;
	    else Host::modified = true;

	    table_items = maplist(`e, table_items, ``{
		if(cur == select(select(e, 0, []), 0, -1))
		    return item;
		return e;
	    });
	    UI::ChangeWidget(`id(`table), `Items, table_items);
	    continue;
	}
	/* add route */
	else if(ret == `add) {
	    list forbidden = maplist(term e, table_items, ``(select(e, 1, "")));
	    term item = HostDialog(max, `empty(), forbidden);
	    if(item == nil) continue;
	    else Host::modified = true;

	    change(table_items, item);
	    UI::ChangeWidget(`id(`table), `Items, table_items);
	    items = items + 1;
	    max = max + 1;
	    continue;
	}
	/* delete route */
	else if(ret == `delete) {
	    integer cur = UI::QueryWidget(`id(`table), `CurrentItem);
	    table_items = filter(term e, table_items, ``{
		string ip = select(e, 1, "");
		if(cur == select(select(e, 0, []), 0, nil)) {
		    if(ip != "" && ip != nil)
			change(Host::Deleted, ip);
		    return false;
		}
		return true;
	    });
	    UI::ChangeWidget(`id(`table), `Items, table_items);
	    items = size(table_items);
	    Host::modified = true;
	    continue;
	}
	else if(ret == `back) {
	    break;
	}
	else if(ret == `next) {
	    /* check_ */
	    break;
	}
	else {
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    };

    /* update hosts from widgets */
    if(ret == `next) {
	Host::hosts = listmap(term e, table_items, ``(
	    [
		select(e, 1, ""),
		prepend(splitstring(select(e, 3, ""), " "), select(e, 2, ""))
	    ]
	));
    }

    y2debug("table_items=%1", table_items);
    y2debug("hosts=%1", Host::hosts);

    return ret;
}

/**
 * Route edit dialog
 * @param id id of the edited route
 * @param entry edited entry
 * @param forbidden already used IP addresses
 * @return route map or nil, if canceled
 */
global define term HostDialog(integer id, term entry, list forbidden) ``{

    y2debug("id=%1", id);
    y2debug("entry=%1", entry);
    y2debug("forbidden=%1", forbidden);

    UI::OpenDialog(`opt(`decorated),`VBox(
	`HSpacing(1),
	`VBox(
	    /* TextEntry label */
	    `TextEntry(`id(`host), _("&IP address"), select(entry, 1, "")),
	    /* TextEntry label */
	    `TextEntry(`id(`name), _("&Host name"), select(entry, 2, "")),
	    /* TextEntry label */
	    `TextEntry(`id(`aliases), _("Hos&t aliases"), select(entry, 3, ""))
	    ),
	`HSpacing(1),
	`HBox(
	    `PushButton(`id(`ok), `opt(`default), OKButtonLabel()),
	    `PushButton(`id(`cancel), CancelButtonLabel())
	    )
	));

    UI::ChangeWidget(`id(`host), `ValidChars, ValidCharsIP);
    UI::ChangeWidget(`id(`name), `ValidChars, ValidCharsFQHostname);
    UI::ChangeWidget(`id(`aliases), `ValidChars, ValidCharsFQHostname + " ");

    if(entry == `empty())
	UI::SetFocus(`id(`host));
    else
	UI::SetFocus(`id(`aliases));

    any ret = nil;
    term host = nil;

    while(true) {
	host = nil;
	ret = UI::UserInput();
	if(ret != `ok) break;

	host = `item(`id(id));
	string val = UI::QueryWidget(`id(`host), `Value);
	if(!check_ip(val)) {
	    /* ErrorPopup text */
	    UI::ErrorPopup(_("IP address is incorrect"));
	    UI::SetFocus(`id(`host));
	    continue;
	}
	if(contains(forbidden,val)) {
	    /* ErrorPopup text */
	    UI::ErrorPopup(sformat(_("IP address %1 is already present"), val));
	    UI::SetFocus(`id(`host));
	    continue;
	}
	host = add(host, val);

	val = UI::QueryWidget(`id(`name), `Value);
	if(!check_fqhostname(val)) {
	    /* ErrorPopup text */
	    UI::ErrorPopup(_("Host name is incorrect"));
	    UI::SetFocus(`id(`name));
	    continue;
	}
	host = add(host, val);

	val = UI::QueryWidget(`id(`aliases), `Value);
	if(val != "") {
	    list vals = splitstring(val, " ");
	    vals = filter(string ho, vals, ``(ho != "" && !check_fqhostname(ho)));
	    if(size(vals) > 0) {
		/* ErrorPopup text */
		UI::ErrorPopup(sformat(_("Alias name \"%1\" is incorrect"), vals[0]:""));
		UI::SetFocus(`id(`aliases));
		continue;
	    }
	}
	host = add(host, val);
	break;
    }

    UI::CloseDialog();
    if(ret != `ok) return nil;
    return host;
}

/* EOF */
}
