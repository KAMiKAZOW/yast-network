/**
 * File:	include/network/provider/connection.ycp
 * Package:	Configuration of network
 * Summary:	Connection configuration dialogs
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

textdomain "network";

import "DSL";
import "Modem";
import "ISDN";
import "Firewall";
import "Providers";
import "Wizard";

include "ui/common_popups.ycp";
include "network/routines.ycp";

/**
 * Connection dialog
 * @param type "modem"|"isdn"
 * @return dialog result
 */
global define symbol ConnectionDialog(string type) ``{

    /* PREPARE VARIABLES */
    string Provider = lookup(Providers::provider, "PROVIDER", "");

    boolean DialOnDemand = lookup(Providers::provider, "DEMAND", "no") == "yes";
    boolean AutoDNS = lookup(Providers::provider, "MODIFYDNS", "yes") == "yes";
    boolean stupidmode = lookup(Providers::provider, "STUPIDMODE", "no") == "yes";

    string DNS1 = lookup(Providers::provider, "DNS1", "");
    string DNS2 = lookup(Providers::provider, "DNS2", "");

    string IdleSeconds = lookup(Providers::provider, "IDLETIME", "300");

    string device = nil;
    if(type == "modem") device = device_name(Modem::type, Modem::device);
    else if(type == "isdn") device = device_name(ISDN::type, ISDN::device);
    else if(type == "dsl") device = "ppp0"; // device_name(DSL::type, DSL::device);
    else {
	y2error("Unknown type: %1", type);
	return nil;
    }

    y2debug("device %1", device);
    boolean FirewallChecked = Firewall::Query(device);

    /* DIALOG TEXTS */

    /* Connection dialog caption */
    string caption = _("Connection parameters");

    /* Connection dialog help 1/8 */
    string helptext = _("<p><b>Dial on demand</b> means that the
internet connection will be established automatically when data from
the internet are requested. To use this feature you must specify at
least one <i>name server</i>. Please use this feature only if your
internet connection is cheap since there are programs that periodically
request data from the internet.</p>") +

    /* Connection dialog help 2/8 */
_("<p>When <b>Modify DNS</b> is enabled, the <i>name server</i> will be
changed automatically when connected to the Internet.</p>
") +

    /* Connection dialog help 3/8 */
_("<p>The <b>Name servers</b> are required to convert host names
<i>(e.g., www.suse.com)</i> to IP addresses (e.g., 213.95.15.200). You only
need to specify the name servers if you enable <i>Dial on demand</i> or
disable <b>DNS modification</b> when connected.</p>
") +

    /* Connection dialog help 4/8 */
_("<p><b>Stupid mode</b> will disable the detection of
any prompts from the dialin server. If the connection
buildup is slow or does not work at all try this option.</p>") +

    /* Connection dialog help 5/8 */
_("<p>Selecting <b>Activate firewall</b> will block all incoming
connections. Choosing this option will make dial-up connections
to the Internet safe from external attacks.</p>") +

    /* Connection dialog help 6/8 */
_("<p>The <b>Idle time-out</b> specifies the time after which an idle
connection will be shut down (0 means an infinite idle timeout).</p>");

    if(type == "isdn")

	/* FIXME Connection dialog help 7/8 */
	helptext = helptext + _("<p><b>Connection details</b> help FIXME
</p>") +

	/* FIXME Connection dialog help 8/8 */
_("<p><b>IP details</b> help FIXME
</p>");

    /* DIALOG CONTENTS */

    list seconds = [ "0", "30", "60", "90", "120", "150", "180", "240", "300", "360", "480", "600" ];
    if(!contains(seconds, IdleSeconds))
	change(seconds, IdleSeconds);

    seconds = maplist(`e, seconds,
	    ``(`item(`id(sformat("%1", e)), sformat("%1", e), e == IdleSeconds)));

    /* Checkbox label */
    term FirewallCheckbox = `Left(`CheckBox(`id(`Firewall), _("Activate fire&wall..."), FirewallChecked));

    term details = `VSpacing(0.1);
    //if(type == "isdn")
    if(false)
	details = `HBox(
	    /* Push button label */
	    `PushButton(`id(`Details), _("&Connection details")),
	    `HSpacing(0.5),
	    /* Push button label */
	    `PushButton(`id(`IPDetails), _("&IP details"))
	);

    term contents = `HBox(
	`HSpacing(6),
	`VBox(
	    `VSpacing(0.5),
	    `Left(`HBox(
		/* Label */
		`Label(_("Provider:")),
		`HSpacing(0.5),
		`Label(`opt(`outputField), Provider)
	    )),
	    `VSpacing(0.5),
	    `HBox(
		`VBox(
		    /* Checkbox label */
		    `Left(`CheckBox(`id(`DialOnDemand), `opt(`notify), _("Dial on d&emand"), DialOnDemand)),
		    /* Checkbox label */
		    `Left(`CheckBox(`id(`AutoDNS), `opt(`notify), _("&Modify DNS when connected"), AutoDNS))
		 )
	    ),
	    `VSpacing(1),
	    /* Frame label */
	    `Frame(`id(`NameServers), _("Name servers"),
		`HBox(
		    /* Text entry label */
		    `TextEntry(`id(`DNS1), _("&First"), DNS1),
		    `HSpacing(0.5),
		    /* Text entry label */
		    `TextEntry(`id(`DNS2), _("&Second"), DNS2)
		)
	    ),
	    `VSpacing(1),
	    /* Checkbox label */
	    `Left(`CheckBox(`id(`stupidmode), _("S&tupid mode"), stupidmode)),
	    FirewallCheckbox,
	    `VSpacing(0.5),
	    /* Combo box label */
	    `Left(`ComboBox(`id(`IdleSeconds), `opt(`editable), _("I&dle timeout (seconds)"), seconds)),
	    `VSpacing(1),
	    details
	),
	`HSpacing(6)
    );

    /* DIALOG PREPARE */

    Wizard::SetContentsButtons(caption, contents, helptext,
	    BackButtonLabel(), NextButtonLabel());

    UI::ChangeWidget(`id(`Firewall), `Enabled, !Firewall::firewallpresent);
    UI::ChangeWidget(`id(`NameServers), `Enabled, DialOnDemand || !AutoDNS);

    /* MAIN CYCLE */
    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `back) {
	    break;
	}
	else if(ret == `next || ret == `Details || ret == `IPDetails) {
	    /* check_* */
	    if(UI::QueryWidget(`id(`IdleSeconds), `Value) == "") {
		UI::ErrorPopup(_("You must set the idle seconds."));
		UI::SetFocus(`id(`IdleSeconds));
		continue;
	    }

	    /* FIXME
	    if(DialOnDemand && !(check_ip4(DNS1) && (size(DNS2) == 0 || check_ip4(DNS2))))
	    {
		UI::ErrorPopup(_("Wrong IP address!"));
		continue;
	    }
	    */

	    break;
	}
	else if(ret == `DialOnDemand || ret == `AutoDNS) {
	    DialOnDemand = UI::QueryWidget(`id(`DialOnDemand), `Value);
	    AutoDNS = UI::QueryWidget(`id(`AutoDNS), `Value);
	    UI::ChangeWidget(`id(`NameServers), `Enabled, DialOnDemand || !AutoDNS);
	}
	else {
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }

    /* UPDATE VARIABLES */

    if(ret == `next || ret == `Details || ret == `IPDetails) {
	/* update provider info */
	Providers::provider = union(Providers::provider, $[
	    "DNS1" : UI::QueryWidget(`id(`DNS1), `Value),
	    "DNS2" : UI::QueryWidget(`id(`DNS2), `Value),
	    "DEMAND" : UI::QueryWidget(`id(`DialOnDemand), `Value) ? "yes" : "no",
	    "MODIFYDNS" : UI::QueryWidget(`id(`AutoDNS), `Value) ? "yes" : "no",
	    "IDLETIME" : UI::QueryWidget(`id(`IdleSeconds), `Value),
	    "STUPIDMODE" : UI::QueryWidget(`id(`stupidmode), `Value) ? "yes" : "no",
	    "MODEMSUPPORTED" : type == "modem" ? "yes" : "no",
	    "ISDNSUPPORTED" : type == "isdn" ? "yes" : "no",
	    "DSLSUPPORTED" : type == "isdn" ? "yes" : "no"
	]);
	/* update firewall info */
	if(FirewallChecked != UI::QueryWidget(`id(`Firewall), `Value)) {
	    FirewallChecked = UI::QueryWidget(`id(`Firewall), `Value);
	    Firewall::Change(device, FirewallChecked);
	}
    }

    return ret;
}

/**
 * Connection details dialog
 * @return dialog result
 */
global define symbol ConnectionDetailsDialog() ``{
}

if(false) {
Providers::provider = $["PROVIDER":"AICOM, Havlickuv Brod"];
Wizard::CreateDialog();
//ConnectionDialog("modem");
ConnectionDialog("isdn");
//ConnectionDialog("dsl");
}

/* EOF */
}
