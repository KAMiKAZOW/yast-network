/**
 * File:	include/network/provider/connection.ycp
 * Package:	Network configuration
 * Summary:	Connection configuration dialogs
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

textdomain "network";

import "DSL";
import "Modem";
import "ISDN";
import "Firewall";
import "Provider";
import "Wizard";

include "ui/common_popups.ycp";
include "network/routines.ycp";

/**
 * Connection dialog
 * @return dialog result
 */
global define symbol ConnectionDialog() ``{

    string type = Provider::CurrentType();

    /* PREPARE VARIABLES */
    string Provider = lookup(Provider::Provider, "PROVIDER", "");

    boolean demand = lookup(Provider::Provider, "DEMAND", "no") == "yes";
    boolean modifydns = lookup(Provider::Provider, "MODIFYDNS", "yes") == "yes";
    boolean stupidmode = lookup(Provider::Provider, "STUPIDMODE", "no") == "yes";

    string DNS1 = lookup(Provider::Provider, "DNS1", "");
    string DNS2 = lookup(Provider::Provider, "DNS2", "");

    string idletime = lookup(Provider::Provider, "IDLETIME", "300");

    string device = nil;
    if(type == "modem") device = "ppp"; //device_name(Modem::type, Modem::device);
    else if(type == "isdn") {
	/* FIXME: #18840 */
	if(ISDN::type == "net")
	    device = device_name("ippp", ISDN::device);
	else
	    device = device_name(ISDN::type, ISDN::device);
    }
    // FIXME device_name(DSL::type, DSL::device);
    else if(type == "dsl") device = "ppp";
    else {
	y2error("Unknown type: %1", type);
	return nil;
    }

    y2debug("device %1", device);
    boolean FirewallChecked = Firewall::Query(device);
    y2debug("FirewallChecked=%1",FirewallChecked);

    /* DIALOG TEXTS */

    /* Connection dialog caption */
    string caption = _("Connection parameters");

    /* Connection dialog help 1/8 */
    string helptext = _("<p><b>Dial on demand</b> means that the
internet connection will be established automatically when data from
the internet are requested. To use this feature you must specify at
least one <i>name server</i>. Please use this feature only if your
internet connection is cheap since there are programs that periodically
request data from the internet.</p>") +

    /* Connection dialog help 2/8 */
_("<p>When <b>Modify DNS</b> is enabled, the <i>name server</i> will be
changed automatically when connected to the Internet.</p>
") +

    /* Connection dialog help 3/8 */
_("<p>The <b>Name servers</b> are required to convert host names
<i>(e.g., www.suse.com)</i> to IP addresses (e.g., 213.95.15.200). You only
need to specify the name servers if you enable <i>Dial on demand</i> or
disable <b>DNS modification</b> when connected.</p>
");

    if (type == "modem")
	helptext = helptext +
    /* Connection dialog help 4/8 */
_("<p><b>Stupid mode</b> will disable the detection of
any prompts from the dial-in server. If the connection
buildup is slow or does not work at all, try this option.</p>");

    helptext = helptext +
    /* Connection dialog help 5/8 */
_("<p>Selecting <b>Activate firewall</b> will block all incoming
connections. Choosing this option will make dial-up connections
to the Internet safe from external attacks.</p>") +

    /* Connection dialog help 6/8 */
_("<p>The <b>Idle time-out</b> specifies the time after which an idle
connection will be shut down (0 means an infinite idle time-out).</p>");

    // if(type == "isdn")

	/* FIXME Connection dialog help 7/8 */
	// helptext = helptext + _("<p><b>Connection details</b> help FIXME</p>") +

	/* FIXME Connection dialog help 8/8 */
	// _("<p><b>IP details</b> help FIXME</p>");

    /* DIALOG CONTENTS */

    list seconds = [ "0", "30", "60", "90", "120", "150", "180", "240", "300", "360", "480", "600" ];
    if(!contains(seconds, idletime))
	change(seconds, idletime);

    seconds = maplist(`e, seconds,
	    ``(`item(`id(sformat("%1", e)), sformat("%1", e), e == idletime)));

    /* Checkbox label */
    term FirewallCheckbox = `Left(`CheckBox(`id(`Firewall), _("Activate fire&wall"), FirewallChecked));
    if(type == "isdn") FirewallCheckbox = `VSpacing(0);

    term StupidMode = `VSpacing(0.1);
    if (type == "modem")
	/* Checkbox label */
	StupidMode = `Left(`CheckBox(`id(`stupidmode), _("S&tupid mode"), stupidmode));

    term details = `VSpacing(0.1);
    // FIXME if(type == "isdn")
    if(false)
	details = `HBox(
	    /* Push button label */
	    `PushButton(`id(`Details), _("&Connection details")),
	    `HSpacing(0.5),
	    /* Push button label */
	    `PushButton(`id(`IPDetails), _("I&P details"))
	);
    if(type == "modem")
	details = `HBox(
	    /* Push button label */
	    `PushButton(`id(`IPDetails), _("I&P details"))
	);

    term contents = `HBox(
	`HSpacing(6),
	`VBox(
	    `VSpacing(0.5),
	    `Left(`HBox(
		/* Label */
		`Label(_("Provider:")),
		`HSpacing(0.5),
		`Label(`opt(`outputField), Provider)
	    )),
	    `VSpacing(0.5),
	    `HBox(
		`VBox(
		    /* Checkbox label */
		    `Left(`CheckBox(`id(`demand), `opt(`notify), _("Dial on d&emand"), demand)),
		    /* Checkbox label */
		    `Left(`CheckBox(`id(`modifydns), `opt(`notify), _("&Modify DNS when connected"), modifydns))
		 )
	    ),
	    `VSpacing(1),
	    /* Frame label */
	    `Frame(`id(`nameservers), _("Name servers"),
		`HBox(
		    /* Text entry label */
		    `TextEntry(`id(`DNS1), _("F&irst"), DNS1),
		    `HSpacing(0.5),
		    /* Text entry label */
		    `TextEntry(`id(`DNS2), _("&Second"), DNS2)
		)
	    ),
	    `VSpacing(1),
	    StupidMode,
	    FirewallCheckbox,
	    `VSpacing(0.5),
	    /* Combo box label */
	    `Left(`ComboBox(`id(`idletime), `opt(`editable), _("I&dle timeout (seconds)"), seconds)),
	    `VSpacing(1),
	    details
	),
	`HSpacing(6)
    );

    /* DIALOG PREPARE */

    Wizard::SetContentsButtons(caption, contents, helptext,
	    BackButtonLabel(), NextButtonLabel());

    UI::ChangeWidget(`id(`nameservers), `Enabled, demand && modifydns);

    /* MAIN CYCLE */
    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `back) {
	    break;
	}
	else if(ret == `next || ret == `Details || ret == `IPDetails) {
	    /* check_* */
	    if(UI::QueryWidget(`id(`idletime), `Value) == "") {
		/* Popup text */
		UI::ErrorPopup(_("You must set the idle seconds."));
		UI::SetFocus(`id(`idletime));
		continue;
	    }
	    if(demand && modifydns) {
		DNS1 = UI::QueryWidget(`id(`DNS1), `Value);
		DNS2 = UI::QueryWidget(`id(`DNS2), `Value);
		if(!(check_ip4(DNS1))) {
		    UI::ErrorPopup(_("The primary name server is not correct"));
		    UI::SetFocus(`id(`DNS1));
		    continue;
		}
		if(size(DNS2) != "" && check_ip4(DNS2)) {
		    UI::ErrorPopup(_("The secondary name server is not correct"));
		    UI::SetFocus(`id(`DNS2));
		    continue;
		}
	    }
	    break;
	}
	else if(ret == `demand || ret == `modifydns) {
	    demand = UI::QueryWidget(`id(`demand), `Value);
	    modifydns = UI::QueryWidget(`id(`modifydns), `Value);
	    UI::ChangeWidget(`id(`nameservers), `Enabled, demand && modifydns);
	}
	else {
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }

    /* UPDATE VARIABLES */

    if(ret == `next || ret == `Details || ret == `IPDetails) {
	demand = UI::QueryWidget(`id(`demand), `Value) ? "yes" : "no";
	modifydns = UI::QueryWidget(`id(`modifydns), `Value) ? "yes" : "no";

	/* update provider info */
	Provider::Provider = union(Provider::Provider, $[
	    "DEMAND" : demand,
	    "MODIFYDNS" : modifydns,
	    "IDLETIME" : UI::QueryWidget(`id(`idletime), `Value),
	    "MODEMSUPPORTED" : type == "modem" ? "yes" : "no",
	    "ISDNSUPPORTED" : type == "isdn" ? "yes" : "no",
	    "DSLSUPPORTED" : type == "dsl" ? "yes" : "no"
	]);
	if (demand && modifydns)
	    Provider::Provider = union(Provider::Provider, $[
		"DNS1" : UI::QueryWidget(`id(`DNS1), `Value),
		"DNS2" : UI::QueryWidget(`id(`DNS2), `Value),
	    ]);

	/* update provider type-specific info */
	if (type == "modem")
	    Provider::Provider = union(Provider::Provider, $[
		"STUPIDMODE" : UI::QueryWidget(`id(`stupidmode), `Value) ? "yes" : "no"
	    ]);
	if (type == "isdn")
	    Provider::Provider = union(Provider::Provider, $[
		"FIREWALL" : UI::QueryWidget(`id(`Firewall), `Value) ? "yes" : "no"
	    ]);

	/* update firewall info */
	if(FirewallChecked != UI::QueryWidget(`id(`Firewall), `Value)) {
	    FirewallChecked = UI::QueryWidget(`id(`Firewall), `Value);
	    Firewall::Change(device, FirewallChecked);
	}
    }

    return ret;
}

/**
 * Connection details dialog
 * @return dialog result
 */
global define symbol ConnectionDetailsDialog() ``{
}

/* EOF */
}
