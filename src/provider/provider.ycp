/**
 * File:	include/network/provider/provider.ycp
 * Package:	Network configuration
 * Summary:	Provider dialogs
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

textdomain "network";

import "ISDN";
import "Provider";
import "Wizard";

include "network/provider/helps.ycp";

include "ui/common_popups.ycp";
include "ui/common_messages.ycp";

/**
 * Build provider info text.
 * @return provider info text
 */
global define string ProviderInfoText() ``{

    string info = "";

    string hp = Provider::Provider["HOTLINE"]:"";
    string hl = Provider::Provider["HOMEPAGE"]:"";

    if(hp != "")
	/* Provider info (%1 is URL) */
	info = info + sformat(_("<p>Home page: %1</p>"), hp);

    if(hl != "")
	/* Provider info (%1 is phone number) */
	info = info + sformat(_("<p>Hotline: %1</p>"), hl);


    if(Provider::Provider["DIALMESSAGE1"]:"" != "" || Provider::Provider["DIALMESSAGE2"]:"" != "") {
	info = info + sformat("<p>%1%2</p>",
		Provider::Provider["DIALMESSAGE1"]:"",
		Provider::Provider["DIALMESSAGE2"]:"");
    }
    else if(Provider::Provider["PHONE"]:"" == "") {
	if(hp != "" && hl != "") {
	    /* Provider info text */
	    string it = _("<p>To register for <b>%1</b> and find the best
dialing number, connect to the home page <b>%2</b> or call the hotline
<b>%3</b>.</p>");

	    info = info + sformat(it, Provider::Provider["PROVIDER"]:"", hp, hl);
	}

	if(hp != "" && hl == "") {
	    /* Provider info text */
	    string it = _("<p>To register for <b>%1</b> and find the best
dialing number, connect to the home page <b>%2</b>.</p>");

	    info = info + sformat(it, Provider::Provider["PROVIDER"]:"", hp);
	}

	if(hp == "" && hl != "") {
	    /* Provider info text */
	    string it = _("<p>To register for <b>%1</b> and find the best
dialing number, call the hotline <b>%2</b>.</p>");

	    info = info + sformat(it, Provider::Provider["PROVIDER"]:"", hl);
	}
    }

    return info;
}

/**
 * Provider dialog
 * @return dialog result
 */
global define symbol ProviderDialog() ``{

    string type = Provider::CurrentType();

    string name = Provider::Provider["PROVIDER"]:"";
    string username = Provider::Provider["USERNAME"]:"";
    string password = Provider::Provider["PASSWORD"]:"";
    string phone = Provider::Provider["PHONE"]:"";
    string encap = Provider::Provider["ENCAP"]:"";
    boolean ask_pass = Provider::Provider["ASKPASSWORD"]:"no" == "yes";
    string infotext = ProviderInfoText();

    boolean tonline = false;
    if (name == "T-Online") {
        username = "";
        tonline = true;
    }

    /* Provider dialog caption */
    string caption = _("Set parameters for the Internet connection");

    /* Provider dialog help 1/5 */
    string helptext = _("<p>Access to your Internet provider. If you have
selected your provider from the  list, these values are provided.</p>") +

    /* Provider dialog help 3/5 */
    _("<p>Enter a <b>name</b> for the provider and a <b>phone number</b>
to access your provider.</p>");

    if(type == "isdn")
	/* Provider dialog help 2/5 */
	helptext = helptext + _("<p>Select the type of packet encapsulation.
<b>RawIP</b> means that MAC headers are stripped. <b>SyncPPP</b> stands for
Synchronous PPP.</p>");

	/* Provider dialog help 4/5 */
	helptext = helptext + _("<p>Enter the <b>user name</b> and the
<b>password</b> to use as the login (ask your provider if unsure).</p>") +

	/* Provider dialog help 5/5 */
	_("<p>Check <b>Always ask</b> to be asked for
the password every time.</p>");

    /* Frame label */
    term auth = `Frame(`id(`auth), _("Authorization"), `HBox(
	`HSpacing(0.5),
	`VBox(
	    /* TextEntry label */
	    `TextEntry(`id(`username), _("&User name"), username),
	    `Label(""),
        `VSpacing(0.2)
	),
	`HSpacing(0.5),
	`VBox(
	    /* TextEntry label */
	    `Password(`id(`password), _("&Password"), password),
	    /* CheckBox label */
	    `Left(`CheckBox(`id(`askpass), `opt(`notify), _("&Always ask for password"), ask_pass)),
        `VSpacing(0.2)
	),
	`HSpacing(0.5)
    ));

    term encapbox = `VSpacing(0.1);
    if(type == "isdn") {
	/* ComboBox label */
	encapbox = `Left(`ComboBox(`id(`encap), `opt(`notify), _("Packet &encapsulation"), [
	    /* ComboBox item */
	    `item(`id("syncppp"), _("Synchronous PPP"), encap == "syncppp"),
	    /* ComboBox item */
	    `item(`id("rawip"), _("Raw IP"), encap == "rawip"),
	]));
	/*
	if (encap == "" && ISDN::operation == `addif)
		encap = lookup(ISDN::interface, "PROTOCOL", "syncppp");
	*/
    }

    /* TextEntry label */
    term namebox = `TextEntry(`id(`name), _("Pr&ovider name"), name);

    /* TextEntry label */
    term phonebox = `TextEntry(`id(`phone), _("P&hone number"), phone);

    if(type == "dsl") {
	phonebox = namebox;
	namebox = `VSpacing(0);
    }

    phonebox = `HBox(
	phonebox,
	`HSpacing(0.5),
	`VBox(
	    `Label(""),
	    /* PushButton label */
	    `PushButton(`id(`info), `opt(`disabled), _("&Info"))
	    )
    );

    term contents = `VBox(`VSpacing(2), `HBox(
	`HSpacing(4),
	`VBox(
	    `Left(`HBox(
		/* Label text */
		`Label(_("Name for dialing:")),
		`HSpacing(0.5),
		`Label(`opt(`outputField), Provider::Name)
	    )),
	    `VSpacing(1),
	    namebox,
	    `VSpacing(0.5),
	    phonebox,
	    `VSpacing(1),
	    encapbox,
	    `VSpacing(1),
	    auth
	    //`VSpacing(0.5),
	    //ip
	),
	`HSpacing(4)
    ),`VSpacing(2));

    Wizard::SetContentsButtons(caption, contents, helptext,
	    BackButtonLabel(), NextButtonLabel());

    /* '*' and '#' are for GPRS connections #16021 */
    ChangeWidgetIfExists(`id(`phone), `ValidChars, "0123456789*#" );

    // FIXME trying to fix bugs: #16756, #6244
    if(tonline)
        // the name should be generated some way
        UI::ChangeWidget(`id(`username), `ValidChars, "0123456789#" );

    if(infotext != nil && infotext != "")
	UI::ChangeWidget(`id(`info), `Enabled, true);

    if(ask_pass)
	UI::ChangeWidget(`id(`password), `Enabled, false);

    if(type == "isdn" && encap == "rawip") {
	// seems that disabling via frame is not possible
	// UI::ChangeWidget(`id(`auth), `Enabled, false);
	UI::ChangeWidget(`id(`askpass), `Enabled, false);
	UI::ChangeWidget(`id(`username), `Enabled, false);
	UI::ChangeWidget(`id(`password), `Enabled, false);
    }

    /* MAIN CYCLE */
    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	/* back */
	else if(ret == `back) {
	    break;
	}
	else if(ret == `encap) {
	    encap = UI::QueryWidget(`id(`encap), `Value);
	    // seems that disabling via frame is not possible
	    // UI::ChangeWidget(`id(`auth), `Enabled, true);
	    UI::ChangeWidget(`id(`askpass), `Enabled, encap == "syncppp");
	    UI::ChangeWidget(`id(`username), `Enabled, encap == "syncppp");
	    UI::ChangeWidget(`id(`password), `Enabled, encap == "syncppp" && !UI::QueryWidget(`id(`askpass), `Value));
	    continue;
	}
	else if(ret == `info) {
        /* Popup text */
	    UI::LongTextPopup(_("Provider info"), `RichText(infotext), 43, 13);
	    continue;
	}
	else if(ret == `askpass) {
	    UI::ChangeWidget(`id(`password), `Enabled, !UI::QueryWidget(`id(`askpass), `Value));
	    continue;
	}
	/* next */
	else if(ret == `next) {

	    /* check_* */
	    name = UI::QueryWidget(`id(`name), `Value);
	    username = UI::QueryWidget(`id(`username), `Value);
	    password = UI::QueryWidget(`id(`password), `Value);
	    ask_pass = UI::QueryWidget(`id(`askpass), `Value);
	    if(UI::WidgetExists(`id(`phone)))
		phone = UI::QueryWidget(`id(`phone), `Value);
	    boolean auth_chk = true;

	    if(type == "isdn") {
		encap = UI::QueryWidget(`id(`syncppp), `Value) ? "syncppp" : "rawip";
		if (encap == "rawip")
			auth_chk = false;
	    }

	    if(name != lookup(Provider::Provider, "PROVIDER", "") && !Provider::IsUnique(name)) {
		y2debug("n(%1), p(%2)",name,lookup(Provider::Provider, "PROVIDER", ""));
		/* MessagePopup text */
		UI::MessagePopup(sformat(_("Provider name %1 already exists."), name));
		UI::SetFocus(`id(`name));
		continue;
	    }
	    else if(name == "") {
		/* MessagePopup text */
		UI::MessagePopup(_("Enter the provider name."));
		UI::SetFocus(`id(`name));
		continue;
	    }
	    else if(UI::WidgetExists(`id(`phone)) && phone == "") {
		/* MessagePopup text */
		UI::MessagePopup(_("Enter the phone number."));
		UI::SetFocus(`id(`phone));
		continue;
	    }
	    else if(auth_chk && "" == username) {
		/* MessagePopup text */
		UI::MessagePopup(_("Enter the user name."));
		UI::SetFocus(`id(`username));
		continue;
	    }
	    /* password could be empty #16021
	    else if(!ask_pass && auth_chk && "" == pass)
	    {
		UI::MessagePopup(_("Enter the password."));
		UI::SetFocus(`id(`passwd));
	    } */
	    else if(filterchars(phone, "0123456789*#") != phone &&
		    /* YesNoPopup text */
		    !UI::YesNoPopup(_("You have entered some characters that are not numbers in the phone field.\n\nContinue?")))
	    {
		UI::SetFocus(`id(`PhoneNumber));
		continue;
	    }
	    else
		break;
	}
	else {
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }

    if(ret == `next) {
	Provider::Provider = union(Provider::Provider, $[
	    "PROVIDER"		: name,
	    "USERNAME"		: username,
	    "PASSWORD"		: password,
	    "PHONE"		: phone,
	    "ASKPASSWORD"	: ask_pass ? "yes" : "no",
	    "MODEMSUPPORTED"	: (type == "modem" ? "yes" : "no"),
	]);
	if(type == "isdn") {
	    Provider::Provider = union(Provider::Provider, $[
		"ENCAP"		: encap,
		"ISDNSUPPORTED"	: "yes",
	    ]);
	    if(ISDN::operation == `addif)
		ISDN::provider_file = Provider::Name;
	}
    }

    return ret;
}

/* EOF */
}
