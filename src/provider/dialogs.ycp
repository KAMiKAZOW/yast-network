/**
 * File:	include/network/provider/dialogs.ycp
 * Package:	Network configuration
 * Summary:	Provider dialogs
 * Authors:	Michal Svec <msvec@suse.cz>
 *		Petr Blahos <pblahos@suse.cz>
 *		Dan Vesely <dan@suse.cz>
 *
 * $Id$
 */

{

textdomain "network";

import "DSL";
import "Modem";
import "ISDN";
import "Provider";
import "Wizard";

include "network/provider/helps.ycp";

include "ui/common_popups.ycp";
include "ui/common_messages.ycp";

/**
 * Build provider info text.
 * @param prov provider settings
 * @return provider info text
 */
global define string getProviderInfoText(map prov) ``{
    string InfoText = "";
    string hp = lookup (prov, "HOMEPAGE", "");
    string hl = lookup (prov, "HOTLINE", "");
    if (hp != "")
    // provider info text (%2 is URL)
	InfoText = sformat (_("<p>%1Home page: %2</p>"), InfoText, hp);
    if (hl != "")
    // provider info text (%2 is phone no.)
	InfoText = sformat (_("<p>%1Hotline: %2</p>"), InfoText, hl);
    if (lookup (Provider::Provider, "DIALMESSAGE1", "") !="" || lookup (Provider::Provider, "DIALMESSAGE2", "") != "")
	InfoText = sformat("%1<p>%2%3</p>",
			    InfoText,
			    lookup (Provider::Provider, "DIALMESSAGE1", ""),
			    lookup (Provider::Provider, "DIALMESSAGE2", "")
		    );
    else if (lookup (Provider::Provider, "PHONE", "") == "")
    {
	if (hp != "" && hl != "")
	{
	    string it =
    // provider info text
_("<p>
To register for <b>%1</b> and find the best dialing number, connect to the
home page <b>%2</b> or call the hotline <b>%3</b>.
</p>");
	    InfoText = sformat(it, lookup (Provider::Provider, "PROVIDER", ""), hp, hl);
	}

	if (hp != "" && hl == "")
	{
	    string it =
    // provider info text
_("<p>
To register for <b>%1</b> and find the best dialing number, connect to the
home page <b>%2</b>.
</p>");
	    InfoText = sformat(it, lookup (Provider::Provider, "PROVIDER", ""), hp);
	}
	if (hp == "" && hl != "")
	{
	    string it =
    // provider info text
_("<p>
To register for <b>%1</b> and find the best dialing number, call the hotline
<b>%2</b>.
</p>");
	    InfoText = sformat(it, lookup (Provider::Provider, "PROVIDER", ""), hl);
	}
    }
    return InfoText;
}

/**
 * The SelectionBox "----" divider hack
 * @param provs list of providers for the current selection
 * @param prev previously selected provider
 * @return new provider selection
 */
global define any dividerHack(list provs, any prev) ``{
    integer p = -1;
    find(`e, provs, ``{
	p = p + 1;
	any id = select(select(e, 0, `id("x")), 0, "x");
	return id == prev;
    });
    integer i = -1;
    find(`e, provs, ``{
	i = i + 1;
	any id = select(select(e, 0, `id("x")), 0, "x");
	return id == ."--";
    });
    term item = select(provs, p < i ? i + 1 : i - 1, "");
    return select(select(item, 0, `id("x")), 0, "x");
}

/**
 * Providers dialog
 * @param type providers type to be shown ("all"|"modem"|"isdn"|"dsl")
 * @return symbol dialog result
 */
global define symbol ProvidersDialog(string type) ``{

    /* Provider dialog caption */
    string caption = _("Select Internet Service Provider (ISP)");

    string prev_country = "x";
    string country = (Provider::Name != nil && Provider::Name != "") ? "_custom" : nil;
    any provider = nil;

    list provs = [];

    /* Provider dialog contents */
    term contents = `HBox(
	`HSpacing(),
	`VBox(
	    `VSpacing(1),
	    `HBox(
		`HWeight(1, `VBox(
		    `RadioButtonGroup(`id(`radio), `VBox(
			/* RadioButton label */
			`RadioButton(`id(`custom), `opt(`hstretch, `notify), _("C&ustom providers"), country != nil),
			`VSpacing(0.2),
			/* RadioButton label */
			`RadioButton(`id(`country), `opt(`hstretch, `notify), _("&Countries"), country == nil)
		    )),
		    `HBox(
			`HSpacing(3.4),
			/* SelectionBox label */
			`SelectionBox(`id(`countries), `opt(`notify), _("&Select a country:"), Provider::GetCountries())
		    )
		)),
		`HSpacing(),
		`HWeight(1, `HBox(
		    `ReplacePoint(`id(`providers_rep), `VSpacing(1)),
		    `HSpacing(2.4)
		))
	    ),
	    `HBox(`HSpacing(3.4), `Label(`id(`homepage), `opt(`hstretch), "")),
	    `HBox(`HSpacing(3.4), `Label(`id(`hotline), `opt(`hstretch),  "")),
	    /* PushButton label (New provider) */
	    `PushButton(`id(`new), _("Ne&w")),
        `VSpacing(1)
	),
	`HSpacing()
    );

    Wizard::SetContentsButtons(caption, contents, HELPS["providers"]:"",
	    BackButtonLabel(), NextButtonLabel());

    /**
     * Update widgets in the ProviderDialog
     * @param re UserInput
     */
    define void UpdateProvider(any re) ``{

	/* Update custom and providers tables */
	if(re != `providers) {
	    if(UI::QueryWidget(`id(`custom), `Value))
		country = "_custom";
	    else
		country = UI::QueryWidget(`id(`countries), `CurrentItem);

	    UI::ChangeWidget(`id(`countries), `Enabled, country != "_custom");

	    if(country != prev_country) {
		provs = Provider::GetProviders(country, type, Provider::Name);
		y2debug("provs=%1", provs);
		UI::ReplaceWidget(`id(`providers_rep),
		    /* SelectionBox label */
		    `SelectionBox(`id(`providers), `opt(`notify), _("&Providers"), provs));
		prev_country = country;
	    }
	}

	/* Update provider info */
	any prev = provider;
	provider = UI::QueryWidget(`id(`providers), `CurrentItem);
	if(is(provider, path) && ."--" == provider) {
	    provider = dividerHack(provs, prev);
	    UI::ChangeWidget(`id(`providers), `CurrentItem, provider);
	}
	/* No provider found for the given type */
	if(provider == nil) return;

	if(UI::QueryWidget(`id(`custom), `Value))
	    /* Custom provider -> Select */
	    Provider::Select(provider);
	else
	    /* System provider -> SelectSystem */
	    Provider::SelectSystem(provider);

	string info = Provider::Provider["HOMEPAGE"]:"";
	/* Label text (param is URL) */
	if(info != "") info = sformat(_("Home page: %1"), info);
	UI::ChangeWidget(`id(`homepage), `Value, info);

	info = Provider::Provider["HOTLINE"]:"";
	/* Label text (param is phone) */
	if(info != "") info = sformat(_("Hot line: %1"), info);
	UI::ChangeWidget(`id(`hotline), `Value, info);
    }

    UpdateProvider(nil);

   /* MAIN CYCLE */
    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	/* back */
	else if(ret == `back) {
	    break;
	}
	/* next */
	else if(ret == `next || ret == `new) {
	    break;
	}
	/* custom providers */
	else if(ret == `custom || ret == `country || ret == `countries || ret == `providers) {
	    UpdateProvider(ret);
	    continue;
	}
	else {
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }

    /* New */
    if(ret == `new) {
	Provider::Add(type);
    }
    /* Next */
    else if(ret == `next) {
	if(UI::QueryWidget(`id(`custom), `Value))
	    /* Custom provider -> Clone */
	    Provider::Clone(provider);
	else
	    /* System provider -> SelectSystem */
	    Provider::CloneSystem(provider);
    }

    return ret;
}

/**
 * Provider dialog
 * @param type provider type (modem|isdn)
 * @return dialog result
 */
global define symbol ProviderDialog(string type) ``{

    string name = Provider::Provider["PROVIDER"]:"";
    string username = Provider::Provider["USERNAME"]:"";
    string password = Provider::Provider["PASSWORD"]:"";
    string phone = Provider::Provider["PHONE"]:"";
    string encap = Provider::Provider["ENCAP"]:"";
    boolean ask_pass = Provider::Provider["ASKPASSWORD"]:"no" == "yes";
    string infotext = getProviderInfoText(Provider::Provider);

    boolean tonline = false;
    if (name == "T-Online") {
        username = "";
        tonline = true;
    }

    /* Provider dialog caption */
    string caption = _("Set parameters for the Internet connection");

    /* Provider dialog help 1/5 */
    string helptext = _("<p>Access to your Internet provider. If you have
selected your provider from the  list, these values are provided.</p>") +

	/* Provider dialog help 3/5 */
	_("<p>Enter a <b>name</b> for the provider and a <b>phone number</b>
to access your provider.</p>
");

    if(type == "isdn")
	/* Provider dialog help 2/5 */
	helptext = helptext + _("<p>Select the type of packet encapsulation.
<b>RawIP</b> means that MAC headers are stripped. <b>SyncPPP</b> stands for
Synchronous PPP.</p>");

	/* Provider dialog help 4/5 */
	helptext = helptext + _("<p>Enter the <b>user name</b> and the
<b>password</b> to use as the login (ask your provider if unsure).
</p>
") +

	/* Provider dialog help 5/5 */
	_("<p>Check <b>Always ask</b> to be asked for
the password every time.</p>
");

    // frame label
    term auth = `Frame(`id(`auth), _("Authorization"), `HBox(
	`HSpacing(0.5),
	`VBox(
        // textentry label
	    `TextEntry(`id(`username), _("&User name"), username),
	    `Label(""),
        `VSpacing(0.2)
	),
	`HSpacing(0.5),
	`VBox(
        // password entry label
	    `Password(`id(`password), _("&Password"), password),
        // check box label
	    `Left(`CheckBox(`id(`askpass), `opt(`notify), _("&Always ask for password"), ask_pass)),
        `VSpacing(0.2)
	),
	`HSpacing(0.5)
    ));

    term rbgroup = `VSpacing(0.1);
    if(type == "isdn") {
	if (encap == "" && ISDN::operation == `addif)
		encap = lookup(ISDN::interface, "PROTOCOL", "syncppp");
	// frame label
	rbgroup = `Left(`Frame(_("Packet encapsulation"),
        `HBox(
         `VBox(
	    `VSpacing(0.4),
	    `RadioButtonGroup(`id(`raw), `opt(`notify), `HBox(
		`HSpacing(0.5),
		`RadioButton(`id(`syncppp), `opt(`notify), "&Sync PPP", encap != "rawip"),
		`HSpacing(0.5),
		`RadioButton(`id(`rawip), `opt(`notify), "Ra&w IP", encap == "rawip"),
		`HSpacing(0.5)
	    )),
	    `VSpacing(0.4)
	    ),
        `HWeight(1,`Label(""))
        )));
    }

    term contents = `VBox(`VSpacing(3), `HBox(
	`HSpacing(4),
	`VBox(
	    `Left(`HBox(
        // Label text
		`Label(_("Name for dialing:")),
		`HSpacing(0.5),
        `HWeight(1,
		`Label(`opt(`outputField), Provider::Name))
	    )),
	    `VSpacing(1),
        // text entry label
	    `TextEntry(`id(`name), _("Pr&ovider name"), name),
	    `VSpacing(0.5),
	    `HBox(
        // text entry label
		`TextEntry(`id(`phone), _("P&hone number"), phone),
		`HSpacing(0.5),
		`VBox(
		    `Label(""),
            // button label
		    `PushButton(`id(`info), `opt(`disabled), _("&Info"))
		    )
	    ),
	    `VSpacing(1),
	    rbgroup,
	    `VSpacing(1),
	    auth
	    //`VSpacing(0.5),
	    //ip
	),
	`HSpacing(4)
    ),`VSpacing(3));

    Wizard::SetContentsButtons(caption, contents, helptext,
	    BackButtonLabel(), NextButtonLabel());

    /* '*' and '#' are for GPRS connections #16021 */
    UI::ChangeWidget(`id(`phone), `ValidChars, "0123456789*#" );

    // trying to fix bugs: #16756, #6244
    if (tonline) {
        // the name should be generated some way
        UI::ChangeWidget(`id(`username), `ValidChars, "0123456789#" );
    }

    if(infotext != nil && infotext != "")
	UI::ChangeWidget(`id(`info), `Enabled, true);

    if(ask_pass)
	UI::ChangeWidget(`id(`password), `Enabled, false);

    if(type == "isdn" && encap == "rawip") {
	// seems that disabling via frame is not possible
	// UI::ChangeWidget(`id(`auth), `Enabled, false);
	UI::ChangeWidget(`id(`askpass), `Enabled, false);
	UI::ChangeWidget(`id(`username), `Enabled, false);
	UI::ChangeWidget(`id(`password), `Enabled, false);
    }

    /* MAIN CYCLE */
    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	/* back */
	else if(ret == `back) {
	    break;
	}
	else if(ret == `syncppp) {
	    // seems that disabling via frame is not possible
	    // UI::ChangeWidget(`id(`auth), `Enabled, true);
	    UI::ChangeWidget(`id(`askpass), `Enabled, true);
	    UI::ChangeWidget(`id(`username), `Enabled, true);
	    UI::ChangeWidget(`id(`password), `Enabled, !UI::QueryWidget(`id(`askpass), `Value));
	    continue;
	}
	else if(ret == `rawip) {
	    // seems that disabling via frame is not possible
	    // UI::ChangeWidget(`id(`auth), `Enabled, false);
	    UI::ChangeWidget(`id(`askpass), `Enabled, false);
	    UI::ChangeWidget(`id(`username), `Enabled, false);
	    UI::ChangeWidget(`id(`password), `Enabled, false);
	    continue;
	}
	else if(ret == `info) {
        // Popup text
	    UI::LongTextPopup(_("Provider info"), `RichText(infotext), 43, 13);
	    continue;
	}
	else if(ret == `askpass) {
	    UI::ChangeWidget(`id(`password), `Enabled, !UI::QueryWidget(`id(`askpass), `Value));
	    continue;
	}
	/* next */
	else if(ret == `next) {

	    /* check_* */
	    name = UI::QueryWidget(`id(`name), `Value);
	    phone = UI::QueryWidget(`id(`phone), `Value);
	    username = UI::QueryWidget(`id(`username), `Value);
	    password = UI::QueryWidget(`id(`password), `Value);
	    ask_pass = UI::QueryWidget(`id(`askpass), `Value);
	    boolean auth_chk = true;

	    if(type == "isdn") {
		encap = UI::QueryWidget(`id(`syncppp), `Value) ? "syncppp" : "rawip";
		if (encap == "rawip")
			auth_chk = false;
	    }

	    if(name != lookup(Provider::Provider, "PROVIDER", "") && !Provider::IsUnique(name)) {
		y2security("n(%1), p(%2)",name,lookup(Provider::Provider, "PROVIDER", ""));
        // MessagePopup text (%1 is provider name)
		UI::MessagePopup(sformat(_("Connection name %1 already exists."), name));
		UI::SetFocus(`id(`name));
		continue;
	    }
	    else if(name == "") {
        // MessagePopup text
		UI::MessagePopup(_("Enter the connection name."));
		UI::SetFocus(`id(`name));
		continue;
	    }
	    else if("" == phone) {
        // MessagePopup text
		UI::MessagePopup(_("Enter the phone number."));
		UI::SetFocus(`id(`phone));
		continue;
	    }
	    else if(auth_chk && "" == username) {
        // MessagePopup text
		UI::MessagePopup(_("Enter the user name."));
		UI::SetFocus(`id(`username));
		continue;
	    }
	    /* password could be empty #16021
	    else if(!ask_pass && auth_chk && "" == pass)
	    {
		UI::MessagePopup(_("Enter the password."));
		UI::SetFocus(`id(`passwd));
	    } */
	    else if(filterchars(phone, "0123456789*#") != phone &&
            // YesNoPopup text
		    !UI::YesNoPopup(_("You have entered some characters that are not numbers in the phone field.\n\nContinue?")))
	    {
		UI::SetFocus(`id(`PhoneNumber));
		continue;
	    }
	    else
		break;
	}
	else {
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }

    if(ret == `next) {
	Provider::Provider = union(Provider::Provider, $[
	    "PROVIDER"		: name,
	    "USERNAME"		: username,
	    "PASSWORD"		: password,
	    "PHONE"		: phone,
	    "ASKPASSWORD"	: ask_pass ? "yes" : "no",
	    "MODEMSUPPORTED"	: (type == "modem" ? "yes" : "no"),
	]);
	if(type == "isdn") {
	    Provider::Provider = union(Provider::Provider, $[
		"ENCAP"		: encap,
		"ISDNSUPPORTED"	: "yes",
	    ]);
	    if(ISDN::operation == `addif)
		ISDN::provider_file = Provider::Name;
	}
    }

    return ret;
}

if(false) {
    Wizard::CreateDialog();
    Provider::Read();
    Provider::Name = "contactel_praha";
    ProviderDialog("modem");
    //ProviderDialog("dsl");
}
if(false) {
    Wizard::CreateDialog();
    Provider::Read();
    Provider::Name = "provider0";
    Provider::Provider = $[ "ENCAP":"rawip"];
    ProviderDialog("modem");
    ProviderDialog("isdn");
}

/* EOF */
}
