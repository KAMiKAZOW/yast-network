/**
 * File:	include/network/provider/dialogs.ycp
 * Package:	Network configuration
 * Summary:	Provider dialogs
 * Authors:	Michal Svec <msvec@suse.cz>
 *		Petr Blahos <pblahos@suse.cz>
 *		Dan Vesely <dan@suse.cz>
 *
 * $Id$
 */

{

textdomain "network";

import "ISDN";
import "Provider";
import "Wizard";

include "network/provider/helps.ycp";

include "ui/common_popups.ycp";
include "ui/common_messages.ycp";

/**
 * The SelectionBox "----" divider hack
 * @param provs list of providers for the current selection
 * @param prev previously selected provider
 * @return new provider selection
 */
global define any dividerHack(list provs, any prev) ``{
    integer p = -1;
    find(term e, provs, ``{
	p = p + 1;
	any id = select(select(e, 0, `id("x")), 0, "x");
	return id == prev;
    });
    integer i = -1;
    find(term e, provs, ``{
	i = i + 1;
	any id = select(select(e, 0, `id("x")), 0, "x");
	return id == ."--";
    });
    term item = select(provs, p < i ? i + 1 : i - 1, "");
    return select(select(item, 0, `id("x")), 0, "x");
}

/**
 * Providers dialog
 * @param edit true in case of edit sequence
 * @return symbol dialog result
 */
global define symbol ProvidersDialog(boolean edit) ``{

    ScreenName("provider-list");

    /* Provider dialog caption */
    string caption = _("Select Internet Service Provider (ISP)");

    string prev_country = "x";
    // #23994, don't select custom providers if there are none.
    // Provider::Name is "provider0" so the former check did not work.
    // GetProviders may be an overkill, feel free to optimize.
    string country = (Provider::GetProviders ("_custom", Provider::Name) != []) ? "_custom" : nil;
    any provider = nil;

    list provs = [];

    /* Provider dialog contents */
    term contents = `HBox(
	`HSpacing(),
	`VBox(
	    `VSpacing(1),
	    `HBox(
		`HWeight(1, `VBox(
		    `RadioButtonGroup(`id(`radio), `VBox(
			/* RadioButton label */
			`RadioButton(`id(`custom), `opt(`hstretch, `notify), _("C&ustom Providers"), country != nil),
			`VSpacing(0.2),
			/* RadioButton label */
			`RadioButton(`id(`country), `opt(`hstretch, `notify), _("&Countries"), country == nil)
		    )),
		    `HBox(
			`HSpacing(3.4),
			/* SelectionBox label */
			`SelectionBox(`id(`countries), `opt(`notify), _("&Select a country:"), Provider::GetCountries())
		    )
		)),
		`HSpacing(),
		`HWeight(1, `HBox(
		    `ReplacePoint(`id(`providers_rep), `VSpacing(1)),
		    `HSpacing(2.4)
		))
	    ),
	    `HBox(`HSpacing(3.4), `Label(`id(`homepage), `opt(`hstretch), "")),
	    `HBox(`HSpacing(3.4), `Label(`id(`hotline), `opt(`hstretch),  "")),
	    /* PushButton label (New provider) */
	    `PushButton(`id(`new), _("Ne&w")),
        `VSpacing(1)
	),
	`HSpacing()
    );

    Wizard::SetContentsButtons(caption, contents, HELPS["providers"]:"",
	    BackButtonLabel(), NextButtonLabel());

    /**
     * Update widgets in the ProviderDialog
     * @param re UserInput
     */
    define void UpdateProvider(any re) ``{

	/* Update custom and providers tables */
	if(re != `providers) {
	    if(UI::QueryWidget(`id(`custom), `Value))
		country = "_custom";
	    else
		country = UI::QueryWidget(`id(`countries), `CurrentItem);

	    UI::ChangeWidget(`id(`countries), `Enabled, country != "_custom");

	    if(country != prev_country) {
		provs = Provider::GetProviders(country, Provider::Name);
		y2debug("provs=%1", provs);
		UI::ReplaceWidget(`id(`providers_rep),
		    /* SelectionBox label */
		    `SelectionBox(`id(`providers), `opt(`notify), _("&Providers"), provs));
		prev_country = country;
	    }
	}

	/* Update provider info */
	any prev = provider;
	provider = UI::QueryWidget(`id(`providers), `CurrentItem);
	if(is(provider, path) && ."--" == provider) {
	    provider = dividerHack(provs, prev);
	    UI::ChangeWidget(`id(`providers), `CurrentItem, provider);
	}
	/* No provider found for the given type */
	if(provider == nil) {
	    UI::ChangeWidget(`id(`homepage), `Value, "");
	    UI::ChangeWidget(`id(`hotline), `Value, "");
	    return;
	}

	if(UI::QueryWidget(`id(`custom), `Value))
	    /* Custom provider -> Select */
	    Provider::Select(provider);
	else
	    /* System provider -> SelectSystem */
	    Provider::SelectSystem(provider);

	string info = Provider::Provider["HOMEPAGE"]:"";
	/* Label text (param is URL) */
	if(info != "") info = sformat(_("Home Page: %1"), info);
	UI::ChangeWidget(`id(`homepage), `Value, info);

	info = Provider::Provider["HOTLINE"]:"";
	/* Label text (param is phone) */
	if(info != "") info = sformat(_("Hot Line: %1"), info);
	UI::ChangeWidget(`id(`hotline), `Value, info);
    }

    UpdateProvider(nil);

   /* MAIN CYCLE */
    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	/* back */
	else if(ret == `back) {
	    break;
	}
	/* next */
	else if(ret == `next || ret == `new) {
	    UpdateProvider(ret);
	    break;
	}
	/* custom providers */
	else if(ret == `custom || ret == `country || ret == `countries || ret == `providers) {
	    UpdateProvider(ret);
	    continue;
	}
	else {
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }

    /* New or no provider found */
    if(ret == `new || provider == nil) {
	Provider::Add(Provider::CurrentType());
    }
    /* Next */
    else if(ret == `next) {
	/* Custom provider */
	if(UI::QueryWidget(`id(`custom), `Value)) {
	    if(edit)
		/* Edit existent */
		Provider::Edit(provider);
	    else
		/* Clone existent */
		Provider::Clone(provider);
	}
	else
	    /* System provider -> SelectSystem */
	    Provider::CloneSystem(provider);
    }

    return ret;
}

/* EOF */
}
