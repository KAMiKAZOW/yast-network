/**
 * File:	include/network/providers/dialogs.ycp
 * Package:	Configuration of network
 * Summary:	Providers dialogs
 * Authors:	Michal Svec <msvec@suse.cz>
 *		Petr Blahos <pblahos@suse.cz>
 *		Dan Vesely <dan@suse.cz>
 *
 * $Id$
 */

{

textdomain "network";

import "DSL";
import "Modem";
import "ISDN";
import "Providers";
import "Wizard";

include "ui/common_popups.ycp";
include "ui/common_messages.ycp";

/**
 * Build provider info text.
 * @param prov provider settings
 * @return provider info text
 */
global define string getProviderInfoText(map prov) ``{
    string InfoText = "";
    string hp = lookup (prov, "HOMEPAGE", "");
    string hl = lookup (prov, "HOTLINE", "");
    if (hp != "")
	InfoText = sformat (_("<p>%1Home page: %2</p>"), InfoText, hp);
    if (hl != "")
	InfoText = sformat (_("<p>%1Hotline: %2</p>"), InfoText, hl);
    if (lookup (Providers::provider, "DIALMESSAGE1", "") !="" || lookup (Providers::provider, "DIALMESSAGE2", "") != "")
	InfoText = sformat("%1<p>%2%3</p>",
			    InfoText,
			    lookup (Providers::provider, "DIALMESSAGE1", ""),
			    lookup (Providers::provider, "DIALMESSAGE2", "")
		    );
    else if (lookup (Providers::provider, "PHONE", "") == "")
    {
	if (hp != "" && hl != "")
	{
	    string it =
_("<p>
To register for <b>%1</b> and find the best dialing number, connect to the
home page <b>%2</b> or call the hotline <b>%3</b>.
</p>");
	    InfoText = sformat(it, lookup (Providers::provider, "PROVIDER", ""), hp, hl);
	}

	if (hp != "" && hl == "")
	{
	    string it =
_("<p>
To register for <b>%1</b> and find the best dialing number, connect to the
home page <b>%2</b>.
</p>");
	    InfoText = sformat(it, lookup (Providers::provider, "PROVIDER", ""), hp);
	}
	if (hp == "" && hl != "")
	{
	    string it =
_("<p>
To register for <b>%1</b> and find the best dialing number, call the hotline
<b>%2</b>.
</p>");
	    InfoText = sformat(it, lookup (Providers::provider, "PROVIDER", ""), hl);
	}
    }
    return InfoText;
}

/**
 * The SelectionBox "----" divider hack
 * @param provs list of providers for the current selection
 * @param prev previously selected provider
 * @return new provider selection
 */
global define any dividerHack(list provs, any prev) ``{
    integer p = -1;
    find(`e, provs, ``{
	p = p + 1;
	any id = select(select(e, 0, `id("x")), 0, "x");
	return id == prev;
    });
    integer i = -1;
    find(`e, provs, ``{
	i = i + 1;
	any id = select(select(e, 0, `id("x")), 0, "x");
	return id == ."--";
    });
    term item = select(provs, p < i ? i + 1 : i - 1, "");
    return select(select(item, 0, `id("x")), 0, "x");
}

/**
 * Providers dialog
 * @param type providers type to be shown ("all"|"modem"|"isdn"|"dsl")
 * @return symbol dialog result
 */
global define symbol ProvidersDialog(string type) ``{

    /* Providers dialog caption */
    string caption = _("Select Internet Service Provider (ISP)");

    /* Providers dialog help 1/3 */
    string helptext = _("<p>Select the appropriate <b>provider</b>.</p>");

    /* Providers dialog help 2/3 */
    helptext = helptext + _("<p>Choose the country or region where you are
located then choose one of the listed providers.</p>") +

    /* Providers dialog help 3/3 */
    _("<p>Use the <b>New</b> button to add a provider not in the list.</p>");

    string prev_country = "x";
    string country = (Providers::provShortName != nil && Providers::provShortName != "") ? "_custom" : nil;
    any provider = nil;

    list provs = [];

    /* Providers dialog contents */
    term contents = `HBox(
	`HSpacing(),
	`VBox(
	    `VSpacing(1),
	    `HBox(
		`HWeight(1, `VBox(
		    `RadioButtonGroup(`id(`radio), `VBox(
			`RadioButton(`id(`custom), `opt(`hstretch, `notify), _("C&ustom Providers"), country != nil),
			`VSpacing(0.2),
			`RadioButton(`id(`country), `opt(`hstretch, `notify), _("&Countries"), country == nil)
		    )),
		    `HBox(
			`HSpacing(3.4),
			`SelectionBox(`id(`countries), `opt(`notify), _("&Select a country:"), Providers::GetCountries())
		    )
		)),
		`HSpacing(),
		`HWeight(1, `HBox(
		    `ReplacePoint(`id(`providers_rep), `VSpacing(1)),
		    `HSpacing(2.4)
		))
	    ),
	    `HBox(`HSpacing(3.4), `Label(`id(`homepage), `opt(`hstretch), "")),
	    `HBox(`HSpacing(3.4), `Label(`id(`hotline), `opt(`hstretch),  "")),
	    `PushButton(`id(`new), _("Ne&w"))
	),
	`HSpacing()
    );

    Wizard::SetContentsButtons(caption, contents, helptext,
	    BackButtonLabel(), NextButtonLabel());

    /**
     * Update widgets in the ProviderDialog
     * @param re UserInput
     */
    define void UpdateProvider(any re) ``{
	/* update custom and providers tables */
	if(re != `providers) {
	    if(UI::QueryWidget(`id(`custom), `Value))
		country = "_custom";
	    else
		country = UI::QueryWidget(`id(`countries), `CurrentItem);

	    UI::ChangeWidget(`id(`countries), `Enabled, country != "_custom");

	    if(country != prev_country) {
		provs = Providers::GetProviders(country, type, Providers::provShortName);
		y2debug("provs=%1", provs);
		UI::ReplaceWidget(`id(`providers_rep),
			`SelectionBox(`id(`providers), `opt(`notify), _("&Provider"), provs));
		prev_country = country;
	    }
	}

	/* update provider info */
	any prev = provider;
	provider = UI::QueryWidget(`id(`providers), `CurrentItem);
	if(is(provider, path) && ."--" == provider) {
	    provider = dividerHack(provs, prev);
	    UI::ChangeWidget(`id(`providers), `CurrentItem, provider);
	}
	map p = Providers::GetProvider(provider);
	string tmp = lookup(p, "HOMEPAGE", nil);
	tmp = ((nil == tmp || "" == tmp) ? "" : sformat(_("Home Page: %1"), tmp));
	UI::ChangeWidget(`id(`homepage), `Value, tmp);
	tmp = lookup(p, "HOTLINE", nil);
	tmp = ((nil == tmp || "" == tmp) ? "" : sformat(_("Hot Line: %1"), tmp));
	UI::ChangeWidget(`id(`hotline), `Value, tmp);
    }

    UpdateProvider(nil);

   /* MAIN CYCLE */
    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	/* back */
	else if(ret == `back) {
	    break;
	}
	/* next */
	else if(ret == `next || ret == `new) {
	    break;
	}
	/* custom providers */
	else if(ret == `custom || ret == `country || ret == `countries || ret == `providers) {
	    UpdateProvider(ret);
	    continue;
	}
	else {
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }

    /* next */
    if(ret == `next || ret == `new) {
	if(ret == `new || provider == nil) {
	    Providers::provider = $[];
	    Providers::editProvider(true);
	}
	else {
	    Providers::provider = Providers::GetProvider(provider);
	    Providers::editProvider(false);
	}
    }

    return ret;
}

/**
 * Provider dialog
 * @param type provider type (modem|isdn)
 * @return dialog result
 */
global define symbol ProviderDialog(string type) ``{

    string name = lookup(Providers::provider, "PROVIDER", "");
    string shortname = lookup(Providers::provider, "ShortName", "");
    string username = lookup(Providers::provider, "USERNAME", "");
    string password = lookup(Providers::provider, "PASSWORD", "");
    string phone = lookup(Providers::provider, "PHONE", "");
    string encap = lookup(Providers::provider, "ENCAP", "syncppp");
    boolean ask_pass = lookup(Providers::provider, "ASKPASSWORD", "no") == "yes";
    string infotext = getProviderInfoText(Providers::provider);

    /* Provider dialog caption */
    string caption = _("Set parameters for the Internet connection");

    /* Provider dialog help 1/5 */
    string helptext = _("<p>Access to your Internet provider. If you have
selected your provider from the  list, these values are provided.</p>") +

	/* Provider dialog help 3/5 */
	_("<p>Enter a <b>name</b> of the provider and a <b>phone number</b>
to access your provider.</p>");

    if(type == "isdn")
	/* Provider dialog help 2/5 */
	helptext = helptext + _("<p>Select the type of packet encapsulation.
<b>RawIP</b> means that MAC headers are stripped. <b>SyncPPP</b> stands for
Synchronous PPP.</p>");

	/* Provider dialog help 4/5 */
	helptext = helptext + _("<p>Enter the <b>user name</b> and the
<b>password</b> to use for logging in (ask your provider if you are not sure).
</p>") +

	/* Provider dialog help 5/5 */
	_("<p>Check the <b>Always ask</b> button to have it always ask for
the password.</p>");

    term auth = `Frame(`id(`auth), _("Authorization"), `HBox(
	`HSpacing(0.5),
	`VBox(
	    `Label(""),
	    `TextEntry(`id(`username), _("&User name"), username)
	),
	`HSpacing(0.5),
	`VBox(
	    `Left(`CheckBox(`id(`askpass), `opt(`notify), _("&Always ask for password"), ask_pass)),
	    `Password(`id(`password), _("&Password"), password)
	),
	`HSpacing(0.5)
    ));

    term rbgroup = `VSpacing(0.1);
    if(type == "isdn")
	rbgroup = `Left(`Frame(_("Packet encapsulation"), `VBox(
	    `VSpacing(0.4),
	    `RadioButtonGroup(`id(`raw), `opt(`notify), `HBox(
		`HSpacing(0.5),
		`RadioButton(`id(`syncppp), `opt(`notify), "&Sync PPP", encap != "rawip"),
		`HSpacing(0.5),
		`RadioButton(`id(`rawip), `opt(`notify), "Ra&w IP", encap == "rawip"),
		`HSpacing(0.5)
	    )),
	    `VSpacing(0.4)
	)));

    /*
    term ip = `Frame(`id(`ip), _("IP address settings"), `HBox(
	`TextEntry(`id(`Username), _("&Local IP address"), provUsername),
	`HSpacing(0.5),
	`TextEntry(`id(`passwd), _("&Remote IP address"), provPassword)
    ));
    */

    term contents = `VBox(`VSpacing(3), `HBox(
	`HSpacing(4),
	`VBox(
	    `Left(`HBox(
		`Label(_("Name for dialing:")),
		`HSpacing(0.5),
		`Label(`opt(`outputField), shortname)
	    )),
	    `VSpacing(1),
	    `TextEntry(`id(`name), _("Pr&ovider name"), name),
	    `VSpacing(0.5),
	    `HBox(
		`TextEntry(`id(`phone), _("P&hone number"), phone),
		`HSpacing(0.5),
		`VBox(
		    `Label(""),
		    `PushButton(`id(`info), `opt(`disabled), _("&Info"))
		    )
	    ),
	    `VSpacing(1),
	    rbgroup,
	    //`Left(`CheckBox(`id(`raw), `opt(`notify), "Raw IP")),
	    `VSpacing(1),
	    auth
	    //`VSpacing(0.5),
	    //ip
	),
	`HSpacing(4)
    ),`VSpacing(3));

    Wizard::SetContentsButtons(caption, contents, helptext,
	    BackButtonLabel(), NextButtonLabel());

    /* '*' and '#' are for GPRS connections #16021 */
    UI::ChangeWidget(`id(`phone), `ValidChars, "0123456789*#" );

    if(infotext != nil && infotext != "")
	UI::ChangeWidget(`id(`info), `Enabled, true);

    if(ask_pass)
	UI::ChangeWidget(`id(`password), `Enabled, false);

    if(type == "isdn" && encap == "rawip")
	UI::ChangeWidget(`id(`auth), `Enabled, false);

    /* MAIN CYCLE */
    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	/* back */
	else if(ret == `back) {
	    break;
	}
	else if(ret == `syncppp) {
	    UI::ChangeWidget(`id(`auth), `Enabled, true);
	    continue;
	}
	else if(ret == `rawip) {
	    UI::ChangeWidget(`id(`auth), `Enabled, false);
	    continue;
	}
	else if(ret == `info) {
	    UI::LongTextPopup(_("Provider info"), `RichText(infotext), 43, 13);
	    continue;
	}
	else if(ret == `askpass) {
	    UI::ChangeWidget(`id(`password), `Enabled, !UI::QueryWidget(`id(`askpass), `Value));
	    continue;
	}
	/* next */
	else if(ret == `next) {

	    /* check_* */
	    name = UI::QueryWidget(`id(`name), `Value);
	    phone = UI::QueryWidget(`id(`phone), `Value);
	    username = UI::QueryWidget(`id(`username), `Value);
	    password = UI::QueryWidget(`id(`password), `Value);
	    ask_pass = UI::QueryWidget(`id(`askpass), `Value);

	    if(type == "isdn")
		encap = UI::QueryWidget(`id(`syncppp), `Value) ? "syncppp" : "rawip";

	    if(name != lookup(Providers::provider, "PROVIDER", "") && !Providers::IsProviderUnique(name))
	    {
		UI::MessagePopup(sformat(_("Connection Name %1 already exists."), name));
		UI::SetFocus(`id(`name));
		continue;
	    }
	    else if(name == "")
	    {
		UI::MessagePopup(_("Enter the connection name."));
		UI::SetFocus(`id(`name));
		continue;
	    }
	    else if("" == phone)
	    {
		UI::MessagePopup(_("Enter the phone number."));
		UI::SetFocus(`id(`phone));
		continue;
	    }
	    else if("" == username)
	    {
		UI::MessagePopup(_("Enter the user name."));
		UI::SetFocus(`id(`username));
		continue;
	    }
	    /* password could be empty #16021
	    else if(!ask_pass && "" == pass)
	    {
		UI::MessagePopup(_("Enter the password."));
		UI::SetFocus(`id(`passwd));
	    } */
	    else if(filterchars(phone, "0123456789") != phone &&
		    !UI::YesNoPopup(_("You have entered some characters that are not numbers in the phone field.\n\nContinue?")))
	    {
		UI::SetFocus(`id(`PhoneNumber));
		continue;
	    }
	    else
		break;
	}
	else {
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }

    if(ret == `next) {
	Providers::provider = union(Providers::provider, $[
	    "PROVIDER"		: name,
	    "ShortName"		: shortname,
	    "USERNAME"		: username,
	    "PASSWORD"		: password,
	    "PHONE"		: phone,
	    "ENCAP"		: encap,
	    "ASKPASSWORD"	: ask_pass ? "yes" : "no",
	    "ISDNSUPPORTED"	: (type == "isdn" ? "yes" : "no"),
	    "MODEMSUPPORTED"	: (type == "modem" ? "yes" : "no"),
	]);
    }

    return ret;
}

if(false) {
    Wizard::CreateDialog();
    Providers::Read();
    Providers::provShortName = "contactel_praha";
    ProvidersDialog("modem");
    //ProvidersDialog("dsl");
}
if(false) {
    Wizard::CreateDialog();
    Providers::Read();
    Providers::provider = $[ "ShortName" : "provider0", "ENCAP":"rawip"];
    ProviderDialog("modem");
    ProviderDialog("isdn");
}

/* EOF */
}
