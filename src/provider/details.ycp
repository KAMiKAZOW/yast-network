/**
 * File:	include/network/providers/details.ycp
 * Package:	Configuration of network
 * Summary:	Providers details configuration dialogs
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

textdomain "network";

import "DSL";
import "Modem";
import "ISDN";
import "Firewall";
import "Providers";
import "Wizard";

include "ui/common_popups.ycp";
include "network/routines.ycp";
include "network/ip.ycp";

/**
 * IP details dialog
 * @param type provider type (modem|isdn)
 * @return dialog result
 */
global define symbol IPDetailsDialog(string type) ``{

    /* PREPARE VARIABLES */

    /* FIXME: help texts, contents */
    string Local_IP = lookup(Providers::provider, "IPADDR", "");
    string Remote_IP = lookup(Providers::provider, "REMOTE_IPADDR", "");

    string encap = lookup(Providers::provider, "ENCAP", "syncppp");
    boolean defaultroute = lookup(Providers::provider, "DEFAULTROUTE", false);
    boolean modifyip = lookup(Providers::provider, "MODIFYIP", true);

    /* DIALOG TEXTS and  DIALOG CONTENTS */

    string caption = _("ISDN IP address settings");

    // help text 1/3
    string helptext =
_("<p>Please fill in the IP addresses if you got an fixed IP address
from your provider for syncppp or you use raw IP.</p>");

    // help text 2/3
    helptext = helptext +
_("<p>Check the button for <b>dynamic IP address</b> if your provider
assign you one temporary address per connection. In this case the
outgoing address is unknown until the moment the link is established.
This is the default with most providers.
</p>");

    if(encap != "rawip")
        // help text 3/3
	helptext = helptext +
_("<p>Check the button for <b>Use peer DNS</b> if you want to change
your domain name servers after the connection is up. (This replace your static
DNS configuraton with obtained DNS server IP addresses) Today, almost all
providers support <b>Use peer DNS</b>.</p>");

    helptext = helptext +
    // help text 1/3
_("<p>If callback mode is off,  calls  are handled normally without special 
processing.</p>");

    // helptext text 2/3
    helptext = helptext +
_("<p>If callback mode is server, after getting an incoming call, a callback 
is triggered.</p>");

    // helptext text 3/3
    helptext = helptext +
_("If callback mode is client, the local system does the initial call then 
waits for callback of the remote machine.");


    term contents = nil;

    if(encap == "rawip") {
	contents =
	    //`HSquash(
		`VBox(
		    `Frame(_("IP address settings"),
			`HBox(
			    `HSpacing(),
			    `VBox(
				`VSpacing(),
				`Left(`TextEntry(`id(`IP_local), _("&Local IP address of your machine"), Local_IP)),
				`Left(`TextEntry(`id(`IP_remote), _("Re&mote IP address"), Remote_IP)),
				`VSpacing()
			    ),
			    `HSpacing()
			)
		    ),
		    `VSpacing(),
		    `Left(`CheckBox(`id(`defaultroute), _("D&efaultroute"), defaultroute))
		//)
	    );
    }
    else
    {
	contents =
	    `HSquash(
		`VBox(
		    `Frame(_("IP address settings"),
			`HBox(
			    `HSpacing(),
			    `VBox(
				`VSpacing(),
				`Left(`CheckBox(`id(`modifyip), `opt(`notify), _("&Dynamic IP address"), modifyip)),
				`VSpacing(),
				`Left(`TextEntry(`id(`IP_local), _("&Local IP address of your machine"), Local_IP)),
                                `Left(`TextEntry(`id(`IP_remote), _("Re&mote IP address"), Remote_IP)),
				`VSpacing()
			    ),
			    `HSpacing()
			)
		    ),
		    `VSpacing(),
		    `Left(`CheckBox(`id(`defaultroute), _("D&efaultroute"), defaultroute))
		)
	    );
    }

    contents = `VBox(contents,`VSpacing(0.5),
	`HSquash(
	    `Frame(_("Callback functions"),
		`RadioButtonGroup(`id(`callback),
		    `HBox(
			`HSpacing(0.5),
			`VBox(
			    `Left(`RadioButton(`id("off"), _("Callbac&k Off"), ISDN::callback == "off")),
			    `Left(`RadioButton(`id("in"), _("Callback &Server"), ISDN::callback == "in")),
			    `Left(`RadioButton(`id("out"), _("Callback &Client"), ISDN::callback == "out"))
			)
		    )
		)
	    )
	));

    /* DIALOG PREPARE */
    Wizard::SetContentsButtons(caption, contents, helptext,
	    BackButtonLabel(), NextButtonLabel());

    if(modifyip && encap != "rawip") {
	UI::ChangeWidget(`id(`IP_local), `Enabled, false);
	UI::ChangeWidget(`id(`IP_remote), `Enabled, false);
    }

    /* MAIN CYCLE */
    symbol ret = nil;
    while(true) {
	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(UI::ReallyAbortPopup(true))
		break;
	    else
		continue;
	} else if(ret == `modifyip) {
	    boolean dip = UI::QueryWidget(`id(`modifyip), `Value);
	    UI::ChangeWidget(`id(`IP_local), `Enabled, !dip);
	    UI::ChangeWidget(`id(`IP_remote), `Enabled, !dip);
	    continue;
	}
	/* back */
	else if(ret == `back) {
	    break;
	}
	/* next */
	else if(ret == `next) {
	    Local_IP = UI::QueryWidget(`id(`IP_local), `Value);
	    Remote_IP = UI::QueryWidget(`id(`IP_remote), `Value);
	    defaultroute = UI::QueryWidget(`id(`defaultroute), `Value);
	    //callback = UI::QueryWidget(`id(`callback), `Value);

	    if(encap != "rawip")
		modifyip = UI::QueryWidget(`id(`modifyip), `Value);

	    if((encap=="rawip" || !modifyip) && (!check_ip4(Local_IP) || !check_ip4(Remote_IP))) {
		UI::MessagePopup(_("You have to fill in Local and Remote IP addresses correctly"));
		continue;
	    }
	    break;
	}
	else {
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}

    }

    /* UPDATE VARIABLES */

    if(ret == `next) {
        Providers::provider = union(Providers::provider, $[
            "IPADDR"		: Local_IP,
            "REMOTE_IPADDR"	: Remote_IP,
            "ENCAP"		: encap,
            "DEFAULTROUTE"	: defaultroute,
            "MODIFYIP"		: modifyip,
            //"CALLBACK"		: callback,
        ]);
    }

    return ret;
}

if(false) {
Providers::provider = $["PROVIDER":"AICOM, Havlickuv Brod"];
Wizard::CreateDialog();
IPDetailsDialog("isdn");
}

/* EOF */
}
