/**
 * File:	include/network/provider/details.ycp
 * Package:	Network configuration
 * Summary:	Provider details configuration dialogs
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

textdomain "network";

import "Provider";
import "Wizard";

include "network/ip.ycp";
include "network/routines.ycp";
include "ui/common_popups.ycp";

/**
 * IP details dialog
 * @return dialog result
 */
global define symbol IPDetailsDialog() ``{

    ScreenName("provider-details");

    /* PREPARE VARIABLES */

    string type = Provider::CurrentType();

    /* FIXME: help texts, contents */
    string Local_IP = Provider::Provider["IPADDR"]:"";
    string Remote_IP = Provider::Provider["REMOTE_IPADDR"]:"";

    string encap = Provider::Provider["ENCAP"]:"syncppp";
    boolean defaultroute = Provider::Provider["DEFAULTROUTE"]:"yes" == "yes";
    boolean modifyip = Provider::Provider["MODIFYIP"]:"yes" == "yes";

    /* DIALOG TEXTS and  DIALOG CONTENTS */

    /* IP details dialog caption */
    string caption = _("IP address settings");

    /* IP details dialog help 1/3 */
    string helptext = _("<p>Please fill in the IP addresses if you got an fixed
IP address from your provider for syncppp or you use raw IP.</p>");

    /* IP details dialog help 2/3 */
    helptext = helptext + _("<p>Check the button for <b>Dynamic IP address</b>
if your provider assign you one temporary address per connection. In this case
the outgoing address is unknown until the moment the link is established.
This is the default with most providers.</p>");

    if(false) // FIXME: not needed
    if(encap != "rawip")
	helptext = helptext +
	/* IP details dialog help 3/3 */
_("<p>Check the button for <b>Use peer DNS</b> if you want to change
your domain name servers after the connection is up. (This replace your static
DNS configuraton with obtained DNS server IP addresses) Today, almost all
providers support <b>Use peer DNS</b>.</p>");

    if(type == "isdn") {

    helptext = helptext +
    // help text 1/3
_("<p>If callback mode is off,  calls  are handled normally without special 
processing.</p>");

    helptext = helptext +
    // helptext text 2/3
_("<p>If callback mode is server, after getting an incoming call, a callback 
is triggered.</p>");

    helptext = helptext +
    // helptext text 3/3
_("If callback mode is client, the local system does the initial call then 
waits for callback of the remote machine.");

    }

    /* IP details dialog help 4/4 */
    helptext = helptext + _("<p><b>Default route</b> FIXME
</p>");

    term contents = nil;

    if(encap == "rawip") {
	contents =
	    //`HSquash(
		`VBox(
		    /* Frame label */
		    `Frame(_("IP address settings"),
			`HBox(
			    `HSpacing(),
			    `VBox(
				`VSpacing(),
				/* Text entry label */
				`Left(`TextEntry(`id(`IP_local), _("&Local IP address of your machine"), Local_IP)),
				/* Text entry label */
				`Left(`TextEntry(`id(`IP_remote), _("Re&mote IP address"), Remote_IP)),
				`VSpacing()
			    ),
			    `HSpacing()
			)
		    ),
		    `VSpacing(),
		    /* Checkbox label */
		    `Left(`CheckBox(`id(`defaultroute), _("D&efault route"), defaultroute))
		//)
	    );
    }
    else
    {
	contents =
	    `HSquash(
		`VBox(
		    /* Frame label */
		    `Frame(_("IP address settings"),
			`HBox(
			    `HSpacing(),
			    `VBox(
				`VSpacing(),
				/* Checkbox label */
				`Left(`CheckBox(`id(`modifyip), `opt(`notify), _("&Dynamic IP address"), modifyip)),
				`VSpacing(),
				/* Text entry label */
				`Left(`TextEntry(`id(`IP_local), _("&Local IP address of your machine"), Local_IP)),
				/* Text entry label */
                                `Left(`TextEntry(`id(`IP_remote), _("Re&mote IP address"), Remote_IP)),
				`VSpacing()
			    ),
			    `HSpacing()
			)
		    ),
		    `VSpacing(),
		    /* Checkbox label */
		    `Left(`CheckBox(`id(`defaultroute), _("D&efault route"), defaultroute))
		)
	    );
    }

    if(type == "isdn")
	contents = `HSquash(`VBox(
	    contents,
	    `VSpacing(0.5)
	));

    y2debug("type=%1",type);
    y2debug("contents=%1",contents);

    /* DIALOG PREPARE */
    Wizard::SetContentsButtons(caption, contents, helptext,
	    BackButtonLabel(), OKButtonLabel());

    if(modifyip && encap != "rawip") {
	UI::ChangeWidget(`id(`IP_local), `Enabled, false);
	UI::ChangeWidget(`id(`IP_remote), `Enabled, false);
    }

    /* MAIN CYCLE */
    symbol ret = nil;
    while(true) {
	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(UI::ReallyAbortPopup(true))
		break;
	    else
		continue;
	} else if(ret == `modifyip) {
	    boolean dip = UI::QueryWidget(`id(`modifyip), `Value);
	    UI::ChangeWidget(`id(`IP_local), `Enabled, !dip);
	    UI::ChangeWidget(`id(`IP_remote), `Enabled, !dip);
	    continue;
	}
	/* back */
	else if(ret == `back) {
	    break;
	}
	/* next */
	else if(ret == `next) {
	    Local_IP = UI::QueryWidget(`id(`IP_local), `Value);
	    Remote_IP = UI::QueryWidget(`id(`IP_remote), `Value);
	    defaultroute = UI::QueryWidget(`id(`defaultroute), `Value);

	    if(encap != "rawip")
		modifyip = UI::QueryWidget(`id(`modifyip), `Value);

	    if((encap=="rawip" || !modifyip) && (!check_ip4(Local_IP) || !check_ip4(Remote_IP))) {
		UI::MessagePopup(_("You have to fill in Local and Remote IP addresses correctly"));
		continue;
	    }
	    break;
	}
	else {
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}

    }

    /* UPDATE VARIABLES */

    if(ret == `next) {
        Provider::Provider = union(Provider::Provider, $[
            "IPADDR"		: Local_IP,
            "REMOTE_IPADDR"	: Remote_IP,
            "DEFAULTROUTE"	: defaultroute ? "yes" : "no",
            "MODIFYIP"		: modifyip ? "yes" : "no",
        ]);
    }
    return ret;
}

/* EOF */
}
