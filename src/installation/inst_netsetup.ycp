/**
 * File:	clients/inst_netsetup.ycp
 * Package:	Network configuration
 * Summary:	Setup network in continue mode if required
 * Authors:	Arvin Schnell <arvin@suse.de>
 *
 * $Id$
 */

{

import "Arch";
import "Mode";

symbol mode = (symbol) WFM::Args (2);

y2milestone("----------------------------------------");
y2milestone("Lan netsetup module started");
y2milestone("Args: %1", WFM::Args());


string netdevice = (string) SCR::Read (.etc.install_inf.Netdevice);
if (netdevice == nil) netdevice = "eth0";

string netconfig = (string) SCR::Read (.etc.install_inf.NetConfig);
if (netconfig == nil) netconfig = "static";
if (netconfig == "dhcp") netconfig = "static"; // FIXME

string ipaddr = (string) SCR::Read (.etc.install_inf.IP);
if (ipaddr == nil) ipaddr = "";

string netmask = (string) SCR::Read (.etc.install_inf.Netmask);
if (netmask == nil) netmask = "";

string gateway = (string) SCR::Read (.etc.install_inf.Gateway);
if (gateway == nil) gateway = "";

string hwaddr = (string) SCR::Read (.etc.install_inf.HWAddr);
if (hwaddr == nil) hwaddr = "";

string nameserver = (string) SCR::Read (.etc.install_inf.Nameserver);
if (nameserver == nil) nameserver = "";

y2milestone("Original netdevice: %1 (%2)", netdevice, hwaddr);
string command = sformat("/sbin/ifconfig | grep -i \"HWaddr *%1\" | cut -d\" \" -f1", hwaddr);

y2milestone("IFCONFIG0: %1", SCR::Execute(.target.bash_output, "/sbin/ifconfig"));

map output = (map) SCR::Execute(.target.bash_output, command, $["LC_MESSAGES":"C"]);
y2milestone("Output: %1", output);
if(output != nil) {
    string newdevice = output["stdout"]:"";
    newdevice = select(splitstring(newdevice, "\n"), 0, "");
    if(newdevice != "" && newdevice != nil) netdevice = newdevice;
    y2milestone("Updated netdevice: %1 (%2)", netdevice, newdevice);
}

define void load_modules () {
    y2milestone("Loaded Modules: %1", SCR::Read(.target.string, "/proc/modules"));

    list<string> install_aliases = SCR::Dir (.etc.install_inf_alias);
    foreach (string alias, install_aliases, {
	string target = (string) SCR::Read (add (.etc.install_inf_alias, alias));
	y2milestone("Loading module: %1", target);
	SCR::Execute (.target.modprobe, target, "");
    });
}


/**
 *  Keep this function in sync with the create_interface code
 *  in inst_finish.
 */
define boolean do_network_setup ()
{
    if (Mode::test)
	return false;

    if (Arch::s390)
	return false;

    if (Mode::vnc || Mode::usessh)
	return false;

    return true;
}


if (mode == `up)
{
    if (do_network_setup ())
    {
	SCR::Execute (.target.bash, "/sbin/ifconfig lo 127.0.0.1 up");

	if ((Mode::boot == "nfs") || (Mode::boot == "http") ||
	    (Mode::boot == "smb") || (Mode::boot == "ftp"))
	{
	    if (netconfig == "static")
	    {
		load_modules ();

		string ifconfig = "/sbin/ifconfig " + netdevice + " up " + ipaddr;
		if (netmask != "")
		    ifconfig = ifconfig + " netmask " + netmask;
		y2milestone("Setting up device: %1", ifconfig);
		SCR::Execute (.target.bash, ifconfig);

		if (gateway != "")
		{
		    string route = "/sbin/route add default gw " + gateway;
		    SCR::Execute (.target.bash, route);
		    y2milestone("Setting up route: %1", route);
		}

		if (nameserver != "")
		{
		    SCR::Execute (.target.bash, "/sbin/modify_resolvconf modify " +
				  "--service yast2 --process y2base " +
				  "--text 'yast2 needs a nameserver' " +
				  "--nameservers " + nameserver);
		}
	    }
	    else if (netconfig == "dhcp")
	    {
		// FIXME
		y2milestone ("DHCP UNUSED");
	    }
	    else
	    {
		y2error ("unknown netconfig %1", netconfig);
	    }
	}
    }

    if (Mode::boot == "nfs")
    {
	SCR::Execute (.target.bash, "/sbin/rcportmap start");
    }

    y2milestone("IFCONFIGA: %1", SCR::Execute(.target.bash_output, "/sbin/ifconfig"));
}


if (mode == `dn)
{
    if (Mode::boot == "nfs")
    {
	// disable all sources
	Pkg::SourceFinishAll ();

	SCR::Execute (.target.bash, "/sbin/rcportmap stop");
    }

    if (do_network_setup ())
    {
	if ((Mode::boot == "nfs") || (Mode::boot == "http") ||
	    (Mode::boot == "smb") || (Mode::boot == "ftp"))
	{
	    if (netconfig == "static")
	    {
		if (nameserver != "")
		{
		    SCR::Execute (.target.bash, "/sbin/modify_resolvconf restore " +
				  "--service yast2");
		}

		if (gateway != "")
		{
		    string route = "/sbin/route del default gw " + gateway;
		    SCR::Execute (.target.bash, route);
		}

		string ifconfig = "/sbin/ifconfig " + netdevice + " down";
		SCR::Execute (.target.bash, ifconfig);
	    }
	    else if (netconfig == "dhcp")
	    {
		// FIXME
		y2milestone ("DHCP UNUSED");
	    }
	    else
	    {
		y2error ("unknown netconfig %1", netconfig);
	    }
	}
    }
}


y2milestone("Lan netsetup module finished");
y2milestone("----------------------------------------");

return `auto;

/* EOF */
}
