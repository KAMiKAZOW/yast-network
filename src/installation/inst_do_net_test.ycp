/**
 * File:	include/network/installation/dialogs.ycp
 * Package:	Network configuration
 * Summary:	Configuration dialogs for installation
 * Authors:	Michal Svec <msvec@suse.cz>
 *		Arvin Schnell <arvin@suse.de>
 *
 * $Id$
 */

{

    textdomain "network";

    import "Mode";
    import "Wizard";
    import "Internet";

    include "ui/common_messages.ycp";
    include "ui/common_popups.ycp";

    include "network/routines.ycp";
    include "network/installation/dialogs.ycp";


    /* Called backwards */
    if(WFM::Args(2) == true)
	return `auto;

    if(!Internet::do_test)
	return `auto;

    /* Nothing to test */
    if(!Internet::Fastest())
	return `auto;


    boolean we_have_patches = false;


    boolean already_up = false;
    if (!Mode::test)
	already_up = Internet::Status ();


    integer test_stage = 0;
    symbol test_result = `success;


    /* Progress step 1/4 */
    string l1 = _("Connecting to SuSE server via Internet...");
    /* Progress step 2/4 */
    string l2 = _("Downloading the latest release notes...");
    /* Progress step 3/4 */
    string l3 = _("Checking for latest updates...");
    /* Progress step 4/4 */
    string l4 = _("Closing connection...");


    define void make_dialog () ``{

	/* Test dialog caption */
	string caption = _("Running Internet Connection Test");

	/* help for dialog "Running Internet Connection Test" */
	string help = _("<p>Here, you can see the progress of the
Internet Connection Test.</p>") +

	/* help for dialog "Running Internet Connection Test" */
	_("<p>The test can be aborted by pressing the <b>Abort Test</b>
button.</p>") +

	/* help for dialog "Running Internet Connection Test" */
	_("<p>If the test fails, return to the network configuration
and correct the setting.</p>");

	/* fix checkycp complaints */
	string dash = "-   ";

	/* Progress labels */
	term progress = nil;
	if (already_up)
	{
	    progress = `VBox(
			     `Left(`HBox (`Heading (`id (`s2), dash), `Label (l2))),
			     `Left(`HBox (`Heading (`id (`s3), dash), `Label (l3)))
			     );
	}
	else
	{
	    progress = `VBox(
			     `Left(`HBox (`Heading (`id (`s1), dash), `Label (l1))),
			     `Left(`HBox (`Heading (`id (`s2), dash), `Label (l2))),
			     `Left(`HBox (`Heading (`id (`s3), dash), `Label (l3))),
			     `Left(`HBox (`Heading (`id (`s4), dash), `Label (l4)))
			     );
	}

	progress = add (progress, `VStretch());

	progress = add (progress, `HBox(
					/* Label for result of internet test */
					`Label(_("Result:")),
					`HSpacing(2),
					`Label(`id(`res), `opt(`outputField, `hstretch), "")
					));

	/* Test dialog contents */
	term contents = `VBox(
			      `VStretch(),
			      `VBox(`HVCenter(`HSquash(progress))),
			      `VStretch(),
			      /* Push Button to abort internet test */
			      `PushButton(`id (`abort_test), _("&Abort Test")),
			      `VSpacing(1),
			      /* Push Button to see log of internet test */
			      `PushButton(`id (`view_log), `opt(`disabled), _("&View Log...")),
			      `VStretch()
			      );

	Wizard::SetContents (caption, contents, help, true, true);
    }


    define void set_stage (integer stage) ``{
	test_stage = stage;
    }


    define void mark_label (integer i, symbol s) ``{

	string glyph = s == `arrow ? UI::Glyph(`BulletArrowRight) : UI::Glyph(`CheckMark);

	if (i == 1)
	    UI::ChangeWidget (`id (`s1), `Value, glyph);
	else if (i == 2)
	    UI::ChangeWidget (`id (`s2), `Value, glyph);
	else if (i == 3)
	    UI::ChangeWidget (`id (`s3), `Value, glyph);
	else if (i == 4)
	    UI::ChangeWidget (`id (`s4), `Value, glyph);
    }


    define void show_result () ``{
	set_stage (-1);
	if (test_result == `success) {
	    /* result of internet test */
	    UI::ChangeWidget(`id(`res), `Value, _("Success"));
	} else {
	    /* result of internet test */
	    UI::ChangeWidget(`id(`res), `Value, _("Failure"));
	}
	UI::ChangeWidget (`id (`abort_test), `Enabled, false);
	UI::ChangeWidget (`id (`view_log), `Enabled, true);
    }


    define void handle_stage () ``{

	if (test_stage == 0)		// open connection
	{
	    if (Mode::test) {
		mark_label (1, `arrow);
		set_stage (1);
		return;
	    }

	    if (already_up)
	    {
		set_stage (2);
	    }
	    else
	    {
		mark_label (1, `arrow);

		if (!AskForPassword ()) {
		    y2error("Password required");
		    test_result = `failure;
		    show_result ();
		    return;
		}

		// start the connection
		y2milestone ("called Start");
		if (!Internet::Start ()) {
		    test_result = `failure;
		    show_result ();
		    return;
		}

		set_stage (1);
	    }
	    return;
	}

	if (test_stage == 1)		// wait until really connected
	{
	    if (Mode::test) {
		set_stage (2);
		mark_label (1, `check);
		return;
	    }

	    // status must be up
	    if (!Internet::Status ()) {
		test_result = `failure;
		show_result ();
		return;
	    }

	    // and we must be connected
	    if (Internet::Connected ()) {
		y2milestone ("Connected ok");
		set_stage (2);
		mark_label (1, `check);
		return;
	    }

	    // ping anything (www.suse.com) to trigger dod connections
	    SCR::Execute (.target.bash_background,
			  "/bin/ping -c 1 -w 1 213.95.15.200");

	}

	if (test_stage == 2)		// download release notes
	{
	    mark_label (2, `arrow);

	    string tmp = SCR::Read (.target.tmpdir) + "/release-notes.rpm";
	    string url = "http://www.suse.com/relnotes/sl_82/release-notes.rpm";

	    // proxy settings are read from /root/.curlrc
	    string cmd = "/usr/bin/curl -s -S -f -m 300 " + url + " -o " + tmp;
	    integer ret = SCR::Execute (.target.bash, cmd);
	    y2milestone ("curl command returned %1", ret);

	    if (ret != 0)
	    {
		// popup to inform user about the failure
		UI::MessagePopup (_("Download of latest release notes failed."));
		test_result = `failure;
	    }
	    else
	    {
		SCR::Execute (.target.bash, "/bin/rpm -U --force " + tmp);
	    }

	    set_stage (3);
	    mark_label (2, `check);
	    return;
	}

	if (test_stage == 3)		// check for updates
	{
	    mark_label (3, `arrow);

	    // proxy settings are read from /root/.curlrc
	    integer ret = SCR::Execute (.target.bash, "/usr/bin/online_update -q");
	    y2milestone ("online_update command returned %1", ret);

	    if (ret == 1 || ret == 2)	// there are patches
	    {
		we_have_patches = true;
	    }
	    else if (ret != 0)
	    {
		// popup to inform user about the failure
		UI::MessagePopup (_("Check for latest updates failed."));
		test_result = `failure;
	    }

	    set_stage (4);
	    mark_label (3, `check);
	    return;
	}

	if (test_stage == 4)		// close connection
	{
	    if (Mode::test) {
		mark_label (4, `arrow);
		show_result ();
		mark_label (4, `check);
		return;
	    }

	    if (already_up)
	    {
	    }
	    else
	    {
		mark_label (4, `arrow);

		// stop connection
		y2milestone ("called Stop");
		if (!Internet::Stop ())
		    test_result = `failure;
		mark_label (4, `check);
	    }

	    show_result ();

	    return;
	}
    }


    make_dialog ();

    any ret = nil;
    while(true)
    {
	handle_stage ();

	if (test_stage != -1)
	{
	    sleep (500);
	    ret = UI::PollInput();

	    if (ret == nil)
		continue;
	}
	else
	{
	    ret = UI::UserInput ();
	}

	if (ret == `abort_test)
	{
	    if (test_stage != -1)
	    {
		Internet::Stop ();
		test_result = `failure;
		show_result ();
	    }
	    continue;
	}
	else if (ret == `view_log)
	{
	    string file = Internet::FastestLogFile (Internet::device);
	    /* Title of Popup with Log */
	    ShowFilePopup (_("Internet Connection Test Log:"), file);
	}
	else if (ret == `abort || ret == `cancel)
	{
	    if (CallFunction (`inst_confirm_abort (`incomplete)))
	    {
		if (test_stage != -1)
		{
		    Internet::Stop ();
		}
		break;
	    }
	    continue;
	}
	else if (ret == `back || ret == `next) {
	    break;
	}
	else {
	    y2error("Unexpected return code: %1", ret);
	    continue;
	}
    }

    if (ret == `next)
    {
	if (we_have_patches)
	    AskYOUDialog();
	else
	    Internet::do_you = false;
    }

    return ret;

/* EOF */
}
