/**
 * File:	include/network/installation/dialogs.ycp
 * Package:	Network configuration
 * Summary:	Configuration dialogs for installation
 * Authors:	Michal Svec <msvec@suse.cz>
 *		Arvin Schnell <arvin@suse.de>
 *
 * $Id$
 */

{
    textdomain "network";

    import "Internet";
    import "Mode";
    import "Product";
    import "Wizard";
    import "Directory";

    import "Label";
    import "Popup";

    include "network/routines.ycp";
    include "network/installation/dialogs.ycp";


    /* Called backwards */
    if(WFM::Args(2) == true)
	return `auto;

    if(!Internet::do_test)
	return `auto;

    /* Nothing to test */
    if(!Internet::FindFastest())
	return `auto;


    boolean we_have_patches = false;

    boolean already_up = false;

    symbol test_stage = `open;
    symbol test_result = `success;

    // list of all log files to show
    list logs = [];

    // dir of log files
    string logdir = SCR::Read (.target.tmpdir) + "/internet-test";


    if(!Mode::test)
	already_up = Internet::Status();


    /* Progress step 1/4 */
    string l1 = _("Connecting to Internet...");
    /* Progress step 2/4 */
    string l2 = _("Downloading the latest release notes...");
    /* Progress step 3/4 */
    string l3 = _("Checking for latest updates...");
    /* Progress step 4/4 */
    string l4 = _("Closing connection...");


    define void make_dialog() ``{

	/* Test dialog caption */
	string caption = _("Running Internet Connection Test");

	/* help for dialog "Running Internet Connection Test" */
	string help = _("<p>Here, you can see the progress of the
Internet Connection Test.</p>") +

	    /* help for dialog "Running Internet Connection Test" */
	    _("<p>The test can be aborted by pressing the <b>Abort Test</b>
button.</p>") +

	    /* help for dialog "Running Internet Connection Test" */
	    _("<p>If the test fails, return to the network configuration
and correct the setting.</p>");

	/* fix checkycp complaints */
	string dash = "-   ";

	/* Progress labels */
	term progress = `VBox();

	if(!already_up)
	    progress = add(progress, `Left(`HBox(`Heading(`id(`s1), dash), `Label(l1))));
	if(true)
	    progress = add(progress, `Left(`HBox(`Heading(`id(`s2), dash), `Label(l2))));
	if(!contains(Product::flags, "no_you"))
	    progress = add(progress, `Left(`HBox(`Heading(`id(`s3), dash), `Label(l3))));
	if(!already_up)
	    progress = add(progress, `Left(`HBox(`Heading(`id(`s4), dash), `Label(l4))));

	progress = add(progress, `VStretch());

	progress = add(progress, `HBox(
				       /* Label for result of internet test */
				       `Label(_("Result:")),
				       `HSpacing(2),
				       `Label(`id(`res), `opt(`outputField, `hstretch), "")
				       ));

	/* Test dialog contents */
	term contents = `VBox(
			      `VStretch(),
			      `VBox(`HVCenter(`HSquash(progress))),
			      `VStretch(),
			      /* Push Button to abort internet test */
			      `PushButton(`id(`abort_test), _("&Abort Test")),
			      `VSpacing(1),
			      /* Push Button to see logs of internet test */
			      `PushButton(`id(`view_log), `opt(`disabled), _("&View Logs...")),
			      `VStretch()
			      );

	Wizard::SetContents(caption, contents, help, true, true);
    }


    define void mark_label(integer i, symbol s) ``{

	string glyph = s == `arrow ? UI::Glyph(`BulletArrowRight) : UI::Glyph(`CheckMark);

	if(i == 1)
	    UI::ChangeWidget(`id(`s1), `Value, glyph);
	else if(i == 2)
	    UI::ChangeWidget(`id(`s2), `Value, glyph);
	else if(i == 3)
	    UI::ChangeWidget(`id(`s3), `Value, glyph);
	else if(i == 4)
	    UI::ChangeWidget(`id(`s4), `Value, glyph);
    }


    define void show_result() ``{
	if(test_result == `success) {
	    /* result of internet test */
	    UI::ChangeWidget(`id(`res), `Value, _("Success"));
	} else {
	    /* result of internet test */
	    UI::ChangeWidget(`id(`res), `Value, _("Failure"));
	}
    }


    define void copy_logs1 () ``{

	// label of combobox where the log is selected
	logs = add (logs, $[ `menuname : _("Kernel Network Interfaces"),
			     `filename : "ifconfig.log" ]);
	SCR::Execute (.target.bash, "/sbin/ifconfig > " +
		      logdir + "/ifconfig.log");

	// label of combobox where the log is selected
	logs = add (logs, $[ `menuname : _("Kernel Routing Table"),
			     `filename : "route.log" ]);
	SCR::Execute (.target.bash, "/sbin/route -n > " + logdir + "/route.log");

	// label of combobox where the log is selected
	logs = add (logs, $[ `menuname : _("Host Name Lookup"),
			     `filename : "resolv.conf" ]);
	SCR::Execute (.target.bash, "/bin/cp /etc/resolv.conf " +
		      logdir + "/resolv.conf");
    }


    define void copy_logs2 () ``{

	// label of combobox where the log is selected
	logs = add (logs, $[ `menuname : _("Kernel Messages"),
			     `filename : "messages" ]);
	SCR::Execute (.target.bash, Directory::ybindir + "/cut-messages > " +
		      logdir + "/messages");

	if (Internet::logfile != "") {
	    // label of combobox where the log is selected
	    logs = add (logs, $[ `menuname : _("PPP Daemon"),
				 `filename : "smpppd.log",
				 `prio : 20 ]);
	    SCR::Execute (.target.bash, "/bin/cp " + Internet::logfile + " " +
			  logdir + "/smpppd.log");
	}
    }


    define void handle_stage() ``{

	if (test_stage == `open)		// open connection
	{
	    if(Mode::test) {
		mark_label(1, `arrow);
		test_stage = `wait;
		return;
	    }

	    if(already_up)
	    {
		test_stage = `copy;
	    }
	    else
	    {
		mark_label(1, `arrow);

		if(!AskForPassword()) {
		    y2error("Password required");
		    test_stage = `finish;
		    test_result = `failure;
		    return;
		}

		// start the connection
		y2milestone("called Start");
		// label of combobox where the log is selected
		logs = add (logs, $[ `menuname : _("Opening of Connection"),
				     `filename : "ifup.log",
				     `prio : 16 ]);
		if(!Internet::Start(logdir + "/ifup.log")) {
		    // popup to inform user about the failure
		    Popup::Message(_("Connecting to Internet failed. View
logs for details."));
		    test_stage = `finish;
		    test_result = `failure;
		    return;
		}

		test_stage = `wait;
	    }
	    return;
	}

	if (test_stage == `wait)		// wait until really connected
	{
	    if(Mode::test) {
		test_stage = `copy;
		mark_label(1, `check);
		return;
	    }

	    // status must be up
	    if(!Internet::Status()) {
		// popup to inform user about the failure
		Popup::Message(_("Connecting to Internet failed. View
logs for details."));
		test_stage = `finish;
		test_result = `failure;
		return;
	    }

	    // and we must be connected
	    if(Internet::Connected())
	    {
		y2milestone("Connected ok");
		test_stage = `copy;
		mark_label(1, `check);
		return;
	    }

	    // ping anything (www.suse.com) to trigger dod connections
	    SCR::Execute(.target.bash_background,
			 "/bin/ping -c 1 -w 1 213.95.15.200");
	    return;
	}

	if (test_stage == `copy)		// copy some status
	{
	    copy_logs1 ();
	    test_stage = `relnotes;
	}

	if (test_stage == `relnotes)		// download release notes
	{
	    mark_label(2, `arrow);

	    string tmp = SCR::Read(.target.tmpdir) + "/release-notes.rpm";
	    string url = "http://www.suse.com/relnotes/sl_82/release-notes.rpm";

	    // proxy settings are read from /root/.curlrc
	    string cmd = "/usr/bin/curl -s -S -v -f -m 300 " + url + " -o " + tmp;
	    cmd = cmd + "> " + logdir + "/curl.log 2>&1";
	    integer ret = SCR::Execute(.target.bash, cmd);
	    y2milestone("curl command returned %1", ret);

	    // label of combobox where the log is selected
	    logs = add (logs, $[ `menuname : _("Download of Release Notes"),
				 `filename : "curl.log" ]);

	    if(ret != 0)
	    {
		// popup to inform user about the failure
		Popup::Message(_("Download of latest release notes failed. View
logs for details."));
		test_result = `failure;
	    }
	    else
	    {
		SCR::Execute(.target.bash, "/bin/rpm -U --force " + tmp);
	    }

	    test_stage = `patches;
	    mark_label(2, `check);
	    return;
	}

	if (test_stage == `patches)		// check for updates
	{
	    if(contains(Product::flags, "no_you"))
	    {
		test_stage = `close;
		return;
	    }

	    mark_label(3, `arrow);

	    // proxy settings are read from /root/.curlrc
	    string cmd = "/usr/bin/online_update -q -V";
	    cmd = cmd + "> " + logdir + "/you.log 2>&1";
	    integer ret = SCR::Execute(.target.bash, cmd);
	    y2milestone("online_update command returned %1", ret);

	    // label of combobox where the log is selected
	    logs = add (logs, $[ `menuname : _("Check for Patches"),
				 `filename : "you.log" ]);

	    if(ret == 1 || ret == 2)	// there are patches
	    {
		we_have_patches = true;
	    }
	    else if(ret != 0)
	    {
		// popup to inform user about the failure
		Popup::Message(_("Check for latest updates failed. View
logs for details."));
		test_result = `failure;
	    }

	    test_stage = `close;
	    mark_label(3, `check);
	    return;
	}

	if (test_stage == `close)		// close connection
	{
	    if(Mode::test) {
		mark_label(4, `arrow);
		test_stage = `finish;
		mark_label(4, `check);
		return;
	    }

	    if(!already_up) {
		mark_label(4, `arrow);

		/* Stop connection */
		y2milestone("Connection: stop");
		// label of combobox where the log is selected
		logs = add (logs, $[ `menuname : _("Closing of Connection"),
				     `filename : "ifdown.log",
				     `prio : 14 ]);
		if(!Internet::Stop(logdir + "/ifdown.log"))
		    test_result = `failure;
		mark_label(4, `check);
	    }

	    test_stage = `finish;
	    return;
	}
    }


    // Create logdir
    if (!SCR::Execute (.target.mkdir, logdir))
	y2error ("can't create logdir");

    any ret = nil;

    make_dialog();

    UI::ChangeWidget(`id(`back), `Enabled, false);
    UI::ChangeWidget(`id(`abort), `Enabled, false);
    UI::ChangeWidget(`id(`next), `Enabled, false);
    UI::ChangeWidget(`id(`abort_test), `Enabled, true);
    UI::ChangeWidget(`id(`view_log), `Enabled, false);


    // loop during internet test

    SCR::Execute (.target.bash, "/bin/logger BEGIN OF YAST2 INTERNET TEST");

    while (true)
    {
	handle_stage ();

	if (test_stage == `finish)
	    break;

	sleep (500);
	ret = UI::PollInput ();
	if (ret == nil)
	    continue;

	if (ret == `abort_test)
	{
	    if (!already_up)
		Internet::Stop ();
	    test_result = `failure;
	    break;
	}

	y2error ("Unexpected return code: %1", ret);
    }

    SCR::Execute (.target.bash, "/bin/logger END OF YAST2 INTERNET TEST");


    show_result ();

    copy_logs2 ();


    UI::ChangeWidget(`id(`back), `Enabled, true);
    UI::ChangeWidget(`id(`abort), `Enabled, true);
    UI::ChangeWidget(`id(`next), `Enabled, true);
    UI::ChangeWidget(`id(`abort_test), `Enabled, false);
    UI::ChangeWidget(`id(`view_log), `Enabled, true);


    // loop after internet test
    while (true)
    {
	ret = UI::UserInput();

	if (ret == `view_log)
	{
	    ShowLogs (logs, logdir);
	    continue;
	}

	if (ret == `abort || ret == `cancel)
	{
	    if (CallFunction (`inst_confirm_abort (`incomplete)))
		break;
	    continue;
	}

	if (ret == `back || ret == `next)
	{
	    break;
	}

	y2error ("Unexpected return code: %1", ret);
    }


    if (ret == `next)
    {
	if (we_have_patches)
	    AskYOUDialog ();
	else
	    Internet::do_you = false;
    }

    return ret;
}
