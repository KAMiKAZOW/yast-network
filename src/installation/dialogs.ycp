/**
 * File:	include/network/installation/dialogs.ycp
 * Package:	Network configuration
 * Summary:	Configuration dialogs for installation
 * Authors:	Michal Svec <msvec@suse.cz>
 *		Arvin Schnell <arvin@suse.de>
 *
 * $Id$
 */

{

textdomain "network";

import "DSL";
import "ISDN";
import "Lan";
import "Modem";
import "Wizard";
import "Internet";

include "ui/common_messages.ycp";
include "ui/common_popups.ycp";

include "network/routines.ycp";


/**
 * Ask for password if required
 * @return true on success
 */
define boolean AskForPassword() ``{

    if(Internet::askpassword == nil) return true;
    if(Internet::askpassword == false) return true;

    UI::OpenDialog(`VBox(
	/* Heading text */
	`Heading(_("Enter Provider Password")),
	/* PasswordEntry text */
	`Password(`id(`password), _("&Password:")),
	`HBox(
	    `PushButton(`id(`ok), `opt(`default), OKButtonLabel()),
	    `PushButton(`id(`cancel), CancelButtonLabel()))
    ));

    UI::SetFocus(`id(`password));
    symbol ret = UI::UserInput();
    UI::CloseDialog();

    if(ret == `ok) {
	Internet::password = UI::QueryWidget(`id(`password), `Value);
	return true;
    }

    return false;
}

/**
 * Connection steps dialog
 * @return dialog result
 */
global define symbol TestStepsDialog() ``{

    ScreenName("installation-steps-dialog");

    /* Steps dialog caption */
    string caption = _("Test Internet Connection");

    /* Steps dialog help 1/7 */
    string help = _("<p>FIXME
</p>");

    /* Label text (keep lines max. 65 chars long) */
    string label = _("To validate your Internet access,
activate the test procedure.");

    map labels = $[
	/* Label text (keep lines max. 65 chars long) */
	"dsl" : _("To validate your DSL Internet access we suggest to activate
the test procedure."),
	/* Label text (keep lines max. 65 chars long) */
	"isdn" : _("To validate your ISDN Internet access we suggest to activate
the test procedure."),
	/* Label text (keep lines max. 65 chars long) */
	"modem" : _("To validate your Modem Internet access we suggest to activate
the test procedure."),
    ];

    string type = device_type(Internet::device);
    if(haskey(labels, type)) label = labels[type]:"";

    boolean test = true;

    /* Radiobuttons */
    term buttons = `VBox (
			  `VSpacing(1),
			  /* RadioButton label */
			  `Left(`RadioButton(`id(`yes),
					     _("&Yes, Test Connection to the Internet"), test)),
			  /* RadioButton label */
			  `Left(`RadioButton(`id(`no),
					     _("N&o, Skip This Test"), !test)),
			  `VSpacing(1)
			  );

    /* Steps dialog contents */
    term contents = `HBox (
			   `HSpacing(5),
			   `VBox (
				  `Left(`Label(label)),
				  `VSpacing(1),
				  /* Heading text */
				  `Left(`Heading(_("The following steps will be performed:"))),
				  `VSpacing(1),
				  /* Label text */
				  `Left(`Label(_("- Connect to SuSE server via Internet"))),
				  /* Label text */
				  `Left(`Label(_("- Download latest release notes"))),
				  /* Label text */
				  `Left(`Label(_("- Check for latest updates"))),
				  /* Label text */
				  `Left(`Label(_("- Close connection"))),
				  `VSpacing(2),
				  /* Frame label */
				  `Frame(_("Select:"),
					 `RadioButtonGroup(`id(`rb),
							   `HBox(`HSpacing(2),
								 buttons,
								 `HSpacing(2)
								 )
							   )
					 ),
				  `VSpacing(1)
				  ),
			   `HSpacing(5)
			   );

    Wizard::SetContentsButtons (caption, contents, help,
				BackButtonLabel(), NextButtonLabel());

    any ret = nil;
    while(true) {
	ret = UI::UserInput();

	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `back) {
	    break;
	}
	else if(ret == `next) {
	    /* check_* */
	    break;
	}
	else {
	    y2error("Unexpected return code: %1", ret);
	    continue;
	}
    }

    if(ret == `next) {
	test = UI::QueryWidget(`id(`rb), `CurrentButton) == `yes;
	y2debug("test=%1", test);
    }

    return ret;
}

/**
 * Connection test dialog
 * @return dialog result
 */
global define symbol TestConnectionDialog() ``{

    ScreenName("installation-test-dialog");

    /* Test dialog caption */
    string caption = _("Running Internet Connection Test");

    /* Test dialog help 1/7 */
    string help = _("<p>FIXME
</p>");

    /* Progress labels */
    term progress = `VBox (
			   /* Progress step 1/4 */
			   `Left(`Label(_("Connecting to the Internet..."))),
			   /* Progress step 2/4 */
			   `Left(`Label(_("Download latest release notes"))),
			   /* Progress step 3/4 */
			   `Left(`Label(_("Checking for latest updates..."))),
			   /* Progress step 4/4 */
			   `Left(`Label(_("Closing connection...")))
			   );

    /* Test dialog contents */
    term contents = `VBox (
			   `VSpacing(1),
			   `VBox (`HVCenter( `HSquash (progress))),
			   `VSpacing(1),
			   /* Push Button to abort internet test */
			   `PushButton (_("&Abort Test")),
			   `VSpacing(1),
			   `HBox(`HSpacing(1),
				 /* Label of LogView showing protocol of internet test */
				 `LogView (`id(`log), _("Test protocol:"), 5, 100),
				 `HSpacing(1)
				 ),
			   `VSpacing(1),
			   `HBox(`HSpacing(1),
				 /* Label for result of internet test */
				 `Label(_("Result:")),
				 `HSpacing(2),
				 `Label (`id(`res), `opt(`outputField, `hstretch), ""),
				 `HSpacing(1)
				 ),
			   `VSpacing(2),
			   `VStretch()
			   );

    Wizard::SetContentsButtons (caption, contents, help,
				BackButtonLabel(), NextButtonLabel());

    /* Possible result of internet test */
    UI::ChangeWidget (`id(`res), `Value, _("Success"));

    /* Possible result of internet test */
    UI::ChangeWidget (`id(`res), `Value, _("Failure"));

    any ret = nil;
    while(true) {
	ret = UI::UserInput();

	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `back) {
	    break;
	}
	else if(ret == `next) {
	    /* check_* */
	    break;
	}
	else {
	    y2error("Unexpected return code: %1", ret);
	    continue;
	}
    }

    if(ret == `next) {
	// FIXME
    }

    return ret;
}

if(true) {

    if(!Internet::Fastest()) {
	y2error("No device found");
	return false;
    }

    if(!AskForPassword()) {
	y2error("Password required");
	return false;
    }

    Wizard::CreateDialog();
    TestStepsDialog();
    Internet::Start();
    TestConnectionDialog();
}

/* EOF */
}
