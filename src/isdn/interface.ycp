/**
 * File:
 *   include/network/isdn/interface.ycp
 *
 * Package:
 *   Configuration of network
 *
 * Summary:
 *   ISDN network interface configuration dialog
 *
 * Authors:
 *   Karsten Keil <kkeil@suse.de>
 *
 * $Id$
 *
 */

{

textdomain "network";

import "Firewall";
import "Wizard";
import "ISDN";
import "DSL";

include "ui/common_popups.ycp";
include "network/dsl/dialogs.ycp";

/**
 * Dialog for ISDN interface selection
 * @param symbol op operation
 *		`hw  called after HW config
 *		`add call from overview
 * @return any user input
 */

global define symbol isdn_if_sel(symbol op) ``{

    /* DIALOG TEXTS */

    // title of ISDN service selection dialog
    string caption = _("ISDN Service Selection");
    string helptext = "";

    if (ISDN::have_dsl)
	helptext = helptext +
    // conditional help text 1/4
_("<p>If you have a combined ISDN/DSL CAPI controller, configure your DSL
connection via <b>Add DSL CAPI Interface</b>. You can also do this later
in the DSL configuration dialog.</p>
");

    helptext = helptext +
    // help text 1/4
_("<p>For networking over ISDN, there are two types of interfaces:
<b>RawIP</b> and <b>SyncPPP</b>. In most cases, you will use SyncPPP. It is
the default for all common Internet providers.</p>");

    helptext = helptext +
    // helptext text 2/4
_("<p>For switching between various Internet providers, an
interface for each provider is not required. Simply add multiple providers to the
same interface.</p>");

    helptext = helptext +
    // helptext text 3/4
_("<p>To avoid adding an interface now, use
<b>Skip</b> not to enter the interface and provider dialogs.</p>");


    /* DIALOG CONTENTS */
    term network = `VBox();
    network = add(network, `VSpacing(0.5));
    if (ISDN::have_dsl)
	// PushButton label to select the next Dialog
	network = add(network, `PushButton(`id(`AddDSLPPP),`opt(`hstretch), _("Add &DSL CAPI Interface")));
    // PushButton label to select the next Dialog
    network = add(network, `PushButton(`id(`AddSyncPPP),`opt(`hstretch), _("Add new &SyncPPP network interface")));
    // PushButton label to select the next Dialog
    network = add(network, `PushButton(`id(`AddRawIP), `opt(`hstretch), _("Add new Raw&IP network interface")));
    // PushButton label to select the next Dialog
    network = add(network, `PushButton(`id(`AddProvider),`opt(`hstretch), _("Add &provider to existing interface")));
    network = add(network, `VSpacing(0.5));

    term contents =
	`HVSquash(
	    // Frame title
	    `Frame(_("Network services"),
		`HBox(
		    `HSpacing(0.5),
		    network,
		    `HSpacing(0.5)
		)
	    )
	);

    /* DIALOG PREPARE */
    Wizard::SetContents(caption, contents, helptext, true, true);
    // PushButton label to not enter any sub dialogs
    Wizard::ReplaceNextButton(`PushButton(`id(`next), `opt(`default, `key_F10), _("S&kip")));

    if (ISDN::CountIF() == 0) {
	UI::ChangeWidget(`id(`AddProvider), `Enabled, false);
    }
    ISDN::skip = false;

    /* MAIN CYCLE */
    symbol ret = nil;
    while (true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if (UI::ReallyAbortPopup(true))
		break;
	    else
		continue;
	}
	else if (ret == `back) {
	    break;
	}
	else if (ret == `next) {
	    break;
	}
	else if (ret == `AddDSLPPP) {
	    ret = ISDNDSLSequence("capi-adsl", "");
	}
	else if (ret == `AddSyncPPP) {
	    if (op == `hw)
		ISDN::Commit();
	    ISDN::AddIf("syncppp");
            Provider::Add("isdn");
	    break;
	}
	else if (ret == `AddRawIP) {
	    if (op == `hw)
		ISDN::Commit();
	    ISDN::AddIf("rawip");
            Provider::Add("isdn");
	    break;
	}
	else if (ret == `AddProvider) {
	    if (op == `hw)
		ISDN::Commit();
	    ISDN::operation = `addprov;
            Provider::Add("isdn");
	    break;
	}
	else {
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}

    }
    if (ret == `next) {
        y2debug("Provider::Provider=%1", Provider::Provider);
        y2debug("ISDN::interface=%1", ISDN::interface);
        ISDN::skip = true;
    }

    return ret;
}

/**
 * Dialog for ISDN interface settings
 * @return any user input
 */

global define symbol interface_dialog() ``{

    /* PREPARE VARIABLES */
    string msn = lookup(ISDN::interface, "MSN", "0");
    string startmode = lookup(ISDN::interface, "STARTMODE", "onboot");
    boolean syncppp = lookup(ISDN::interface, "PROTOCOL", "syncppp") == "syncppp";
    boolean chargeHUP = lookup(ISDN::interface, "CHARGEHUP", "on") == "on";
    boolean multilink = lookup(ISDN::interface, "MULTILINK", "no") == "yes";

    string devstr = sformat("%1%2", syncppp ? "ippp" : "isdn",
				ISDN::device);
    /* DIALOG TEXTS */
    string caption = sformat("%1 %2 interface %3", ISDN::operation == `editif ? "Edit" : "Add",
			syncppp ? "syncppp" : "rawip", devstr);

    string helptext =
    // help text 1/4
_("<p>My phone number --  As your own telephone number (MSN), put in your 
telephone number (without area code) if your ISDN card is connected directly
to the phone company-provided socket. If it is connected to a PBX, put in the
MSN stored in the PBX (e.g., your phone extension or the last digit or digits
of your phone extension) . If this fails, try using 0, which normally means
the default MSN is actually used.</p>");

    helptext = helptext +
    // help text 2/4
_("<p><b>Start Mode: </b><b>OnBoot</b> the driver is loaded during
system boot. <b>Manual</b> the driver must be started with the
<b>rcisdn start</b> command, only the user root can do this.
<b>HotPlug </b> is a special case for PCMCIA and USB devices.</p>");

    helptext = helptext +
    // help text 3/4
_("<p>If you select manual you have to start/stop the service manually by
issuing the following commands (while logged in as 'root'):
<tt>
 <br> <b>start: </b>ifup ippp0
 <br> <b>stop : </b>ifdown ippp0
 <br>
</tt>
Note: ippp0 is an example</p>
");

    helptext = helptext +
    // help text 4/4
_("<p>Selecting <b>channel bundling</b> will set up a 128-kBit connection
also known as <b>M</b>ultilink <b>PPP</b>. To bring up or down the second channel,
use the following commands:
<tt>
 <br> isdnctrl addlink ippp0
 <br> isdnctrl removelink ippp0
 <br>
</tt>
You can also install the package <b>xibod</b> to have this happen automatically. If
there is a demand for more bandwidth, it will add a channel. If the traffic goes down, it will
remove a channel.
</p>");


    /* DIALOG CONTENTS */
    list provlist = [];
    term prov = `VSpacing(0.1);
    if(ISDN::operation  == `editif) {
	Provider::Select("");
	provlist = Provider::GetProviders("_custom", ISDN::provider_file);
	y2debug("provlist: %1", provlist);
	/* ComboBox label */
	prov = `Left(`ComboBox(`id(`prov), _("D&efault Provider"), provlist));
    }

    y2debug("device %1", devstr);
    boolean FirewallChecked = Firewall::Query(devstr);
    y2debug("FirewallChecked=%1",FirewallChecked);

    term FirewallCheckbox = `Left(`CheckBox(`id(`Firewall), _("Activate fire&wall..."), FirewallChecked));

    term contents =
    `Top(
	`VBox(
	    `VSpacing(1.5),
        // Frame title
        `Frame(_("Connection Settings"),
        `HBox(
        `HSpacing(1),
        `VBox(
	    `VSpacing(0.5),
	    // TextEntry label
	    `Left(`TextEntry(`id(`msn), _("My &phone number"), msn)),
	    `VSpacing(0.5),
	    `HBox(
		`VBox(
		    // ComboBox label
		    `Left(`ComboBox(`id(`startmode), _("Start &Mode"),
			[
			    // ComboBox item
			    `item(`id("onboot"), _("OnBoot"), startmode == "onboot"),
			    // ComboBox item
			    `item(`id("manual"), _("Manual"), startmode == "manual"),
			    // ComboBox item
			    `item(`id("hotplug"), _("HotPlug"), startmode == "hotplug")
			])),
		    `VSpacing(0.5),
		    prov,
		    `VSpacing(0.5),
			// CheckBox label
			`Left(`CheckBox(`id(`chargehup), _("Charge&HUP"), chargeHUP)),
		    `VSpacing(0.5),
			// CheckBox label
			`Left(`CheckBox(`id(`multilink), _("Ch&annel bundling"), multilink)),
		    `VSpacing(0.5),
			// CheckBox label
			FirewallCheckbox,
		    `VSpacing(0.5)
		))
        ),
        `HSpacing(1)
        )),
	    `VSpacing(0.5),
	    // PushButton label
	    `PushButton(`id(`detail), _("&Details..."))
	));


    /* DIALOG PREPARE */
    Wizard::SetContentsButtons(caption, contents, helptext,
	    BackButtonLabel(), NextButtonLabel());

    /* MAIN CYCLE */
    symbol ret = nil;
    while (true) {

    /* We need ":"  for NI1 SPID and "VB" in future (for pending DATA over VOICE patch)
     * it should not hurt if we enable this now here, since the chance that a
     * customer enter V or B by accident is very low
     * since VB is only allowed as first char, maybe we should make a post
     * check for it too
     */
    UI::ChangeWidget(`id(`msn), `ValidChars, "0123456789:BV" );

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if (UI::ReallyAbortPopup(true))
		break;
	    else
		continue;
	}
	else if (ret == `back) {
	    break;
	}
	else if (ret == `next || ret == `detail) {
	    msn = UI::QueryWidget(`id(`msn), `Value);
	    startmode = UI::QueryWidget(`id(`startmode), `Value);
	    multilink = UI::QueryWidget(`id(`multilink), `Value);
	    chargeHUP = UI::QueryWidget(`id(`chargehup), `Value);
	    /* check_* */
	    break;
	}
	else {
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}

    }
    if (ret == `next || ret == `detail) {
	/* UPDATE VARIABLES */
        ISDN::interface = union(ISDN::interface, $[
            "MSN"		: msn,
            "STARTMODE"		: startmode,
            "MULTILINK"		: multilink ? "yes" : "no",
            "CHARGEHUP"		: chargeHUP ? "on" : "off",
        ]);
	if (ISDN::operation  == `editif)
	    ISDN::provider_file = UI::QueryWidget(`id(`prov), `Value);

        /* update firewall info */
        if(FirewallChecked != UI::QueryWidget(`id(`Firewall), `Value)) {
            FirewallChecked = UI::QueryWidget(`id(`Firewall), `Value);
            Firewall::Change(devstr, FirewallChecked);
	}


    }
    return ret;
}

}
