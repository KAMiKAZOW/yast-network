/**
 * File:
 *   include/network/isdn/dialogs.ycp
 *
 * Package:
 *   Configuration of network
 *
 * Summary:
 *   ISDN configuration dialogs
 *
 * Authors:
 *   Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 */

{

textdomain "network";

import "Wizard";
import "ISDN";

include "ui/common_popups.ycp";

/* DATA */

//Old code: map TmpConfiguration=$[];



/* DIALOG */

/**
 * Dialog for ISDN Provider
 * @return any user input
 */

global define symbol Dialog2() ``{

    /* PREPARE VARIABLES */

    string I4L_LOCALMSN = ISDN::LocalMSN;
    string I4L_DIALMODE = ISDN::DialMode;
    string I4L_IDLETIME = ISDN::IdleTime;
    string I4L_CHARGEHUP = ISDN::ChargeHUP;
    boolean Starting_ISDN = ISDN::StartAtBoot;

    boolean FirewallChecked = ISDN::Firewall;
    string I4L_ENCAP = ISDN::Encap;

/* Old code:
    map Address = lookup(ProviderISDN, "address", $[]);
    map IfConf = $[]; // DecodeIfConf(lookup(Address, "ifconf", ""));  FIXME: undefined function DecodeIfConf
*/

    string Local_IP = ISDN::Local_IP;
    string Remote_IP = ISDN::Remote_IP;

/*    boolean Dynamic_IP = lookup(IfConf, "Dynamic_IP", false);
    string NetDev = lookup(ProviderISDN, "netdev", "");

    if (Local_IP == "InvalidIP" || Remote_IP == "InvalidIP") {
	if (I4L_ENCAP == "syncppp") {
	integer Number = tointeger(substring(lookup(ProviderISDN, "netdev", ""), 4));
	Local_IP = sformat("192.168.%1.1", Number);
	Remote_IP = sformat("192.168.%1.99", Number);
	Address = EncodeIfConf(Local_IP, Remote_IP, Dynamic_IP);
	ProviderISDN = add(ProviderISDN, "address", Address);
	TmpConfiguration = add(TmpConfiguration, "ProviderISDN", ProviderISDN);
	}
    }
*/
    /* DIALOG TEXTS */

    string caption = _("ISDN connection parameters");
    string helptext = "";

    // help text 1/7
  helptext = helptext + _("<p>My phone number --  As your own telephone number (MSN),
put in your telephone number (without area code) if your ISDN card is connected
directly to the phone company-provided socket. If it is connected to a PBX,
put in the MSN stored in the PBX (e.g., your phone extension or
the last digit or digits of your phone extension) . If this fails, try
using 0, which normally means the default MSN is actually used.</p>
");

  // help text 2/7
  helptext = helptext + _("<p><b>Dial mode -- Off</b> means no connections at all are possible.</p>");

  // help text 3/7
  helptext = helptext + _("<p><b>Manual</b> -- only outgoing connections made manually are possible.
Incoming connections can be made. Incoming callback connections are not possible.
If you select <b>Manually</b> in the dial mode, you can build or
close a connection using the tools <b>kimon</b> or <b>kinternet</b>
or, as user root, with the commands
         <br>isdnctrl dial ippp0  <br>isdnctrl hangup ippp0</p>
");

  // help text 4/7
  helptext = helptext + _("<p><b>Automatic</b> -- when necessary, a connection will be made
automatically. This is also the only mode where incoming callback calls will succeed
(connections that you call back).  It will also hang up after the specified hup-timeout.</p>
");

  // help text 5/7
  helptext = helptext + _("<p>Automatic hang-up -- you can set that
  the line will be hung up automatically after 'IDLE timeout'. The checkbox Chargehup tells that the line stays connected
  after 'IDLE timeout' until immediately before the next counting pulse
  (this only works if your ISDN provider transmits the charge-info during and after the connection)</p>
");

  // help text 5/7
  helptext = helptext + _("<p>If you want the ISDN service to be initialized
on start-up, press the corresponding button. If not,
you will have to start the service manually by issuing the
following commands (while logged in as 'root'):
<tt>
 <br> rci4l_hardware start
 <br> rci4l start
 <br> rcroute start
 <br>  to start ISDN.</tt></p>
");

  // help text 5/7
  helptext = helptext + _("<p>Selecting <b>activate firewall</b> will block all incoming
connections. Choosing this option will make dial-up connections to
the Internet safe from attacks from the outside.</p>
");

    /* DIALOG CONTENTS */

  term FirewallCheckbox = `Left(`CheckBox(`id(`Firewall), sformat(_("Activate %1"), "fire&wall"), FirewallChecked));

  integer idle = 0;

  if (I4L_IDLETIME != "off")
  {
      idle = tointeger(I4L_IDLETIME);
  }

  term contents = `HBox(
		      `HSpacing(7),
		      `VBox(
			    `HBox(
				  `TextEntry(`id(`localmsn), _("&My phone number"), I4L_LOCALMSN),
				  `ComboBox(`id(`dialmode), _("&Dial mode"),
					    [
					     `item(`id("auto"), _("Automatic"), I4L_DIALMODE == "auto"),
					     `item(`id("manual"), _("Manual"), I4L_DIALMODE == "manual"),
					     `item(`id("off"), _("Off"), I4L_DIALMODE == "off")])),
			    `VSpacing(0.5),
			    `Frame(_("Automatic hang-up"),
				   `HBox(
					 `HSpacing(),
					 `HBox(
					       `VBox(`Left(`HSquash(`IntField(`id(`idletime), _("&IDLE timeout"), 0, 100000,
									      idle))),
						     `VSpacing(0.4)),
					       `Left(`CheckBox(`id(`chargehup), _("Charge&HUP"), I4L_CHARGEHUP == "on"))),
					 `HSpacing())),
			    `Left(`CheckBox(`id(`starting_isdn), _("&Start ISDN during system boot"), Starting_ISDN)),
			    FirewallCheckbox,
			    `VSpacing(0.3),
			    `PushButton(`id(`ipsettings), _("IP se&ttings")),
			    `PushButton(`id(`callbacksettings), _("&Callback settings"))),
		      `HSpacing(7));

    /* DIALOG PREPARE */
    Wizard::SetContents(caption, contents, helptext, true, true);

    Wizard::ReplaceNextButton(`PushButton(`id(`next), `opt(`default), ((I4L_ENCAP == "rawip") ? OKButtonLabel() : FinishButtonLabel())));


    /* MAIN CYCLE */
    symbol ret = nil;
    while (true) {
	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if (UI::ReallyAbortPopup(true))
		break;
	    else
		continue;
	}
	else if (ret == `back) {
	    break;
	}
	else if (ret == `next) {
	    if (!checkIP(Local_IP) || !checkIP(Remote_IP)) {
		UI::MessagePopup(_("You have to fill in Local and Remote IP addresses correctly"));
		continue;
	    }
	    else
	    {
		break;
	    }
	}
	else {
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}

    }

    /* UPDATE VARIABLES */

    if (ret == `next || ret == `ipsettings || ret == `callbacksettings) {
	ISDN::LocalMSN = UI::QueryWidget(`id(`localmsn), `Value);
	ISDN::DialMode = UI::QueryWidget(`id(`dialmode), `Value);
	ISDN::StartAtBoot = UI::QueryWidget(`id(`starting_isdn), `Value);
	ISDN::IdleTime = sformat("%1", UI::QueryWidget(`id(`idletime), `Value));

	ISDN::Firewall = UI::QueryWidget(`id(`Firewall), `Value);

	if (UI::QueryWidget(`id(`chargehup), `Value))
	{
	  ISDN::ChargeHUP = "on";
	}
	else
	{
	  ISDN::ChargeHUP = "off";
	}
    }

    if (ret == `next && I4L_ENCAP == "rawip")
    {
	return `routedns;
    }

    return ret;
}





/* DIALOG TESTING */
Wizard::CreateDialog();

Dialog1(`Detected);
Dialog1(`DetectedISA);
Dialog1(`something_different);
Dialog2();
Dialog3();
Dialog4();

UI::CloseDialog();

/* EOF */
}
