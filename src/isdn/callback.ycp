/**
 * File:
 *   include/network/isdn/dialogs.ycp
 *
 * Package:
 *   Configuration of network
 *
 * Summary:
 *   ISDN configuration dialogs
 *
 * Authors:
 *   Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 */

{

textdomain "network";

import "Wizard";
import "ISDN";

include "ui/common_popups.ycp";

/**
 * Dialog for ISDN callback settings
 * @return any user input
 */

global define symbol callback() ``{

    /* DIALOG TEXTS */

    string caption = _("ISDN callback settings");

    // help text 1/3
    string helptext =
_("<p>If callback mode is off,  calls  are handled normally without special 
processing.</p>");

    // helptext text 2/3
    helptext = helptext +
_("<p>If callback mode is server, after getting an incoming call, a callback 
is triggered.</p>");

    // helptext text 3/3
    helptext = helptext +
_("If callback mode is client, the local system does the initial call then 
waits for callback of the remote machine.");


    /* DIALOG CONTENTS */

    term contents =
	`HVSquash(
	    `Frame(_("Callback functions"),
		`RadioButtonGroup(`id(`callback),
		    `HBox(
			`HSpacing(0.5),
			`VBox(
			    `Left(`RadioButton(`id("off"), _("Callbac&k Off"), ISDN::callback == "off")),
			    `Left(`RadioButton(`id("in"), _("Callback &Server"), ISDN::callback == "in")),
			    `Left(`RadioButton(`id("out"), _("Callback &Client"), ISDN::callback == "out"))
			)
		    )
		)
	    )
	);

    /* DIALOG PREPARE */
    Wizard::SetContents(caption, contents, helptext, true, true);

    Wizard::ReplaceNextButton(`PushButton(`id(`next), `opt(`default), OKButtonLabel()));

    /* MAIN CYCLE */
    symbol ret = nil;
    while (true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if (UI::ReallyAbortPopup(true))
		break;
	    else
		continue;
	}
	else if (ret == `back) {
	    break;
	}
	else if (ret == `next) {
	    /* check_* */
	    break;
	}
	else {
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}

    }

    /* UPDATE VARIABLES */
    if (ret == `next) {
	ISDN::callback = UI::QueryWidget(`id(`callback), `CurrentButton);
    }

    return ret;
}

}
