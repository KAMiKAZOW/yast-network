/**
 * File:
 *   include/network/isdn/config.ycp
 *
 * Package:
 *   Configuration of network cards
 *
 * Summary:
 *   Reading/Writing functions for isdn config data
 *
 * Authors:
 *   Karsten keil <kkeil@suse.de>
 *
 * $Id$
 *
 * All config settings are stored in a global variable Devices.
 * Deleted devices are in the global list DeletedDevices.
 */

{

textdomain "network";

import "Map";
include "network/routines.ycp";

/**
 * Read Devices from files
 * @param devregex regular expression for the device type
 * @return true if sucess
 * @example ReadConfig("eth|tr");
 */
global define boolean ReadISDNConfig(string devregex) ``{

    string sysconfig = "/etc/sysconfig/isdn";

    list devices = SCR::Dir(.isdn.section);
    devices = filter(`file, devices, ``(!regexpmatch(file, "[\.~]")));
    devices = filter(`file, devices, ``(regexpmatch(file, "^.*/isdn/cfg-.*")));

    if(devregex != nil && devregex != "") {
	devices = filter(`file, devices, ``(regexpmatch(file, devregex)));
    }
    maplist(`d, devices, ``{
	string devtype = regexpsub(d, "^.*/cfg-([a-z]+)[^a-z]*$", "\\1");
	if (devtype == nil)
	    return;
	string devnum = regexpsub(d, "^.*/cfg-[a-z]+([0-9]+)", "\\1");
	if (devnum == nil)
	    return;
	y2debug("devtype=%1 devnum=%2", devtype, devnum);

	map dev = lookup(Devices, devtype, $[]);
	if(haskey(dev, devnum)) {
	    y2error("device already present: %1", devnum);
	    return;
	}

	string pth = ".isdn.value.\"" + sysconfig + "/cfg-"+devtype+devnum+"\"";
	list values = SCR::Dir(topath(pth));
	map config = listmap(`val, values, ``{
	    string item = SCR::Read(topath(pth + "." + val));
	    if(item!=nil) return [ val, item ];
	});

	change(dev, devnum, config);
	change(Devices, devtype, dev);
    });

    y2debug("Devices=%1",Devices);
    return true;
}

/**
 * Write Devices to files
 * @return true if success
 */
global define boolean WriteISDNConfig(string isdntyp) ``{

    y2debug("Devices=%1",Devices);
    string sysconfig = "/etc/sysconfig/isdn";

    /* remove deleted devices */
    list devs = filter(`x, DeletedDevices, ``(regexpmatch(x, isdntyp)));
    maplist(`d, devs, ``{
	path p = topath(".isdn.section.\"" + sysconfig + "/cfg-" + d + "\"");
	y2debug("deleting: %1", p);
	SCR::Write(p, nil);
    });

    /* write all devices */
    maplist(`typ, `devsmap, Devices, ``{
	maplist(`num, `devmap, devsmap, ``{
	    /* write sysconfig */
	    if (typ != isdntyp)
	        return;
	    string dev = typ + num;
	    string p = ".isdn.value.\"" + sysconfig + "/cfg-" + dev + "\".";

	    /* write all keys to config */
	    maplist(`k, Map::Keys(devmap), ``{
		if(k == "module" || k == "options") return;
		SCR::Write(topath(p+k), lookup(devmap, k, ""));
	    });
	    string unq = lookup(devmap, "UNIQUE", "");
	    if(unq != "")
		SCR::Write(.probe.status.configured, unq, `yes);
	});
    });

    /* finish him */
    SCR::Write(.isdn, nil);

    /* clean up variables */
    devs = filter(`x, DeletedDevices, ``(!regexpmatch(x, isdntyp)));
    y2debug("DeletedDevices: %1 devs: %2", DeletedDevices, devs);
    DeletedDevices = devs;

    return true;
}

/**
 * Write one Devices to file
 * @return true if success
 */
global define boolean WriteOneISDNConfig(string contr) ``{

    y2debug("Devices=%1",Devices);
    string sysconfig = "/etc/sysconfig/isdn";

    maplist(`typ, `devsmap, Devices, ``{
	maplist(`num, `devmap, devsmap, ``{
	    string dev = typ + num;
	    if (contr != dev)
		return;
	    string p = ".isdn.value.\"" + sysconfig + "/cfg-" + dev + "\".";

	    /* write all keys to config */
	    maplist(`k, Map::Keys(devmap), ``{
		if(k == "module" || k == "options") return;
		SCR::Write(topath(p+k), lookup(devmap, k, ""));
	    });
	});
    });

    /* finish him */
    SCR::Write(.isdn, nil);

    return true;
}

}
