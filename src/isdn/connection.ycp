/**
 * File:
 *   include/network/isdn/dialogs.ycp
 *
 * Package:
 *   Configuration of network
 *
 * Summary:
 *   ISDN configuration dialogs
 *
 * Authors:
 *   Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 */

{

textdomain "network";

import "Wizard";
import "ISDN";

include "ui/common_popups.ycp";
include "network/ip.ycp";

/**
 * Dialog for ISDN Provider
 * @return any user input
 */

global define symbol isdn_connection() ``{


/* Old code:
    map Address = lookup(ProviderISDN, "address", $[]);
    map IfConf = $[]; // DecodeIfConf(lookup(Address, "ifconf", ""));  FIXME: undefined function DecodeIfConf
*/

    string Local_IP = ISDN::localIP;
    string Remote_IP = ISDN::remoteIP;

/*    boolean Dynamic_IP = lookup(IfConf, "Dynamic_IP", false);
    string NetDev = lookup(ProviderISDN, "netdev", "");
*/
/*
    if (Local_IP == "InvalidIP" || Remote_IP == "InvalidIP") {
	if (ISDN::con_protocol  == "syncppp") {
	integer Number = tointeger(substring(lookup(ProviderISDN, "netdev", ""), 4));
	Local_IP = sformat("192.168.%1.1", Number);
	Remote_IP = sformat("192.168.%1.99", Number);
	Address = EncodeIfConf(Local_IP, Remote_IP, Dynamic_IP);
	ProviderISDN = add(ProviderISDN, "address", Address);
	TmpConfiguration = add(TmpConfiguration, "ProviderISDN", ProviderISDN);
	}
    }
*/
    /* DIALOG TEXTS */

    string caption = _("ISDN connection parameters");
    string helptext = "";

    // help text 1/7
  helptext = helptext +
_("<p>My phone number --  As your own telephone number (MSN), put in your 
telephone number (without area code) if your ISDN card is connected directly
to the phone company-provided socket. If it is connected to a PBX, put in the
MSN stored in the PBX (e.g., your phone extension or the last digit or digits
of your phone extension) . If this fails, try using 0, which normally means
the default MSN is actually used.</p>");

  // help text 2/7
  helptext = helptext +
_("<p><b>Dial mode -- Off</b> means no connections at all are possible.</p>");

  // help text 3/7
  helptext = helptext +
_("<p><b>Manual</b> -- only outgoing connections made manually are possible.
Incoming connections can be made. Incoming callback connections are not
possible. If you select <b>Manually</b> in the dial mode, you can build or
close a connection using the tools <b>kimon</b> or <b>kinternet</b> or, as user
root, with the commands <br>isdnctrl dial ippp0  <br>isdnctrl hangup ippp0</p>");

  // help text 4/7
  helptext = helptext +
_("<p><b>Automatic</b> -- when necessary, a connection will be made
automatically. This is also the only mode where incoming callback calls will
succeed (connections that you call back).  It will also hang up after the
specified hup-timeout.</p>");

  // help text 5/7
  helptext = helptext +
_("<p>Automatic hang-up -- you can set that the line will be hung up
automatically after 'IDLE timeout' seconds. The checkbox Chargehup tells that the line
stays connected after 'IDLE timeout' until immediately before the next counting
pulse (this only works if your ISDN provider transmits the charge-info during
and after the connection)</p>");

  // help text 5/7
  helptext = helptext +
_("<p><b>Start Mode: </b><b>OnBoot</b> the driver is loaded during
system boot. <b>Manual</b> the driver must be started with the
<b>rcisdn start</b> command, only the user root can do this.
<b>HotPlug </b> is a special case for PCMCIA and USB devices.</p>");

  helptext = helptext +
_("<p>If you select manual you have to start/stop the service manually by
issuing the following commands (while logged in as 'root'):
<tt>
 <br> <b>start: </b>ifup ippp0
 <br> <b>stop : </b>ifdown ippp0
 <br>
</tt>
Note: ippp0 is an example</p>
");

  // help text 6/7
  helptext = helptext +
_("<p>Selecting <b>activate firewall</b> will block all incoming connections.
Choosing this option will make dial-up connections to the Internet safe from
attacks from the outside.</p>");

  // help text 7/7
  helptext = helptext +
_("<p>Selecting <b>channel bundling</b> will setup a 128kBit connection on demand 
also known as <b>M</b>ultilink <b>PPP</b>. This option is in a experimental
state and may crash your machine.</p>");

    /* DIALOG CONTENTS */

  term FirewallCheckbox = `Left(`CheckBox(`id(`Firewall), sformat(_("Activate %1"), "fire&wall"), ISDN::firewall));

  integer idle = 0;

  if (ISDN::idleTime != "off")
  {
      idle = tointeger(ISDN::idleTime);
  }

  term contents =
	`HBox(
	    `HSpacing(6),
	    `VBox(
		`HBox(
		    `TextEntry(`id(`localmsn), _("&My phone number"), ISDN::localMSN),
		    `HSpacing(1),
		    `ComboBox(`id(`dialmode), _("&Dial mode "),
		    [
		        `item(`id("auto"), _("Automatic"), ISDN::dialMode == "auto"),
			`item(`id("manual"), _("Manual"), ISDN::dialMode == "manual"),
			`item(`id("off"), _("Off"), ISDN::dialMode == "off")
		    ])
		),
		`VSpacing(0.5),
		`Frame(_("Automatic hang-up"),
		    `HBox(
			`HSpacing(),
			`HBox(
			    `VBox(
				`Left(
				    `HSquash(
					`IntField(`id(`idletime), _("&IDLE timeout"), 0, 100000, idle)
				    )
				),
				`VSpacing(0.4)
			    ),
			    `Left(`CheckBox(`id(`chargehup), _("Charge&HUP"), ISDN::chargeHUP == "on"))
			),
			`HSpacing()
		    )
		),
		`ComboBox(`id(`startmode), _("&Start Mode"),
		    [
			`item(`id("onboot"), _("OnBoot"), ISDN::if_bootmode == "onboot"),
			`item(`id("manual"), _("Manual"), ISDN::if_bootmode == "manual"),
			`item(`id("hotplug"), _("HotPlug"), ISDN::if_bootmode == "hotplug")
		    ]),
		FirewallCheckbox,
		`Left(`CheckBox(`id(`multilink), _("Ch&annel bundling"), ISDN::multilink)),
		`VSpacing(0.3),
		`PushButton(`id(`ipsettings), _("IP se&ttings")),
		`PushButton(`id(`callbacksettings), _("&Callback settings"))
	    ),
	    `HSpacing(6)
	);

    /* DIALOG PREPARE */
    Wizard::SetContents(caption, contents, helptext, true, true);

    Wizard::ReplaceNextButton(`PushButton(`id(`next), `opt(`default), 
	    ((ISDN::con_protocol == "rawip") ? OKButtonLabel() : FinishButtonLabel())));


    /* MAIN CYCLE */
    symbol ret = nil;
    while (true) {
	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if (UI::ReallyAbortPopup(true))
		break;
	    else
		continue;
	}
	else if (ret == `back) {
	    break;
	}
	else if (contains ([`next, `ipsettings, `callbacksettings], ret)) {
	    if (ret == `next && (!check_ip4(Local_IP) || !check_ip4(Remote_IP))) {
		UI::MessagePopup(_("You have to fill in Local and Remote IP addresses correctly"));
		continue;
	    }
	    else
	    {
		break;
	    }
	}
	else {
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}

    }

    /* UPDATE VARIABLES */

    if (ret == `next || ret == `ipsettings || ret == `callbacksettings) {
	ISDN::localMSN = UI::QueryWidget(`id(`localmsn), `Value);
	ISDN::dialMode = UI::QueryWidget(`id(`dialmode), `Value);
	ISDN::startAtBoot = UI::QueryWidget(`id(`starting_isdn), `Value);
	ISDN::if_bootmode = UI::QueryWidget(`id(`startmode), `Value);
	ISDN::multilink = UI::QueryWidget(`id(`multilink), `Value);
	ISDN::idleTime = sformat("%1", UI::QueryWidget(`id(`idletime), `Value));

	ISDN::firewall = UI::QueryWidget(`id(`Firewall), `Value);

	if (UI::QueryWidget(`id(`chargehup), `Value))
	{
	  ISDN::chargeHUP = "on";
	}
	else
	{
	  ISDN::chargeHUP = "off";
	}
    }

    return ret;
}

}
