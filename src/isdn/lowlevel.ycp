/**
 * File:
 *   include/network/isdn/lowlovel.ycp
 *
 * Package:
 *   Configuration of network
 *
 * Summary:
 *   ISDN configuration dialogs
 *
 * Authors:
 *   Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 */

{

textdomain "network";

import "Wizard";
import "ISDN";

include "ui/common_popups.ycp";
include "network/isdn/routines.ycp";

/**
 * Dialog for ISDN Parameters
 * @param Detected detected card
 * @return any user input
 */
global define term Card_Parameter(integer cidx) ``{
	term  contens = `VBox();
	string bootm = ISDN::hw_bootmode;
	map   cur_card = select(ISDN::ISDN_Devices, cidx, nil);
	integer i = 0;
	boolean found = false;

	if (cur_card == nil)
	    return contens;
	y2debug("cur_card %1",cur_card);
	i = lookup(cur_card, "class", 0);
	if ((i == 4) || (i==8)) /* PCMCIA, USB */
		bootm = "hotplug";
	contens = add(contens, 
	    `ComboBox(`id(`startmode), _("&Start Mode"),
	    [
		`item(`id("onboot"), _("OnBoot"), bootm == "onboot"),
		`item(`id("manual"), _("Manual"), bootm == "manual"),
		`item(`id("hotplug"), _("HotPlug"), bootm == "hotplug")
	    ]));
	if ((i != 3) && (i != 6) && (i != 7))
	    return contens;
	/* only legal ISA parport and serial devices */
	map para = lookup(cur_card, "parameter", nil);
	if (para == nil)
	    return contens;
	contens = add(contens, `VSpacing(1));
	contens = add(contens, `Label(_("Parameter")));
	list io = lookup(para, "IO", []);
	if (io != []) {
	    i = -1;
	    integer default_io = select(io, 0, 0);
	    if (ISDN::para_io != nil && ISDN::para_io != "")
	    	default_io = tointeger(ISDN::para_io);
	    list iol = [];
	    found = false;
	    maplist(`v, io, ``{
	        i = i + 1;
	    	if (i == 0)
	    	    return;
	    	boolean tmp = (v == default_io); 
	    	if (tmp)
	    		found = true;
	    	iol = add(iol, `item(`id(v), sformat("%1",tohexstring(v)), tmp));
	    });
	    if (!found) {
		iol = add(iol, `item(`id(default_io), sformat("%1",tohexstring(default_io)), true));
		contens = add(contens, `ComboBox(`id(`IOADR), `opt(`editable), _("&IO Address"), iol));
	    } else
		contens = add(contens, `ComboBox(`id(`IOADR),  _("&IO Address"), iol));
	}
	list irq = lookup(para, "IRQ", []);
	if (irq != []) {
	    i = -1;
	    integer default_irq = select(irq, 0, 0);
	    if (ISDN::para_irq != nil && ISDN::para_irq != "")
	    	default_irq = tointeger(ISDN::para_irq);
	    list irql = [];
	    found = false;
	    maplist(`v, irq, ``{
	        i = i + 1;
	    	if (i == 0)
	    	    return;
	    	boolean tmp = (v == default_irq); 
	    	if (tmp)
	    		found = true;
	    	irql = add(irql, `item(`id(v), sformat("%1",v), tmp));
	    });
	    if (!found) {
		irql = add(irql, `item(`id(default_irq), sformat("%1",default_irq), true));
		contens = add(contens, `ComboBox(`id(`IRQ), `opt(`editable), _("IR&Q"), irql));
	    } else
		contens = add(contens, `ComboBox(`id(`IRQ),  _("IR&Q"), irql));
	}
	list membase = lookup(para, "MEMBASE", []);
	if (membase != []) {
	    i = -1;
	    integer default_mem = select(membase, 0, 0);
	    if (ISDN::para_membase != nil && ISDN::para_membase != "")
	    	default_mem = tointeger(ISDN::para_membase);
	    list meml = [];
	    found = false;
	    maplist(`v, membase, ``{
	        i = i + 1;
	    	if (i == 0)
	    	    return;
	    	boolean tmp = (v == default_mem); 
	    	if (tmp)
	    		found = true;
	    	meml = add(meml, `item(`id(v), sformat("%1",tohexstring(v)), tmp));
	    });
	    if (!found) {
		meml = add(meml, `item(`id(default_mem), sformat("%1",tohexstring(default_mem)), true));
		contens = add(contens, `ComboBox(`id(`MEMBASE), `opt(`editable), _("&Membase"), meml));
	    } else
		contens = add(contens, `ComboBox(`id(`MEMBASE),  _("&Membase"), meml));
	}
	return contens;
}

/**
 * Creates a Combobox with a description label to select a 
 * driver from list drv. The label is the description of the
 * current selected driver.
 * @param list drv    list of available drivers for the card
 * @param string desc description of the actual driver
 * @return term of the created box
 */
global define term create_drv_term(list drv, string desc) ``{
    term ret = nil;

    ret = `HBox(
	`HWeight( 24,`ComboBox(`id(`DrvBox), `opt(`hstretch,`notify), _("Dri&ver"), drv)),
	`HSpacing(1),
	`HWeight( 75,`Label(`id(`DrvDesc), desc))
    );
    return ret;
}

/**
 * Main dialog to select a ISDN card and a driver.
 * If needed HW parameter can be set
 * Line parameter like AREACODE and DIALPREFIX can be entered.
 * @param symbol Detected - 'detected - card is detected by hwinfo
 *                          'other    - other, not detected cards
 *                          'edit     - edit card settings for the card
 *                                      defined by ISDN::para_type and
 *                                      ISDN::para_subtype
 *                          'add      - add a new card
 * return dialog result
 */

global define symbol isdn_lowlevel(symbol Detected) ``{
    /* PREPARE VARIABLES */

    integer id = -1;
    integer drvid = -1;
    integer CurrentCardIndex = nil;
    integer CurrentDrvIndex = nil;
    integer DriverCnt = nil;
    integer Default_TYPE = tointeger(ISDN::para_type);
    integer Default_SUBTYPE = tointeger(ISDN::para_subtype);
    string  CardName = "";

    ISDN::ISDN_Devices = SCR(`Read(.probe.ihw_data));
    y2debug("ISDN::ISDN_Devices %1", ISDN::ISDN_Devices);
    y2debug("ISDN Detected %1", Detected);
    y2debug("para_TYPE : %1/%2", ISDN::para_type, ISDN::para_subtype);
    y2debug("DefaultTYPE : %1/%2", Default_TYPE, Default_SUBTYPE);

    if (Detected == `other || Detected == `add) {
	// select first card in list
	map first_card = select(ISDN::ISDN_Devices, 1, $[]);
	Default_TYPE = get_i4ltype(first_card);
	Default_SUBTYPE = get_i4lsubtype(first_card);
    }

    map CurrentCard = get_isdncard_by_type(ISDN::ISDN_Devices, Default_TYPE, Default_SUBTYPE);

    y2debug("CurrentCard %1", CurrentCard);

    list CardList = maplist(`e, ISDN::ISDN_Devices,
    ``{
	id = id + 1;
	boolean Tmp = card_has_type(e, Default_TYPE, Default_SUBTYPE);
	if (Tmp) {
	   CurrentCardIndex = id;
	   CardName = lookup(e, "name", "default");
	}
	return `item(`id(id), lookup(e, "name", "default"), Tmp);		// FIXME: default value
    });

    y2debug("CardList %1", CardList);

    list CardDrivers = lookup(CurrentCard, "driver", []);
    DriverCnt = size(CardDrivers);
    list DrvList = maplist(`d, CardDrivers, 
    ``{
	drvid = drvid + 1;
	boolean Tmp = driver_has_type(d, Default_TYPE, Default_SUBTYPE);
	if (Tmp) CurrentDrvIndex = drvid;
	return `item(`id(drvid), lookup(d, "name", "default"), Tmp);		// FIXME: default value
    });
    
    y2debug("DrvList %1", DrvList);
    /* DIALOG TEXTS */

    string caption = sformat(_("ISDN low-level configuration for %1%2"),
    	ISDN::type, ISDN::device);
    string helptext = "";

    if (Detected != `Detected && ISDN::operation != `edit) {
	// helptext text 1/7
	helptext = helptext +
_("<p>Please select ISDN card from the list.</p>");
    }
	// helptext text 2/7
	helptext = helptext +
_("<p>If you have an old legacy ISA card, you can enter values for
IO port or memory addresses and the used interrupt.
For the correct values check with your technical manual or contact your salesman.</p>");

        // helptext text 3/7
	helptext = helptext +
_("<p><b>Start Mode: </b><b>OnBoot</b> the driver is loaded during
system boot. <b>Manual</b> the driver must be started with the
<b>rcisdn start</b> command, only the user root can do this.
<b>HotPlug </b> is a special case for PCMCIA and USB devices.</p>");

	// helptext text 4/7
	helptext = helptext +
_("<p>For some isdncard exist multiple drivers,
Please select one from the list.</p>");

	// helptext text 5/7
	helptext = helptext +
_("<p><b>ISDN protocol: </b>In most cases, the protocol is Euro-ISDN, 
especially if your ISDN card is connected directly to the public ISDN 
network. 1TR6 is only rarely used in older German private networks on 
internal ports. In the United States, NI1 is usually used. Because it 
is still experimental, contact the suse-isdn@suse.com mail list for 
more information.</p>");

	// helptext text 6/7
	helptext = helptext +
_("<p><b>Areacode: </b> You should enter your local areacode for the ISDN
line here, including the country prefix, for example 
<tt><br>\"+49 911\"<br></tt></p>");

	// helptext text 7/7
	helptext = helptext +
_("<p><b>Dial Prefix: </b> If you need a prefix to get an public line, you
can enter it here. Often used on a internal S0 bus, most common is \"0\"</p>");

    /* DIALOG CONTENTS */

    term contents = nil;

    term ISDN_protocol = 
	`VSquash(
	    `Frame(_("Selection of ISDN protocol"),
		`RadioButtonGroup(`id(`protocol),
		    `VBox(
			`Left(`RadioButton(`id("euro"), _("&Euro-ISDN (EDSS1)"), ISDN::protocol == "euro")),
			`Left(`RadioButton(`id("1tr6"), _("1TR&6"), ISDN::protocol == "1tr6")),
			`Left(`RadioButton(`id("leased"), _("&Leased line"), ISDN::protocol == "leased")),
			`Left(`RadioButton(`id("ni1"), _("NI&1"), ISDN::protocol == "ni1")),
			`VStretch()
		    )
		)
	    )
	);

    term ISDN_line = `VBox(
	`TextEntry(`id(`areacode), _("&Areacode"), ISDN::areacode),
	`TextEntry(`id(`dialprefix), _("&Dialprefix"), ISDN::dialprefix)
    );

    string desc = lookup(select(CardDrivers, CurrentDrvIndex, $[]), "description", "default");
    term ISDN_driver = create_drv_term(DrvList, desc);
    term ISDN_card = nil;
    if (Detected == `Detected || ISDN::operation == `edit) {
        ISDN_card = `Frame(_("ISDN card"),
	    `HBox(
		`HWeight(1, `Label(`id(`CardN), CardName)),
		`HSpacing(),
		`ReplacePoint(`id(`ParaR), Card_Parameter(CurrentCardIndex))
	    )
	);
    } else {
        ISDN_card = `Frame(_("ISDN cards"),
	    `HBox(
		`HWeight(1, `SelectionBox(`id(`Card), `opt(`notify), _("Select your ISDN &card"),  CardList)),
		`HSpacing(),
		`ReplacePoint(`id(`ParaR), Card_Parameter(CurrentCardIndex))
	    )
	);
    }
    contents =
	`VBox(
	    ISDN_card,
	    `VSpacing(0.2),
	    `ReplacePoint(`id(`DrvRpl), ISDN_driver),
	    `VSpacing(0.2),
	    `HBox(
		ISDN_protocol,
		`HSpacing(1),
		ISDN_line
	    )
	);

    /* DIALOG PREPARE */
    Wizard::SetContents(caption, contents, helptext, true, true);
    Wizard::ReplaceNextButton(`PushButton(`id(`next), `opt(`default), OKButtonLabel()));
    if (1>=size(DrvList))
	UI::ChangeWidget (`id (`DrvBox), `Enabled, false);

    /* MAIN CYCLE */
    symbol ret = nil;
    while (true)
    {
	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel)
	{
	    if (UI::ReallyAbortPopup(true))
	    {
		break;
	    }
	    continue;
	}
	if (ret == `DrvBox) {
	    drvid = tointeger(UI::QueryWidget(`id(`DrvBox), `Value));
	    if (drvid != CurrentDrvIndex) {
		desc = lookup(select(CardDrivers, drvid, $[]), "description", "default");
		CurrentDrvIndex = drvid;
		UI::ChangeWidget(`id(`DrvDesc), `Value, desc);
	    }
	} else if (ret == `Card) {
	    CurrentCardIndex = tointeger(UI::QueryWidget(`id(`Card), `CurrentItem));
	    CurrentCard = select(ISDN::ISDN_Devices, CurrentCardIndex, $[]);
	    CardDrivers = lookup(CurrentCard, "driver", []);
	    drvid = -1;
	    CurrentDrvIndex = 0;
	    DrvList = maplist(`d, CardDrivers, ``{
		drvid = drvid + 1;
		return `item(`id(drvid), lookup(d, "name", "default"),
		    CurrentDrvIndex==drvid);		// FIXME: default value
	    });
	    CardName = lookup(CurrentCard, "name", "default"); // FIXME: default value

	    desc = lookup(select(CardDrivers, CurrentDrvIndex, $[]), "description", "default");
	    ISDN_driver = create_drv_term(DrvList, desc);
	    UI::ReplaceWidget(`id(`DrvRpl), ISDN_driver);
	    if (1<size(DrvList))
		UI::ChangeWidget (`id (`DrvBox), `Enabled, true);
	    else
		UI::ChangeWidget (`id (`DrvBox), `Enabled, false);
	    UI::ReplaceWidget(`id(`ParaR), Card_Parameter(CurrentCardIndex));
	}
	else if (ret == `back) {
	    break;
	}
	else if (ret == `next) {
	    ISDN::protocol = UI::QueryWidget(`id(`protocol), `CurrentButton);
	    ISDN::areacode = UI::QueryWidget(`id(`areacode), `Value);
	    ISDN::dialprefix = UI::QueryWidget(`id(`dialprefix), `Value);

	    y2debug("proto: %1", ISDN::protocol);

	    if (DriverCnt >1) {
		drvid = UI::QueryWidget(`id(`drvid), `CurrentItem);
	    }
	    integer val = nil;

	    val = UI::QueryWidget(`id(`IOADR), `Value);
	    if (val != nil)
		ISDN::para_io = sformat("%1", tohexstring(val));
	    val = UI::QueryWidget(`id(`IRQ), `Value);
	    if (val != nil)
		ISDN::para_irq = sformat("%1", val);
	    val = UI::QueryWidget(`id(`MEMBASE), `Value);
	    if (val != nil)
		ISDN::para_membase = sformat("%1", tohexstring(val));

	    CurrentCard = select(ISDN::ISDN_Devices, CurrentCardIndex, $[]);
	    CardDrivers = lookup(CurrentCard, "driver", []);
	    ISDN::para_type	= sformat("%1", lookup(select(CardDrivers, CurrentDrvIndex, $[]), "type", "-1"));
	    ISDN::para_subtype = sformat("%1", lookup(select(CardDrivers, CurrentDrvIndex, $[]), "subtype", "-1"));
	    ISDN::name = sformat("%1", lookup(CurrentCard, "name", ISDN::name));
	    ISDN::modul_name = sformat("%1", lookup(select(CardDrivers, CurrentDrvIndex, $[]), "mod_name", "unknown"));
	    ISDN::hw_bootmode = UI::QueryWidget(`id(`startmode), `Value);
	    if ((ISDN::para_type == "8002") || (ISDN::para_type == "8003")) {
		if (! UI::YesNoPopup (_(" WARNING !!!\n
You have selected an binary only driver.
This driver will provide you additional features
like analog modulation, full CAPI 2.0 and Fax G3
support for this card.
This driver works only on single CPU systems with
i386 architectur. 
Please understand that SuSE Linux AG can't check
the source code of this driver, so we cannot do
any debuging if here are problems in the system.
SuSE Linux AG is also not responsible for any 
serious problems, if this driver is used.

\nYou accept this?\n")))
		    continue;
	    }
	    break;
	} else {
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}

    }
    return ret;
}

/* EOF */
}
