/**
 * File:	include/network/isdn/wizards.ycp
 * Package:	Configuration of network
 * Summary:	User interface functions for isdn configuration.
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 * Wizards definitions.
 */

{

textdomain "network";

import "Wizard";

include "wizard/sequencer.ycp";

include "network/isdn/ip.ycp";
include "network/isdn/complex.ycp";
include "network/isdn/callback.ycp";
include "network/isdn/lowlevel.ycp";
include "network/isdn/connection.ycp";

include "network/providers/connection.ycp";
include "network/providers.ycp";

/**
 * Whole configuration of network
 * @return sequence result
 */
global define symbol ISDNSequence() ``{

    map aliases = $[
	"read"	: [ ``( ReadDialog() ), true ],
	"main"	:   ``( MainSequence() ),
	"write"	: [ ``( WriteDialog() ), true ]
    ];

    map sequence = $[
	"ws_start" : "read",
	"read" : $[
	    `abort	: `abort,
	    `next	: "main"
	],
	"main" : $[
	    `abort	: `abort,
	    `next	: "write"
	],
	"write" : $[
	    `abort	: `abort,
	    `next	: `next
	]
    ];

    string caption = _("ISDN configuration");
    term contents = `Label(_("Initializing ..."));

    Wizard::CreateDialog();
    Wizard::SetContentsButtons(caption, contents, "",
	    BackButtonLabel(), NextButtonLabel());

    symbol ret = WizardSequencer(aliases, sequence);

    UI::CloseDialog();
    return ret;
}

/**
 * Whole configuration of network but without reading and writing.
 * For use with autoinstallation.
 * @return sequence result
 */
global define symbol ISDNAutoSequence() ``{
    string caption = _("ISDN configuration");
    term contents = `Label(_("Initializing ..."));

    Wizard::CreateDialog();
    Wizard::SetContentsButtons(caption, contents, "",
	    BackButtonLabel(), NextButtonLabel());

    symbol ret = MainSequence();

    UI::CloseDialog();
    return ret;
}

/**
 * Main workflow of the network configuration
 * @return sequence result
 */
global define symbol MainSequence() ``{

    map aliases = $[
	"summary"	: ``(SummaryDialog()),
	"overview"	: [ ``(OneISDNSequence("overview")), true ],
	"configure"	: [ ``(OneISDNSequence("lowlevel_detected")), true ],
	"other"		: [ ``(OneISDNSequence("other")), true ]
    ];

    map sequence = $[
	"ws_start" : "summary",
	"summary" : $[
	    `abort	: `abort,
	    `next	: `next,
	    `configure	: "configure",
	    `other	: "other",
	    `overview	: "overview"
	],
	"overview" : $[
	    `abort	: `abort,
	    `back	: `next,
	    `next	: `next
	],
	"configure" : $[
	    `abort	: `abort,
	    `next	: "summary"
	],
	"other" : $[
	    `abort	: `abort,
	    `next	: "summary"
	]
    ];

    return WizardSequencer(aliases, sequence);
}

/**
 * One ISDN card workflow
 * @param entry sequence entry
 * @return sequence result
 */
global define symbol OneISDNSequence(string entry) ``{

    map aliases = $[
	"lowlevel_detected"	:   ``(isdn_lowlevel(`Detected)),
	"lowlevel_detectedISA"	:   ``(isdn_lowlevel(`DetectedISA)),
	"other"			:   ``(isdn_lowlevel(`other)),
	"edit"			:   ``(isdn_lowlevel(`edit)),
	"overview"		:   ``(OverviewDialog()),
	"connection"		:   ``(isdn_connection()),
	"connection"		:   ``(ConnectionDialog("isdn")),
	"ip"			:   ``(isdn_ip()),
	"callback"		:   ``(isdn_callback()),
	"providers"		:   ``(ProvidersDialog("isdn")),
	"provider"		:   ``(runEditIsdnProviderDialog()),
	"new_provider"		:   ``(runEditIsdnProviderDialog()),
	"testdev"		: [ ``(Commit(false)), true ],
	"commit_hw"		: [ ``(Commit(false)), true ],
	"commit_if"		: [ ``(Commit(true)), true ]
    ];

    /* FIXME: detected ISA unsupported */

    map sequence = $[
	"ws_start" : entry,
	"lowlevel_detected" : $[
	    `next :  "commit_hw",
	    `abort : `abort
	],
	"lowlevel_detectedISA" : $[
	    `next :  "commit_hw",
	    `abort : `abort
	],
	"other" : $[
	    `next :  "commit_hw",
	    `abort : `abort
	],
	"edit" : $[
	    `next :  "commit_hw",
	    `abort : `abort
	],
	"overview" : $[
	    `abort	: `abort,
	    `back	: `next,
	    `next	: `next,
	    `add	: "other",
	    `edit	: "edit",
	    `addif	: "providers",
	    `editif	: "providers",
	    `testdev	: "testdev"
	],
	"providers" : $[
	    `next : "provider",
	    `new  : "new_provider",
	    `abort : `abort
	],
	"provider" : $[
	    `next : "connection",
	    `abort : `abort
	],
	"new_provider": $[
	    `next : "connection",
	    `abort : `abort
	],
	"connection" : $[
	    `ipsettings : "ip",
	    `callbacksettings : "callback",
	    `Details : "callback",
	    `IPDetails : "ip",
	    `next : "commit_if",
	    `abort : `abort
	],
	"ip" : $[
	    `next : "connection",
	    `abort : `abort
	],
	"callback" : $[
	    `next : "connection",
	    `abort : `abort
	],
	"testdev" : $[
	    `next   : "overview"
	],
	"commit_hw" : $[
	    `next   : "overview"
	],
	"commit_if" : $[
	    `next   : "overview"
	]
    ];

    return WizardSequencer(aliases, sequence);

}

/* EOF */
}
