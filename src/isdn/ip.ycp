/**
 * File:	include/network/isdn/dialogs.ycp
 * Package:	Configuration of network
 * Summary:	ISDN configuration dialogs
 * Authors:	Michal Svec <msvec@suse.cz>
 *		Karsten Keil <kkeil@suse.cz>
 *
 * $Id$
 */

{

textdomain "network";

import "Wizard";
import "ISDN";

include "ui/common_popups.ycp";
include "network/ip.ycp";

/**
 * Dialog for ISDN IP settings
 * @return any user input
 */

global define symbol IPDialog() ``{


    /* DIALOG TEXTS */

    string caption = _("ISDN IP address settings");

    /* FIXME: help texts, contents */

    // help text 1/3
    string helptext =
_("<p>Please fill in the IP addresses if you got an fixed IP address
from your provider for syncppp or you use raw IP.</p>");

    // help text 2/3
    helptext = helptext +
_("<p>Check the button for <b>dynamic IP address</b> if your provider
assign you one temporary address per connection. In this case the
outgoing address is unknown until the moment the link is established.
This is the default with most providers.
</p>");

    // help text 3/3
    helptext = helptext +
_("<p>Check the button for <b>Defaultroute</b> if you want that this
interface get the default route. Note: only one interface can get the default
route.</b>.</p>");

    /* PREPARE VARIABLES */
    string Local_IP = lookup(ISDN::interface, "IPADDR", "");
    string Remote_IP = lookup(ISDN::interface, "REMOTE_IPADDR", "");
    boolean syncppp = lookup(ISDN::interface, "PROTOCOL", "syncppp") == "syncppp";
    boolean defaultroute = lookup(ISDN::interface, "DEFAULTROUTE", "yes") == "yes";
    boolean dynip = lookup(ISDN::interface, "DYNAMICIP", "yes") == "yes";

    /* DIALOG CONTENTS */

    term contents = nil;

    if(syncppp) {
	contents =
	    `HSquash(
		`VBox(
		    `Frame(_("IP address settings"),
			`HBox(
			    `HSpacing(),
			    `VBox(
				`VSpacing(),
				`Left(`CheckBox(`id(`dynip), `opt(`notify), _("&Dynamic IP address"), dynip)),
				`VSpacing(),
				`Left(`TextEntry(`id(`IP_local), _("&Local IP address of your machine"), Local_IP)),
                                `Left(`TextEntry(`id(`IP_remote), _("Re&mote IP address"), Remote_IP)),
				`VSpacing()
			    ),
			    `HSpacing()
			)
		    ),
		    `VSpacing(),
		    `Left(`CheckBox(`id(`defaultroute), _("D&efaultroute"), defaultroute))
		)
	    );
    }
    else
    {
	contents =
	    //`HSquash(
		`VBox(
		    `Frame(_("IP address settings"),
			`HBox(
			    `HSpacing(),
			    `VBox(
				`VSpacing(),
				`Left(`TextEntry(`id(`IP_local), _("&Local IP address of your machine"), Local_IP)),
				`Left(`TextEntry(`id(`IP_remote), _("Re&mote IP address"), Remote_IP)),
				`VSpacing()
			    ),
			    `HSpacing()
			)
		    ),
		    `VSpacing(),
		    `Left(`CheckBox(`id(`defaultroute), _("D&efaultroute"), defaultroute))
		//)
	    );
    }

    y2debug("contents=%1",contents);

    /* DIALOG PREPARE */
    Wizard::SetContentsButtons(caption, contents, helptext,
	    BackButtonLabel(), NextButtonLabel());

    if(dynip && syncppp) {
	UI::ChangeWidget(`id(`IP_local), `Enabled, false);
	UI::ChangeWidget(`id(`IP_remote), `Enabled, false);
    }

    /* MAIN CYCLE */
    symbol ret = nil;
    while(true) {
	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(UI::ReallyAbortPopup(true))
		break;
	    else
		continue;
	} else if(ret == `dynip) {
	    boolean dip = UI::QueryWidget(`id(`dynip), `Value);
	    UI::ChangeWidget(`id(`IP_local), `Enabled, !dip);
	    UI::ChangeWidget(`id(`IP_remote), `Enabled, !dip);
	    continue;
	}
	/* back */
	else if(ret == `back) {
	    break;
	}
	/* next */
	else if(ret == `next) {
	    Local_IP = UI::QueryWidget(`id(`IP_local), `Value);
	    Remote_IP = UI::QueryWidget(`id(`IP_remote), `Value);
	    defaultroute = UI::QueryWidget(`id(`defaultroute), `Value);

	    if(syncppp)
		dynip = UI::QueryWidget(`id(`dynip), `Value);

	    if((!syncppp || !dynip) && (!check_ip4(Local_IP) || !check_ip4(Remote_IP))) {
		UI::MessagePopup(_("You have to fill in Local and Remote IP addresses correctly"));
		continue;
	    }
	    break;
	}
	else {
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}

    }

    /* UPDATE VARIABLES */

    if(ret == `next) {
        ISDN::interface = union(ISDN::interface, $[
            "IPADDR"		: Local_IP,
            "REMOTE_IPADDR"	: Remote_IP,
            "DEFAULTROUTE"	: defaultroute ? "yes" : "no",
        ]);
	if (syncppp) {
	    ISDN::interface = union(ISDN::interface, $[
		"DYNAMICIP"	: dynip ? "yes" : "no",
	    ]);
	}
    }
    return ret;
}


}
