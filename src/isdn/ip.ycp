/**
 * File:	include/network/isdn/dialogs.ycp
 * Package:	Configuration of network
 * Summary:	ISDN configuration dialogs
 * Authors:	Michal Svec <msvec@suse.cz>
 *		Karsten Keil <kkeil@suse.cz>
 *
 * $Id$
 */

{

textdomain "network";

import "Wizard";
import "ISDN";

include "ui/common_popups.ycp";
include "network/ip.ycp";

/**
 * Dialog for ISDN IP settings
 * @return any user input
 */

global define symbol isdn_ip() ``{

    /* PREPARE VARIABLES */

    string Local_IP = ISDN::localIP;
    string Remote_IP = ISDN::remoteIP;

    /* DIALOG TEXTS and  DIALOG CONTENTS */

    string caption = _("ISDN IP address settings");

    // help text 1/3
    string helptext =
_("<p>Please fill in the IP addresses if you got an fixed IP address
from your provider for syncppp or you use raw IP.</p>");

    // help text 2/3
    helptext = helptext +
_("<p>Check the button for <b>dynamic IP address</b> if your provider
assign you one temporary address per connection. In this case the
outgoing address is unknown until the moment the link is established.
This is the default with most providers.
</p>");

    if (Local_IP == "InvalidIP") Local_IP = "";
    if (Remote_IP == "InvalidIP") Remote_IP = "";

    term contents = nil;

    if (ISDN::con_protocol == "rawip")
    {
	contents =
	    `HSquash(
		`VBox(
		    `Frame(_("IP address settings"),
			`HBox(
			    `HSpacing(),
			    `VBox(
				`VSpacing(),
				`Left(`TextEntry(`id(`IP_local), _("&Local IP address of your machine"), Local_IP)),
				`Left(`TextEntry(`id(`IP_remote), _("Re&mote IP address"), Remote_IP)),
				`VSpacing()
			    ),
			    `HSpacing()
			)
		    ),
		    `VSpacing(),
		    `Left(`CheckBox(`id(`defaultroute), _("D&efaultroute"), ISDN::defaultroute))
		)
	    );
    }
    else
    {
        // help text 3/3
	helptext = helptext +
_("<p>Check the button for <b>Use peer DNS</b> if you want to change
your domain name servers after the connection is up. (This replace your static
DNS configuraton with obtained DNS server IP addresses) Today, almost all
providers support <b>Use peer DNS</b>.</p>");
	contents =
	    `HSquash(
		`VBox(
		    `Frame(_("IP address settings"),
			`HBox(
			    `HSpacing(),
			    `VBox(
			    	`VSpacing(),
				`Left(`CheckBox(`id(`dynamic_ip), `opt(`notify), _("&Dynamic IP address"), ISDN::dynamicIP)),
				`VSpacing(),
				`Left(`TextEntry(`id(`IP_local), _("&Local IP address of your machine"), Local_IP)),
                                `Left(`TextEntry(`id(`IP_remote), _("Re&mote IP address"), Remote_IP)),
				`VSpacing()
			    ),
			    `HSpacing()
			)
		    ),
		    `VSpacing(),
		    `Left(`CheckBox(`id(`defaultroute), `opt(`notify), _("D&efaultroute"), ISDN::defaultroute)),
		    `VSpacing(),
		    `Left(`CheckBox(`id(`peerdns), _("&Use peer DNS"), ISDN::usepeerDNS))
		)
	    );
    }


    /* DIALOG PREPARE */
    Wizard::SetContentsButtons(caption, contents, helptext,
	    BackButtonLabel(), OKButtonLabel());

    if(ISDN::dynamicIP && ISDN::con_protocol != "rawip") {
	UI::ChangeWidget (`id (`IP_local), `Enabled, false);
	UI::ChangeWidget (`id (`IP_remote), `Enabled, false);
    }

    /* MAIN CYCLE */
    symbol ret = nil;
    while (true) {
	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if (UI::ReallyAbortPopup(true))
		break;
	    else
		continue;
	} else if (ret == `dynamic_ip) {
	    boolean dip = UI::QueryWidget (`id (`dynamic_ip), `Value);
	    UI::ChangeWidget (`id (`IP_local), `Enabled, !dip);
	    UI::ChangeWidget (`id (`IP_remote), `Enabled, !dip);
	}
	else if (ret == `back) {
	    break;
	}
	else if (ret == `next) {
	    Local_IP = UI::QueryWidget(`id(`IP_local), `Value);
	    Remote_IP = UI::QueryWidget(`id(`IP_remote), `Value);

	    if (!check_ip4(Local_IP) || !check_ip4(Remote_IP)) {
		UI::MessagePopup(_("You have to fill in Local and Remote IP addresses correctly"));
		continue;
	    }
	    else
	    {
		break;
	    }
	}
	else if (ret == `defaultroute)
	{
	    boolean dr = UI::QueryWidget(`id(`defaultroute), `Value);
	    string button_label = dr ? OKButtonLabel() : NextButtonLabel();
	    UI::ChangeWidget (`id (`next), `Label, button_label);
	}
	else {
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}

    }

    /* UPDATE VARIABLES */

    if (ret == `next)
    {
	if (ISDN::con_protocol == "syncppp")
	{
	    ISDN::dynamicIP = UI::QueryWidget(`id(`dynamic_ip), `Value);
	    ISDN::usepeerDNS = UI::QueryWidget(`id(`peerdns), `Value);
	}
	ISDN::defaultroute = UI::QueryWidget(`id(`defaultroute), `Value);
	ISDN::localIP = UI::QueryWidget(`id(`IP_local), `Value);
	ISDN::remoteIP = UI::QueryWidget(`id(`IP_remote), `Value);
    }

    if (ret == `next && !ISDN::defaultroute)
    {
// Old code:	TmpConfiguration = add (TmpConfiguration, "Static_DNS", true);
	return `next;
    }

    return ret;
}

}
