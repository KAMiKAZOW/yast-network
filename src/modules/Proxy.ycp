/**
 * File:	modules/Proxy.ycp
 * Package:	Network configuration
 * Summary:	Proxy data
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

module "Proxy";
textdomain "network";

include "network/routines.ycp";
include "network/runtime.ycp";

/**
 * Data was modified?
 */
global boolean modified = false;

global string http = "";
global string ftp = "";
global string no = "";
global string user = "";
global string pass = "";

/**
 * Read settings
 * @return true if success
 */
global define boolean Read() ``{

    http = SCR::Read(.sysconfig.proxy.HTTP_PROXY);
    if(http == nil) http = "";
    ftp = SCR::Read(.sysconfig.proxy.FTP_PROXY);
    if(ftp == nil) ftp = "";
    no = SCR::Read(.sysconfig.proxy.NO_PROXY);
    if(no == nil) no = "";
    user = SCR::Read(.sysconfig.proxy.PROXY_USER);
    if(user == nil) user = "";
    pass = SCR::Read(.sysconfig.proxy.PROXY_PASSWD);
    if(pass == nil) pass = "";

    /*
    user = SCR::Read(.root.wgetrc.proxy_user);
    if(user == nil) user = "";
    pass = SCR::Read(.root.wgetrc.proxy_passwd);
    if(pass == nil) pass = "";
    */

    return true;
}

/**
 * Write routing settings and apply changes
 * @return true if success
 */
global define boolean Write() ``{

    if(!modified) return true;
    y2milestone("Writing configuration");

    /* Update /etc/sysconfig/proxy */
    SCR::Write(.sysconfig.proxy.HTTP_PROXY, http);
    SCR::Write(.sysconfig.proxy.FTP_PROXY, ftp);
    SCR::Write(.sysconfig.proxy.NO_PROXY, no);
    SCR::Write(.sysconfig.proxy.PROXY_USER, user);
    SCR::Write(.sysconfig.proxy.PROXY_PASSWD, pass);
    SCR::Write(.sysconfig.proxy, nil);

    /* Update /root/.wgetrc *//*
    SCR::Write(.root.wgetrc.proxy_user, user);
    SCR::Write(.root.wgetrc.proxy_passwd, pass);
    SCR::Write(.root.wgetrc, nil); */

    /* Update profiles generated by SuSEconfig */
    RunSuSEconfigModule("profiles");

    return true;
}


/**
 * Get all settings from a map.
 * When called by <name>_auto (preparing autoinstallation data)
 * the map may be empty.
 * @param settings autoinstallation settings
 * @return true if success
 */
global define boolean Import(map settings) ``{
    if(size(settings) == 0)
	return true;

    http = settings["http_proxy"]:"";
    ftp = settings["ftp_proxy"]:"";
    no = settings["no_proxy"]:"";
    user = settings["proxy_user"]:"";
    pass = settings["proxy_password"]:"";

    modified = true;
    return true;
}

/**
 * Dump the Routing settings to a map, for autoinstallation use.
 * @return autoinstallation settings
 */
global define map Export() ``{
    map settings = $[
	"http_proxy"	: http,
	"ftp_proxy"	: ftp,
	"no_proxy"	: no,
	"proxy_user"	: user,
	"proxy_password": pass,
    ];
    return settings;
}

/* EOF */
}
