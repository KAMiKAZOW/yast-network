/**
 * File:	modules/Routing.ycp
 * Package:	Network configuration
 * Summary:	Routing data
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

module "Routing";
textdomain "network";
include "network/routines.ycp";

/**
 * All routes
 */
global list routes = [];

/**
 * Data was modified?
 */
global boolean modified = false;

/**
 * Enable IP forwarding
 */
global boolean forward = false;

/**
 * All routes read at the start
 */
list routes_init = [];

/**
 * "routes" file location
 */
string routes_file = "/etc/sysconfig/network/routes";

/**
 * Read routing settings
 * @return true if success
 */
global define boolean Read() ``{

    /* read route.conf */
    if(SCR::Read(.target.size, routes_file) > 0)
	routes = SCR::Read(.routes);

    /* save routes to check for changes later */
    routes_init = routes;

    /* enabled IP forwarding */
    if(SCR::Read(.sysconfig.sysctl.IP_FORWARD) == "yes")
	forward = true;

    y2debug("routes=%1", routes);
    return true;
}

/**
 * Write routing settings and apply changes
 * @return true if success
 */
global define boolean Write() ``{

    if(!modified) return true;
    y2milestone("Writing configuration");

    if(forward) {
	SCR::Write(.sysconfig.sysctl.IP_FORWARD, "yes");
	SCR::Execute(.target.bash, "echo 1 > /proc/sys/net/ipv4/ip_forward");
    }
    else {
	SCR::Write(.sysconfig.sysctl.IP_FORWARD, "no");
	SCR::Execute(.target.bash, "echo 0 > /proc/sys/net/ipv4/ip_forward");
    }

    /* Check if there is anything to do */
    if(routes_init == routes) {
	y2debug("Routes not modified");
	return true;
    }

    /* at first stop the running routes */
    // FIXME SCR::Execute(.target.bash, "/etc/init.d/route stop");

    /* create if not exists, otherwise backup */
    if(SCR::Read(.target.size, routes_file) < 0)
	SCR::Write(.target.string, routes_file, "");
    else
	SCR::Execute(.target.bash, "/bin/cp "+routes_file+" "+routes_file+".YaST2save");

    any ret = false;
    if(routes == [])
	/* workaround bug [#4476] */
	ret = SCR::Write(.target.string, routes_file, "");
    else
	/* update the routes config */
	ret = SCR::Write(.routes, routes);

    /* and finally set up the new routes */
    // FIXME SCR::Execute(.target.bash, "/etc/init.d/route start");

    return ret == true;
}


/**
 * Get all the Routing configuration from a map.
 * When called by routing_auto (preparing autoinstallation data)
 * the map may be empty.
 * @param settings autoinstallation settings
 * @return true if success
 */
global define boolean Import(map settings) ``{
    if(size(settings) == 0)
	return true;

    modified = true;

    routes = settings["routes"]:[];
    forward = settings["ip_forward"]:false;
    return true;
}

/**
 * Dump the Routing settings to a map, for autoinstallation use.
 * @return autoinstallation settings
 */
global define map Export() ``{
    return $[
	"routes": eval(routes),
	"ip_forward": forward
    ];
}

/**
 * Create routing text summary
 * @return summary text
 */
global define string Summary() ``{

    string summary = "";

    if(forward == true)
	/* Summary text */
	summary = summary + _("IP forwarding: on");
    else
	/* Summary text */
	summary = summary + _("IP forwarding: off");

    if(routes != []) {
	/* Summary text */
	summary = summary + sformat(_("Routes: %1"), routes);
    }

    return summary;
}

/* EOF */
}
