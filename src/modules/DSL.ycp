/**
 * File:	modules/DSL.ycp
 * Package:	Network configuration
 * Summary:	DSL data
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 * Representation of the configuration of DSL.
 * Input and output routines.
 */

{

module "DSL";
textdomain "network";

import "Detection";
import "Lan";
import "Firewall";
import "Language";
import "Provider";
import "Progress";
import "Summary";

include "network/complex.ycp";
include "network/devices.ycp";
include "network/hardware.ycp";
include "network/routines.ycp";
include "network/runtime.ycp";

/* general stuff */
global string name = "";
global string type = "";
global string device = "";
global string unique = "";
global string startmode = "manual";

/**
 * Special Capi-ADSL mode -- different presets for the first device.
 * Used for ISDN-DSL combined hardware.
 */
global boolean capiadsl = false;

/**
 * Ethernet network interface
 */
global string interface = "";

/**
 * VPI/VCI
 */
global string vpivci = "";

/**
 * DSL modem IP (used for PPTP)
 */
global string modemip = "10.0.0.138";

/**
 * PPP mode: pppoe or pppoatm
 */
global string pppmode = "pppoe";

string PPPDoptions = "";

/* Provider settings */
/* authorization settings */
global string username = "";
global string password = "";

/* connection settings */
global integer idletime = 300;
global boolean dialondemand = false;
global string dns1 = "";
global string dns2 = "";

/* something already proposed? */
global boolean proposal_valid = false;

/*--------------*/
/* PRIVATE DATA */

/**
 * Hardware information
 * @see ReadHardware
 */
list Hardware = [];

// FIXME: HW
boolean HWDetected = false;

/**
 * Devices information
 * @see ReadDevices
 */
map Devices = $[];

/**
 * Deleted devices
 */
list DeletedDevices = [];

/**
 * Abort function
 * return boolean return true if abort
 */
global block AbortFunction = nil;

/**
 * Data was modified?
 */
boolean modified = false;

/**
 * Which operation is pending?
 */
symbol operation = nil;

/*------------------*/
/* GLOBAL FUNCTIONS */

/**
 * Data was modified?
 * @return true if modified
 */
global define boolean Modified() ``{
    y2debug("modified=%1",modified);
    return modified;
}

/**
 * Read all network settings from the SCR
 * @return true on success
 */
global define boolean Read() ``{

    /* Read dialog caption */
    string caption = _("Initializing DSL Configuration");
    integer steps = 5;

    integer sl = 0; /* 1000; /* TESTING */
    sleep(sl);

    Progress::New(caption, " ", steps, [
        /* Progress stage 1/5 */
        _("Detect DSL devices"),
        /* Progress stage 2/5 */
        _("Read current configuration"),
        /* Progress stage 3/5 */
	_("Read firewall configuration"),
        /* Progress stage 4/5 */
        _("Read providers"),
        /* Progress stage 5/5 */
        _("Read network card configuration"),
    ], [], "");

    if(Abort()) return false;
    /* Progress step 1/5 */
    ProgressNextStage(_("Detecting DSL devices..."));
    if(!Detection::running) Detection::Start();
    // FIXME: no DSL hardware yet ReadHardware("dsl");
    sleep(sl);

    if(Abort()) return false;
    /* Progress step 2/5 */
    ProgressNextStage(_("Reading current configuration..."));
    ReadDevices("dsl");
    sleep(sl);

    if(Abort()) return false;
    /* Progress step 3/5 */
    ProgressNextStage(_("Reading firewall configuration..."));
    Firewall::Read();
    sleep(sl);

    if(Abort()) return false;
    /* Progress step 4/5 */
    ProgressNextStage(_("Reading providers..."));
    Provider::Read("dsl");
    sleep(sl);

    if(Abort()) return false;
    /* Progress step 5/5 */
    ProgressNextStage(_("Reading network card configuration..."));
    if(!proposal_valid) {
	Progress::off();
	Lan::Read();
	Progress::on();
    }
    sleep(sl);

    // FIXME: HW
    list pppoe = SCR::Read(.probe.pppoe);
    // FIXME: testing pppoe = [ $["a" : "b"] ];
    if(pppoe != nil && size(pppoe) > 0) HWDetected = true;

    if(Abort()) return false;
    /* Final progress step */
    ProgressNextStage(_("Finished"));
    sleep(sl);

    if(Abort()) return false;
    modified = false;
    return true;
}

/**
 * Update the SCR according to network settings
 * @return true on success
 */
global define boolean Write() ``{

    if(!modified && !Provider::Modified()) return true;
    y2milestone("Writing configuration");

    /* Write dialog caption */
    string caption = _("Saving DSL Configuration");
    integer steps = 7;

    integer sl = 0; /* 1000; /* TESTING */
    sleep(sl);

    Progress::New(caption, " ", steps, [
        /* Progress stage 1/7 */
        _("Write configuration"),
        /* Progress stage 2/7 */
        _("Write network card configuration"),
        /* Progress stage 3/7 */
        _("Write firewall settings"),
        /* Progress stage 4/7 */
        _("Write providers"),
        /* Progress stage 5/7 */
        _("Set up network services"),
        /* Progress stage 6/7 */
        _("Set up smpppd"),
        /* Progress stage 7/7 */
        _("Run KInternet"),
    ], [], "");

    /* Stop the detection */
    if(Detection::running) Detection::Stop();

    if(Abort()) return false;
    /* Progress step 1/7 */
    ProgressNextStage(_("Writing configuration..."));
    WriteDevices();
    sleep(sl);

    if(Abort()) return false;
    /* Progress step 2/7 */
    ProgressNextStage(_("Writing network card configuration..."));
    Progress::off();
    Lan::Write();
    Progress::on();
    sleep(sl);

    if(Abort()) return false;
    /* Progress step 3/7 */
    ProgressNextStage(_("Writing firewall settings..."));
    Firewall::Write();
    sleep(sl);

    if(Abort()) return false;
    /* Progress step 4/7 */
    ProgressNextStage(_("Writing providers..."));
    Provider::Write();
    sleep(sl);

    if(Abort()) return false;
    /* Progress step 5/7 */
    ProgressNextStage(_("Setting up network services..."));
    EnableNetwork();
    sleep(sl);

    if(Abort()) return false;
    /* Progress step 6/7 */
    ProgressNextStage(_("Setting up smpppd(8)..."));
    EnableSMPPPD();
    sleep(sl);

    if(Abort()) return false;
    /* Progress step 7/7 */
    ProgressNextStage(_("Running KInternet..."));
    RunKInternet();
    sleep(sl);

    if(Abort()) return false;
    /* Final progress step */
    ProgressNextStage(_("Finished"));
    sleep(sl);

    if(Abort()) return false;
    return true;
}

/**
 * Select the given device
 * @param dev device to select ("" for new device, default values)
 * @return true if success
 */
global define boolean Select(string dev) ``{

    y2debug("dev=%1", dev);
    map devmap = $[];

    /* dev=="" -> Add */
    if(dev == "") {
	type = "dsl";
	device = GetFreeDevice(type);
    }
    /* dev!="" -> Edit */
    else {
	string typ = device_type(dev);
	string num = device_num(dev);

	map typemap = lookup(Devices, typ, $[]);
	if(!haskey(typemap, num)) {
	    y2error("Key not found: %1", dev);
	    return false;
	}
	devmap = lookup(typemap, num, $[]);

	type = typ;
	device = num;
	operation = `edit;
    }

    /* general stuff */
    name = devmap["NAME"]:"";
    unique = devmap["UNIQUE"]:"";
    startmode = devmap["STARTMODE"]:"manual";

    /* DSL settings */
    vpivci = devmap["VPIVCI"]:"";
    modemip = devmap["MODEM_IP"]:"10.0.0.138";
    pppmode = devmap["PPPMODE"]:"";
    interface = devmap["DEVICE"]:"";
    PPPDoptions = devmap["PPPD_OPTIONS"]:"";

    /* provider settings */
    Provider::Name = devmap["PROVIDER"]:"";

    /* Capi-ADSL mode */
    if(dev == "" && capiadsl)
	pppmode = "capi-adsl";

    /* ppp mode heuristics */
    if(pppmode == nil || pppmode == "") {
	string language = Language::GetLanguageCountry();
	y2debug("language=%1", language);

	map pppmodes = $[
	    "AT" : "pptp",
	    "CZ" : "pppoe",
	    "DE" : "pppoe",
	    "GB" : "pppoatm",
	    "CA" : "pppoe",
	];
	pppmode = pppmodes[language]:"pppoe";
    }

    return true;
}

/**
 * Add a new device
 * @return true if success
 */
global define boolean Add() ``{
    operation = nil;
    if(Select("") != true) return false;
    operation = `add;
    return true;
}

/**
 * Edit the given device
 * @param name device to edit
 * @return true if success
 */
global define boolean Edit(any name) ``{
    operation = nil;
    if(Select(name) != true) return false;
    operation = `edit;
    return true;
}

/**
 * Delete the given device
 * @param name device to delete
 * @return true if success
 */
global define boolean Delete(string name) ``{
    operation = nil;
    string typ = device_type(name);
    string num = device_num(name);

    map typemap = Devices[typ]:$[];
    if(!haskey(typemap, num)) {
        y2error("Key not found: %1", name);
        return false;
    }

    type = typ;
    device = num;
    operation = `delete;
    return true;
}

/**
 * Commit the pending operation
 * @return true if success
 */
global define boolean Commit() ``{
    y2debug("Commit(%1)",operation);
    if(operation == `add || operation == `edit) {
	map newdev = $[
	    "STARTMODE"	: startmode,
	    "BOOTPROTO"	: "none",
	    "UNIQUE"	: unique,
	    "PPPMODE"		: pppmode,
	    "PROVIDER"		: Provider::Name,
	    // "PROVIDER_NAME"	: Provider::Provider["PROVIDER"]:"",
	    "PPPD_OPTIONS"	: PPPDoptions,
	];
	change(newdev, "DEVICE", interface);
	change(newdev, "VPIVCI", vpivci);
	change(newdev, "MODEM_IP", modemip);

	ChangeDevice(type, device, newdev, operation == `add);
    }
    else if(operation == `delete) {
	DeleteDevice(type, device);
    }
    else {
	y2error("Unknown operation: %1", operation);
	return false;
    }

    /* Capi-ADSL mode */
    if(capiadsl) capiadsl = false;

    modified = true;
    operation = nil;
    return true;
}

/**
 * Propose a configuration
 * @return true if something was proposed
 */
global define boolean Propose() ``{

    y2milestone("Devices=%1", Devices);
    y2milestone("Hardware=%1", Hardware);

    /* Something is already configured -> do nothing */
    if(size(Devices) > 0) {
	y2milestone("Something already configured: don't propose.");
	return false;
    }

    Add();

    return true;
}

/**
 * Import data
 * @param settings settings to be imported
 * @return true on success
 */
global define boolean Import(map settings) ``{
    Devices = eval(settings["devices"]:$[]);
    Provider::Import(settings["providers"]:$[]);
    return true;
}

/**
 * Export data
 * @return dumped settings (later acceptable by Import())
 */
global define map Export() ``{
    return eval($[
	"devices" : Devices,
	"providers" : Provider::Export(),
    ]);
}

/**
 * Create a textual summary and a list of unconfigured devices
 * @param split split configured and unconfigured?
 * @return summary of the current configuration
 */
global define list Summary(boolean split) ``{

    list sum = BuildSummary(split);

    // FIXME: HW
    string hwdet = "";
    if(HWDetected == true)
	/* Summary label */
	hwdet = _("DSL Hardware Detected");

    y2milestone("hwdet=%1", HWDetected);
    sum[0] = sum[0]:"" + hwdet;

    return sum;
}

/**
 * Create an overview table with all configured devices
 * @return table items
 */
global define list Overview() ``{
    return BuildOverview();
}

/**
 * Select the hardware component
 * @param which index of the component
 */
global define void SelectHW(integer which) ``{
    SelectHardware(which);
}

/**
 * Return true if the device is used by any DSL connection
 * @param device device to be tested
 * @return true if yes
 */
global define boolean UsesDevice(string device) ``{
    return size(LocateDevices("DEVICE", device)) > 0;
}

/* EOF */
}
