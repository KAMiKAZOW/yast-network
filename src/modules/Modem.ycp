/**
 * File:
 *   modules/Modem.ycp
 *
 * Package:
 *   Configuration of network
 *
 * Summary:
 *   Data for configuration of modem, input and output functions.
 *
 * Authors:
 *   Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 * Representation of the configuration of modem.
 * Input and output routines.
 *
 */

{

module "Modem";
textdomain "network";

import "Progress";
import "Summary";

include "network/config.ycp";
include "network/hardware.ycp";
include "network/routines.ycp";
include "network/summary.ycp";
include "network/ip.ycp";

/* general stuff */
global string name = "";
global string type = "";
global integer device = -1;
global string unique = "";

global string Init1 = "";
global string Init2 = "";
global string Init3 = "";
global integer BaudRate = 115200;

global boolean PulseDial = true;
global boolean Carrier = true;
global boolean Speaker = true;

global string Device = "";
global string DialPrefix = "";
global string Provider = "";

/* provider settings */
global boolean IsDefault = true;
global boolean DialOnDemand = true;
global string DefaultModem = "";
global string DNS1 = "";
global string DNS2 = "";

global boolean AutoReconnect = true;
global boolean AutoDNS = true;
global string IdleSeconds = "0";

/* other stuff */
global boolean Firewall = false;

/********************************************/
/* Dane, hod prosim ty veci z provideru sem
 * -- asi to bude minimalne toto: */

string Username = "";
string Password = "";
string Phone = "";
/* ... */

/*--------------*/
/* PRIVATE DATA */

/**
 * Config information
 */
map CONFIG = $[];

/**
 * Hardware information
 * [
 *     "name"	: "Digital DecCHIP 1234",
 *     "unique"	: "uihd98723hodi2hgday8",
 * ]
 */
list HARDWARE = [];

/**
 * Deleted devices
 */
list DELETED = [];

/**
 * Abort function
 * return boolean return true if abort
 */
global block AbortFunction = nil;

/**
 * Data was modified?
 */
boolean modified = false;

/**
 * Which operation is pending?
 */
symbol operation = nil;

/*------------------*/
/* GLOBAL FUNCTIONS */

/**
 * Data was modified?
 * @return true if modified
 */
global define boolean Modified() ``{
    y2debug("modified=%1",modified);
    return modified;
};

/**
 * Read all network settings from the SCR
 * @return true on success
 */
global define boolean Read() ``{

    string caption = _("Initializing modem configuration");
    integer steps = 2;

    /* FIXME */
    integer sl = 0; //1000;
    sleep(sl);

    Progress::New(caption, " ", steps, [
        _("Detect devices"),
        _("Read current configuration"),
        //_("Read routing configuration"),
        //_("Read hostname and DNS configuration"),
        //_("Read installation information"),
        //_("Detect current status"),
    ], [], "");

    if(Abort()) return false;
    ProgressNextStage(_("Detecting modems"));
    ReadHardware("ppp");
    sleep(sl);

    if(Abort()) return false;
    ProgressNextStage(_("Reading current configuration"));
    ReadConfig("ppp");
    sleep(sl);

    if(Abort()) return false;
    ProgressNextStage(_("Finished"));
    sleep(sl);

    if(Abort()) return false;
    return true;
}

/**
 * Update the SCR according to network settings
 * @return true on success
 */
global define boolean Write() ``{

    string caption = _("Saving network configuration");
    integer steps = 2;

    /* FIXME */
    integer sl = 0; //1000;
    sleep(sl);

    Progress::New(caption, " ", steps, [
        _("Write configuration"),
        _("Write provider information"),
    ], [], "");

    if(Abort()) return false;
    ProgressNextStage(_("Writing configuration"));
    WriteConfig();
    sleep(sl);

    if(Abort()) return false;
    ProgressNextStage(_("Writing /etc/modules.conf"));
    //WriteProviders();
    sleep(sl);

    if(Abort()) return false;
    return true;
}

/**
 * Select the given hardware item or clean up structures
 * @param which item to be chosen
 */
// FIXME: -> routines/hardware.ycp (?)
global define void SelectHW(integer which) ``{
    map sel = $[];

    if(which != nil)
	sel = select(HARDWARE, which, $[]);

    if(which > size(HARDWARE) || which < 0)
	y2error("Item not found in HARDWARE: %1 (%2)", which, size(HARDWARE));

    name = lookup(sel, "name", "");
    unique = lookup(sel, "unique", "");
    type = lookup(sel, "type", "eth");
    device = select(GetFreeDevices(type,1), 0, -1);

    BaudRate = sel["speed"]:"115200";
    Device = sel["device_name"]:"";
    Init1 = sel["init1"]:"";
    Init2 = sel["init2"]:"";
}

/**
 * @return true if success
 */
global define boolean Add() ``{

    /* general stuff */
    name = "";
    type = "ppp";
    device = select(GetFreeDevices(type,1), 0, -1);
    unique = "";

    /* ... */
    DialPrefix = "";
    Device = "";
    PulseDial = true;
    Speaker = true;
    Carrier = true;

    Init1 = "";
    Init2 = "";
    Init3 = "";
    BaudRate = 115200;

    Provider = "";
    IsDefault = true;
    DialOnDemand = true;
    DefaultModem = "";
    DNS1 = "";
    DNS2 = "";
    Firewall = false;

    AutoReconnect = true;
    AutoDNS = true;
    IdleSeconds = "0";

    operation = `add;
    return true;
}

/**
 * @return true if success
 */
global define boolean Edit(string dev) ``{
    operation = nil;
    string typ = device_type(dev);
    integer num = device_num(dev);
    string n = sformat("%1",num);

    map typemap = lookup(CONFIG, typ, $[]);
    if(!haskey(typemap, n)) {
        y2error("Key not found: %1", dev);
        return false;
    }
    map devmap = lookup(typemap, n, $[]);

    /* general stuff */
    type = typ;
    device = num;
    unique = devmap["UNIQUE"]:"";

    /* ... */
    Init1 = devmap["INIT1"]:"";
    Init2 = devmap["INIT2"]:"";
    Init3 = devmap["INIT3"]:"";
    BaudRate = devmap["SPEED"]:115200;

    PulseDial = devmap["PULSE_DIALING"]:true;
    Carrier = devmap["DETECT_CARRIER"]:true;
    Speaker = devmap["SPEAKER_ON"]:true;

    Device = devmap["MODEM_DEVICE"]:"";
    DialPrefix = devmap["DIAL_PREFIX"]:"";

    Provider = devmap["PROVIDER"]:"";

    /* FIXME provider settings */
    DialOnDemand = false;
    DefaultModem = "";
    IsDefault = true;

    DNS1 = "";
    DNS2 = "";

    AutoReconnect = true;
    AutoDNS = true;
    IdleSeconds = "0";

    /* other stuff */
    Firewall = false;

    operation = `edit;
    return true;
}

/**
 * @return true if success
 */
global define boolean Delete(string dev) ``{
    operation = nil;
    string typ = device_type(dev);
    integer num = device_num(dev);

    map typemap = lookup(CONFIG, typ, $[]);
    if(!haskey(typemap, sformat("%1",num))) {
        y2error("Key not found: %1", dev);
        return false;
    }

    type = typ;
    device = num;
    operation = `delete;
    return true;
}

/**
 * @return true if success
 */
global define boolean Commit() ``{
    y2debug("Commit(%1)",operation);
    if(operation == `add || operation == `edit) {
	map newdev = $[
	    "BOOTMODE"	: "off",
	    "BOOTPROTO"	: "none",
	    "UNIQUE"	: unique,
	    "INIT1"	: Init1,
	    "INIT2"	: Init2,
	    "SPEED"	: BaudRate,
	    "PULSE_DIALING"	: PulseDial ? "yes" : "no",
	    "DETECT_CARRIER"	: Carrier ? "yes" : "no",
	    "SPEAKER_ON"	: Speaker ? "yes" : "no",
	    "MODEM_DEVICE"	: Device,
	    "DIAL_PREFIX"	: DialPrefix,
	    "PROVIDER"		: Provider,
	];

	if(operation == `add)
	    ConfigAdd(type, device, newdev, true);
	else
	    ConfigAdd(type, device, newdev, false);
    }
    else if(operation == `delete) {
	ConfigDelete(type, device);
	change(DELETED, type+device);
    }
    else {
	y2error("Unknown operation: %1", operation);
	return false;
    }

    modified = true;
    operation = nil;
    return true;
}

global define boolean Import(map settings) ``{
    CONFIG = settings;
}

global define map Export() ``{
    return CONFIG;
}

/**
 * Build a textual summary and a list of unconfigured cards
 * @return summary of the current configuration
 */
global define list Summary(boolean split) ``{
    return BuildSummary(split);
}

/**
 */
global define list Overview() ``{
    return BuildOverview("ppp");
}

/**
 */
define boolean Abort() ``{
    if(AbortFunction != nil)
        return eval(AbortFunction) == true;
    return false;
}

/* EOF */
}
