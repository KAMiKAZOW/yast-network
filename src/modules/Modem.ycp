/**
 * File:	modules/Modem.ycp
 * Package:	Network configuration
 * Summary:	Modem data
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 * Representation of the configuration of modem.
 * Input and output routines.
 */

{

module "Modem";
textdomain "network";

import "Firewall";
import "Providers";
import "Progress";
import "Summary";

include "network/complex.ycp";
include "network/config.ycp";
include "network/hardware.ycp";
include "network/ip.ycp";
include "network/routines.ycp";
include "network/runtime.ycp";

/* general stuff */
global string name = "";
global string type = "";
global integer device = -1;
global string unique = "";

/* modem settings */
global string Init1 = "ATZ";
global string Init2 = "AT Q0 V1 E1 S0=0 &C1 &D2 +FCLASS=0";
global string Init3 = "";
global integer BaudRate = 57600;

global boolean PulseDial = true;
global boolean Carrier = true;
global boolean Speaker = true;

global string Device = "/dev/modem";
global string DialPrefix = "";
global string PPPDoptions = "";

/* obsolete stuff */
// global string DefaultModem = "";
// global boolean IsDefault = true;
// global string Provider = "";

/* something already proposed? */
global boolean proposal_valid = false;

/*--------------*/
/* PRIVATE DATA */

/**
 * Hardware information
 * @see ReadHardware
 */
list HARDWARE = [];

/**
 * Config information
 * @see ReadConfig
 */
map CONFIG = $[];

/**
 * Deleted devices
 */
list DELETED = [];

/**
 * Abort function
 * return boolean return true if abort
 */
global block AbortFunction = nil;

/**
 * Data was modified?
 */
boolean modified = false;

/**
 * Which operation is pending?
 */
symbol operation = nil;

/*------------------*/
/* GLOBAL FUNCTIONS */

/**
 * Data was modified?
 * @return true if modified
 */
global define boolean Modified() ``{
    y2debug("modified=%1",modified);
    return modified;
};

/**
 * Read all network settings from the SCR
 * @return true on success
 */
global define boolean Read() ``{

    // title for Modem reading current setup progress screen
    string caption = _("Initializing modem configuration");
    integer steps = 4;

    /* FIXME */
    integer sl = 0; //1000;
    sleep(sl);

    Progress::New(caption, " ", steps, [
        // progress steps for the Modem reading current setup progress screen
        // progress step 1/4
        _("Detect devices"),
        // progress step 2/4
        _("Read current configuration"),
        // progress step 3/4
	    _("Read firewall settings"),
        // progress step 4/4
        _("Read providers"),
    ], [], "");

    if(Abort()) return false;
    // stage 1 in reading current Modem setup
    ProgressNextStage(_("Detecting modems"));
    ReadHardware("modem");
    sleep(sl);

    if(Abort()) return false;
    // stage 2 in reading current Modem setup
    ProgressNextStage(_("Reading current configuration"));
    ReadConfig("ppp");
    sleep(sl);

    if(Abort()) return false;
    // stage 3 in reading current Modem setup
    ProgressNextStage(_("Reading firewall settings"));
    Firewall::Read();
    sleep(sl);

    if(Abort()) return false;
    // stage 4 in reading current Modem setup
    ProgressNextStage(_("Reading providers"));
    Providers::Read("modem");
    sleep(sl);

    if(Abort()) return false;
    // last stage in reading current Modem setup
    ProgressNextStage(_("Finished"));
    sleep(sl);

    if(Abort()) return false;
    modified = false;
    return true;
}

/**
 * Update the SCR according to network settings
 * @return true on success
 */
global define boolean Write() ``{

    if(!modified && !Providers::Modified()) return true;
    y2milestone("Writing configuration");

    // title for Modem writing current setup progress screen
    string caption = _("Saving modem configuration");
    integer steps = 6;

    /* FIXME */
    integer sl = 0; //1000;
    sleep(sl);

    Progress::New(caption, " ", steps, [
        // progress steps for the Modem writing current setup progress screen
        // progress step 1/5
        _("Write configuration"),
        // progress step 2/5
        _("Write firewall settings"),
        // progress step 3/5
        _("Write providers"),
        // progress step 5/6
        _("Set up network services"),
        // progress step 4/5
        _("Set up smpppd"),
        // progress step 6/6
        _("Run KInternet"),
    ], [], "");

    if(Abort()) return false;
    // stage 1 in writing current Modem setup
    ProgressNextStage(_("Writing configuration"));
    WriteConfig();
    UpdateModemSymlink();
    sleep(sl);

    if(Abort()) return false;
    // stage 2 in writing current Modem setup
    ProgressNextStage(_("Writing firewall settings"));
    Firewall::Write();
    sleep(sl);

    if(Abort()) return false;
    // stage 3 in writing current Modem setup
    ProgressNextStage(_("Writing providers"));
    Providers::Write();
    sleep(sl);

    if(Abort()) return false;
    // stage 4 in writing current Modem setup
    ProgressNextStage(_("Setting up network services"));
    EnableNetwork();
    sleep(sl);

    if(Abort()) return false;
    // stage 5 in writing current Modem setup
    ProgressNextStage(_("Setting up smpppd(8)"));
    EnableSMPPPD();
    sleep(sl);

    if(Abort()) return false;
    // last stage in writing current Modem setup
    ProgressNextStage(_("Running KInternet"));
    RunKInternet();
    sleep(sl);

    if(Abort()) return false;
    return true;
}

/**
 * Add a new modem or edit existing (prepare before Commit)
 * @return true if success
 */
global define boolean AddEdit(string dev) ``{
    operation = nil;
    map devmap = $[];

    /* dev=="" -> Add */
    if(dev == "") {
	type = "ppp";
	device = GetFreeDevice(type);
	operation = `add;
    }
    /* dev!="" -> Edit */
    else {
	string typ = device_type(dev);
	integer num = device_num(dev);
	string n = sformat("%1",num);

	map typemap = lookup(CONFIG, typ, $[]);
	if(!haskey(typemap, n)) {
	    y2error("Key not found: %1", dev);
	    return false;
	}
	devmap = lookup(typemap, n, $[]);

	type = typ;
	device = num;
	operation = `edit;
    }

    /* general stuff */
    name = devmap["NAME"]:"";
    unique = devmap["UNIQUE"]:"";

    /* modem settings */
    Init1 = devmap["INIT1"]:"ATZ";
    Init2 = devmap["INIT2"]:"AT Q0 V1 E1 S0=0 &C1 &D2 +FCLASS=0";
    Init3 = devmap["INIT3"]:"";
    BaudRate = tointeger(devmap["SPEED"]:"57600");

    /* PulseDial = devmap["DIALCOMMAND"]:"ATDT" == "ATDP";
     * better heuristics: */
    PulseDial = filterchars(devmap["DIALCOMMAND"]:"ATDT", "P") == "P";
    Speaker = devmap["INIT8"]:"ATM1" == "ATM1";
    Carrier = devmap["INIT9"]:"" == "";

    Device = devmap["MODEM_DEVICE"]:"/dev/modem";
    DialPrefix = devmap["DIALPREFIX"]:"";
    PPPDoptions = devmap["PPPD_OPTIONS"]:"";

    /* provider settings */
    Providers::provShortName = devmap["PROVIDER"]:"";

    //IsDefault = true;
    //DefaultModem = "";
    //Provider = devmap["PROVIDER"]:"";

    return true;
}

/**
 * Delete a modem (prepare before Commit)
 * @return true if success
 */
global define boolean Delete(string dev) ``{
    operation = nil;
    string typ = device_type(dev);
    integer num = device_num(dev);

    map typemap = lookup(CONFIG, typ, $[]);
    if(!haskey(typemap, sformat("%1",num))) {
        y2error("Key not found: %1", dev);
        return false;
    }

    type = typ;
    device = num;
    operation = `delete;
    return true;
}

/**
 * Commit the pending operation
 * @return true if success
 */
global define boolean Commit() ``{
    y2debug("Commit(%1)",operation);
    if(operation == `add || operation == `edit) {
	map newdev = $[
	    "STARTMODE"	: "manual",
	    "BOOTPROTO"	: "none",
	    "UNIQUE"	: unique,
	    "INIT1"	: Init1,
	    "INIT2"	: Init2,
	    "SPEED"	: BaudRate,
	    "INIT8"	: Speaker ? "ATM1" : "ATM0",
	    "INIT9"	: Carrier ? "" : "ATX3",
	    "DIALCOMMAND"	: PulseDial ? "ATDP" : "ATDT",
	    "MODEM_DEVICE"	: Device,
	    "DIALPREFIX"	: DialPrefix,
	    "PROVIDER"		: Providers::provShortName,
	    "PROVIDER_NAME"	: Providers::provLongName,
	    "PPPD_OPTIONS"	: PPPDoptions,
	];

	if(operation == `add)
	    ConfigAddEdit(type, device, newdev, true);
	else
	    ConfigAddEdit(type, device, newdev, false);
    }
    else if(operation == `delete) {
	ConfigDelete(type, device);
	change(DELETED, type+device);
    }
    else {
	y2error("Unknown operation: %1", operation);
	return false;
    }

    modified = true;
    operation = nil;
    return true;
}

/**
 */
global define boolean Import(map settings) ``{
    Providers::Import(lookup(settings, "_PROVIDERS", $[]));
    map blah = remove(settings, "_PROVIDERS");
    CONFIG = eval(blah);
}

/**
 */
global define map Export() ``{
    map PROVIDERS = Providers::Export();
    map blah = add(CONFIG, "_PROVIDERS", PROVIDERS);
    return eval(blah);
}

/**
 * Create a textual summary and a list of unconfigured devices
 * @param split split configured and unconfigured?
 * @return summary of the current configuration
 */
global define list Summary(boolean split) ``{
    return BuildSummary(split);
}

/**
 * Create an overview table with all configured devices
 * @return table items
 */
global define list Overview() ``{
    return BuildOverview();
}

/**
 */
global define void Select(integer which) ``{
    SelectHardware(which);
}

/* EOF */
}
