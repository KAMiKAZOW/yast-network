/**
 * File:	modules/Modem.ycp
 * Package:	Network configuration
 * Summary:	Modem data
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 * Representation of the configuration of modem.
 * Input and output routines.
 */

{

module "Modem";
textdomain "network";

import "Firewall";
import "Provider";
import "Progress";
import "Summary";

include "network/complex.ycp";
include "network/devices.ycp";
include "network/hardware.ycp";
include "network/routines.ycp";
include "network/runtime.ycp";

/* general stuff */
global string name = "";
global string type = "";
global integer device = -1;
global string unique = "";

/**
 * Hotplug type ("" if not hot pluggable)
 */
global string hotplug = "";

/* modem settings */
global string Init1 = "ATZ";
global string Init2 = "AT Q0 V1 E1 S0=0 &C1 &D2 +FCLASS=0";
global string Init3 = "";
global integer BaudRate = 57600;

global boolean PulseDial = true;
global boolean Carrier = true;
global boolean Speaker = true;

global string Device = "/dev/modem";
global string DialPrefix = "";
global string PPPDoptions = "";

/* obsolete stuff */
// global string DefaultModem = "";
// global boolean IsDefault = true;
// global string Provider = "";

/* something already proposed? */
global boolean proposal_valid = false;

/*--------------*/
/* PRIVATE DATA */

/**
 * Hardware information
 * @see ReadHardware
 */
list HARDWARE = [];

/**
 * Devices information
 * @see ReadDevices
 */
map Devices = $[];

/**
 * Deleted devices
 */
list DeletedDevices = [];

/**
 * Abort function
 * return boolean return true if abort
 */
global block AbortFunction = nil;

/**
 * Data was modified?
 */
boolean modified = false;

/**
 * Which operation is pending?
 */
symbol operation = nil;

/*------------------*/
/* GLOBAL FUNCTIONS */

/**
 * Data was modified?
 * @return true if modified
 */
global define boolean Modified() ``{
    y2debug("modified=%1",modified);
    return modified;
};

/**
 * Read all network settings from the SCR
 * @return true on success
 */
global define boolean Read() ``{

    /* Read dialog caption */
    string caption = _("Initializing modem configuration");
    integer steps = 4;

    /* FIXME */
    integer sl = 0; //1000;
    sleep(sl);

    Progress::New(caption, " ", steps, [
        /* Progress step 1/4 */
        _("Detect modems"),
        /* Progress step 2/4 */
        _("Read current configuration"),
        /* Progress step 3/4 */
	_("Read firewall settings"),
        /* Progress step 4/4 */
        _("Read providers"),
    ], [], "");

    if(Abort()) return false;
    /* Progress stage 1/4 */
    ProgressNextStage(_("Detecting modems"));
    ReadHardware("modem");
    sleep(sl);

    if(Abort()) return false;
    /* Progress stage 2/4 */
    ProgressNextStage(_("Reading current configuration"));
    ReadDevices("ppp");
    sleep(sl);

    if(Abort()) return false;
    /* Progress stage 3/4 */
    ProgressNextStage(_("Reading firewall settings"));
    Firewall::Read();
    sleep(sl);

    if(Abort()) return false;
    /* Progress stage 4/4 */
    ProgressNextStage(_("Reading providers"));
    Provider::Read("modem");
    sleep(sl);

    if(Abort()) return false;
    /* Final progress stage */
    ProgressNextStage(_("Finished"));
    sleep(sl);

    if(Abort()) return false;
    modified = false;
    return true;
}

/**
 * Update the SCR according to network settings
 * @return true on success
 */
global define boolean Write() ``{

    if(!modified && !Provider::Modified()) return true;
    y2milestone("Writing configuration");

    /* Write dialog caption */
    string caption = _("Saving modem configuration");
    integer steps = 6;

    /* FIXME */
    integer sl = 0; //1000;
    sleep(sl);

    Progress::New(caption, " ", steps, [
        /* Progress step 1/6 */
        _("Write configuration"),
        /* Progress step 2/6 */
        _("Write firewall settings"),
        /* Progress step 3/6 */
        _("Write providers"),
        /* Progress step 4/6 */
        _("Set up network services"),
        /* Progress step 5/5 */
        _("Set up smpppd"),
        /* Progress step 6/6 */
        _("Run KInternet"),
    ], [], "");

    if(Abort()) return false;
    /* Progress stage 1/6 */
    ProgressNextStage(_("Writing configuration"));
    WriteDevices();
    UpdateModemSymlink();
    sleep(sl);

    if(Abort()) return false;
    /* Progress stage 2/6 */
    ProgressNextStage(_("Writing firewall settings"));
    Firewall::Write();
    sleep(sl);

    if(Abort()) return false;
    /* Progress stage 3/6 */
    ProgressNextStage(_("Writing providers"));
    Provider::Write();
    sleep(sl);

    if(Abort()) return false;
    /* Progress stage 4/6 */
    ProgressNextStage(_("Setting up network services"));
    EnableNetwork();
    sleep(sl);

    if(Abort()) return false;
    /* Progress stage 5/6 */
    ProgressNextStage(_("Setting up smpppd(8)"));
    EnableSMPPPD();
    sleep(sl);

    if(Abort()) return false;
    /* Progress stage 6/6 */
    ProgressNextStage(_("Running KInternet"));
    RunKInternet();
    sleep(sl);

    if(Abort()) return false;
    /* Final progress stage */
    ProgressNextStage(_("Finished"));
    sleep(sl);

    if(Abort()) return false;
    return true;
}

/**
 * Select the given device
 * @param dev device to select ("" for new device, default values)
 * @return true if success
 */
global define boolean Select(string dev) ``{

    y2debug("dev=%1", dev);
    map devmap = $[];

    /* dev=="" -> Add */
    if(dev == "") {
	type = "ppp";
	device = GetFreeDevice(type);
    }
    /* dev!="" -> Edit */
    else {
	string typ = device_type(dev);
	integer num = device_num(dev);
	string n = sformat("%1",num);

	map typemap = lookup(Devices, typ, $[]);
	if(!haskey(typemap, n)) {
	    y2error("Key not found: %1", dev);
	    return false;
	}
	devmap = lookup(typemap, n, $[]);

	type = typ;
	device = num;
	operation = `edit;
    }

    /* general stuff */
    name = devmap["NAME"]:"";
    unique = devmap["UNIQUE"]:"";

    /* modem settings */
    Init1 = devmap["INIT1"]:"ATZ";
    Init2 = devmap["INIT2"]:"AT Q0 V1 E1 S0=0 &C1 &D2 +FCLASS=0";
    Init3 = devmap["INIT3"]:"";
    BaudRate = tointeger(devmap["SPEED"]:"57600");

    /* PulseDial = devmap["DIALCOMMAND"]:"ATDT" == "ATDP";
     * better heuristics: */
    PulseDial = filterchars(devmap["DIALCOMMAND"]:"ATDT", "P") == "P";
    Speaker = devmap["INIT8"]:"ATM1" == "ATM1";
    Carrier = devmap["INIT9"]:"" == "";

    Device = devmap["MODEM_DEVICE"]:"/dev/modem";
    DialPrefix = devmap["DIALPREFIX"]:"";
    PPPDoptions = devmap["PPPD_OPTIONS"]:"";

    /* provider settings */
    Provider::Name = devmap["PROVIDER"]:"";

    return true;
}

/**
 * Add a new device
 * @return true if success
 */
global define boolean Add() ``{
    operation = nil;
    if(Select("") != true) return false;
    operation = `add;
    return true;
}

/**
 * Edit the given device
 * @param name device to edit
 * @return true if success
 */
global define boolean Edit(any name) ``{
    operation = nil;
    if(Select(name) != true) return false;
    operation = `edit;
    return true;
}


/**
 * Delete the given device
 * @param name device to delete
 * @return true if success
 */
global define boolean Delete(string name) ``{
    operation = nil;
    string typ = device_type(name);
    integer num = device_num(name);

    map typemap = Devices[typ]:$[];
    if(!haskey(typemap, sformat("%1",num))) {
        y2error("Key not found: %1", name);
        return false;
    }

    type = typ;
    device = num;
    operation = `delete;
    return true;
}

/**
 * Commit the pending operation
 * @return true if success
 */
global define boolean Commit() ``{
    y2debug("Commit(%1)",operation);
    if(operation == `add || operation == `edit) {
	map newdev = $[
	    "STARTMODE"	: "manual",
	    "BOOTPROTO"	: "none",
	    "UNIQUE"	: unique,
	    "INIT1"	: Init1,
	    "INIT2"	: Init2,
	    "SPEED"	: BaudRate,
	    "INIT8"	: Speaker ? "ATM1" : "ATM0",
	    "INIT9"	: Carrier ? "" : "ATX3",
	    "DIALCOMMAND"	: PulseDial ? "ATDP" : "ATDT",
	    "MODEM_DEVICE"	: Device,
	    "DIALPREFIX"	: DialPrefix,
	    "PROVIDER"		: Provider::Name,
	    // "PROVIDER_NAME"	: Provider::Provider["PROVIDER"]:"",
	    "PPPD_OPTIONS"	: PPPDoptions,
	];

	ChangeDevice(type, device, newdev, operation == `add);
    }
    else if(operation == `delete) {
	DeleteDevice(type, device);
    }
    else {
	y2error("Unknown operation: %1", operation);
	return false;
    }

    modified = true;
    operation = nil;
    return true;
}

/**
 * Import data
 * @param settings settings to be imported
 * @return true on success
 */
global define boolean Import(map settings) ``{
    Devices = eval(settings["devices"]:$[]);
    Provider::Import(settings["providers"]:$[]);
    return true;
}

/**
 * Export data
 * @return dumped settings (later acceptable by Import())
 */
global define map Export() ``{
    return eval($[
	"devices" : Devices,
	"providers" : Provider::Export(),
    ]);
}

/**
 * Create a textual summary and a list of unconfigured devices
 * @param split split configured and unconfigured?
 * @return summary of the current configuration
 */
global define list Summary(boolean split) ``{
    return BuildSummary(split);
}

/**
 * Create an overview table with all configured devices
 * @return table items
 */
global define list Overview() ``{
    return BuildOverview();
}

/**
 * Select the hardware component
 * @param which index of the component
 */
global define void SelectHW(integer which) ``{
    SelectHardware(which);
}

/* EOF */
}
