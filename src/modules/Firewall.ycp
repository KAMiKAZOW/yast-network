/**
 * File:	modules/Firewall.ycp
 * Package:	Network configuration
 * Summary:	Firewall data
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 * Uses SuSEfirewall2.rpm.
 * Rewritten to operate on FW_DEV_EXT (#33649).
 * See also the standalone module yast2-firewall.rpm, SuSEFirewall2.ycp
 * to which we eventually should migrate.
 */

{

module "Firewall";
textdomain "network";

import "Service";

include "network/routines.ycp";
include "network/runtime.ycp";

/**
 * Firewalled devices
 */
list<string> devices = [];
list<string> devices_init = [];

/**
 * Read firewall settings
 * @return true if success
 */
global define boolean Read() {

    /* read firewalled devices */
    string devs = (string) SCR::Read(.sysconfig.SuSEfirewall2.FW_DEV_EXT);
    y2debug("devs=%1", devs);
    if(devs == nil) return false;
    if(devs == "") return true;

    devices = splitstring(devs, " ");
    y2debug("devices=%1", devices);
    devices_init = devices;

    return true;
}

/**
 * Write firewall settings and apply changes
 * @return true if success
 */
global define boolean Write() {

    /* Check if there is anything to do */
    if(devices_init == devices) {
	y2debug("Devices not modified");
	return true;
    }

    /* Update sysconfig */
    string devs = "";
    y2debug("devices=%1", devices);
    devices = filter(string v, devices, { return (v != "no"); });
    devices = filter(string v, devices, { return (v != "nothing"); });
    y2debug("devices=%1", devices);
    if(size(devices) > 0) devs = mergestring(devices, " ");
    SCR::Write(.sysconfig.SuSEfirewall2.FW_DEV_EXT, devs);
    SCR::Write(.sysconfig.SuSEfirewall2, nil);

    /* Setup init scripts */
    if(size(devices) > 0) {
	EnableNetwork();
	Service::Enable("SuSEfirewall2_init");
	Service::Enable("SuSEfirewall2_setup");
	Service::Enable("SuSEfirewall2_final");
	SCR::Execute(.target.bash, "/sbin/SuSEfirewall2 start");
    }
    else {
	Service::Disable("SuSEfirewall2_final");
	Service::Disable("SuSEfirewall2_setup");
	Service::Disable("SuSEfirewall2_init");
	SCR::Execute(.target.bash, "/sbin/SuSEfirewall2 stop");
    }

    return true;
}

/**
 * Convert real device to the firewall device specification
 * The firewall was one of the first to feel the pain of changing
 * interface names so it uses "modem" for pppX.
 * @param device real device
 * @return firewall device
 */
define string device2fw(string device) {
    if(device == nil || device == "") {
	y2error("wrong device identification: %1", device);
	return nil;
    }
    if(device_type(device) == "ppp") return "modem";
    else return device;
}

/**
 * Update firewall information about device
 * @param device given device
 * @param fw true for firewalled device
 * @return true if sucess
 */
global define boolean Change(string device, boolean fw) {
    y2debug("Change(%1,%2)", device, fw);
    string dev = device2fw(device);
    if(dev == nil || dev == "" || fw == nil) return false;

    if(fw) {
	if(contains(devices, dev)) {
	    y2error("device already present: %1", device);
	    return false;
	}
	devices = add(devices, dev);
    }
    else {
	if(!contains(devices, dev)) {
	    y2error("device not found: %1", device);
	    return false;
	}
	devices = filter(string l, devices, { return (l != dev); });
    }
    y2debug("devices=%1", devices);
    return true;
}

/**
 * Check if the device is firewalled
 * @param device given device
 * @return true if firewalled
 */
global define boolean Query(string device) {
    string dev = device2fw(device);
    if(dev == nil || dev == "") return false;
    return contains(devices, dev);
}

/* EOF */
}
