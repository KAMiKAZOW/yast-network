/**
 * File:	modules/Firewall.ycp
 * Package:	Network configuration
 * Summary:	Firewall data
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

module "Firewall";
textdomain "network";

import "Runlevel";

/**
 * Firewalled devices
 */
list devices = [];
list devices_init = [];

/* NI: required wrt functions in routines.ycp */
block<boolean> AbortFunction = nil;
define boolean Modified() ``{ return true; }

include "network/routines.ycp";
include "network/runtime.ycp";

/**
 * Read firewall settings
 * @return true if success
 */
global define boolean Read() ``{

    /* read firewalled devices */
    string devs = "";
    if(SCR::Read(.target.size, "/etc/sysconfig/personal-firewall") > 0)
	devs = (string) SCR::Read(.sysconfig.personal-firewall.REJECT_ALL_INCOMING_CONNECTIONS);
    y2debug("devs=%1", devs);
    if(devs == nil) return false;
    if(devs == "") return true;

    devices = splitstring(devs, " ");
    y2debug("devices=%1", devices);
    devices_init = (list) eval(devices);

    return true;
}

/**
 * Write firewall settings and apply changes
 * @return true if success
 */
global define boolean Write() ``{

    /* Check if there is anything to do */
    if(devices_init == devices) {
	y2debug("Devices not modified");
	return true;
    }

    /* Update sysconfig */
    string devs = "";
    y2debug("devices=%1", devices);
    devices = filter(`v, devices, ``(v != "no"));
    devices = filter(`v, devices, ``(v != "nothing"));
    y2debug("devices=%1", devices);
    if(size(devices) > 0) devs = mergestring(devices, " ");
    SCR::Write(.sysconfig.personal-firewall.REJECT_ALL_INCOMING_CONNECTIONS, devs);
    SCR::Write(.sysconfig.personal-firewall, nil);

    /* Setup init scripts */
    if(size(devices) > 0) {
	EnableNetwork();
	EnableService("SuSEfirewall2_init");
	EnableService("SuSEfirewall2_setup");
	EnableService("SuSEfirewall2_final");
	SCR::Execute(.target.bash, "/sbin/SuSEfirewall2 start");
    }
    else {
	DisableService("SuSEfirewall2_final");
	DisableService("SuSEfirewall2_setup");
	DisableService("SuSEfirewall2_init");
	SCR::Execute(.target.bash, "/sbin/SuSEfirewall2 stop");
    }

    return true;
}

/**
 * Get all the firewall configuration from a map.
 * When called by *_auto (preparing autoinstallation data)
 * the list may be empty.
 * @param settings autoinstallation settings
 * @return true if success
 */
global define boolean Import(list settings) ``{
    if(size(settings) == 0)
	return true;

    devices = (list) eval(settings);
    return true;
}

/**
 * Dump the firewall settings to a list, for autoinstallation use.
 * @return autoinstallation settings
 */
global define list Export() ``{
    return (list) eval(devices);
}

/**
 * Convert real device to the firewall device specification
 * @param device real device
 * @return firewall device
 */
define string device2fw(string device) ``{
    if(device == nil || device == "") {
	y2error("wrong device identification: %1", device);
	return nil;
    }
    if(device_type(device) == "ppp") return "modem";
    else return device;
}

/**
 * Update firewall information about device
 * @param device given device
 * @param fw true for firewalled device
 * @return true if sucess
 */
global define boolean Change(string device, boolean fw) ``{
    y2debug("Change(%1,%2)", device, fw);
    string dev = device2fw(device);
    if(dev == nil || dev == "" || fw == nil) return false;

    if(fw) {
	if(contains(devices, dev)) {
	    y2error("device already present: %1", device);
	    return false;
	}
	devices = add(devices, dev);
    }
    else {
	if(!contains(devices, dev)) {
	    y2error("device not found: %1", device);
	    return false;
	}
	devices = filter(`l, devices, ``(l!=dev));
    }
    y2debug("devices=%1", devices);
    return true;
}

/**
 * Check if the device is firewalled
 * @param device given device
 * @return true if firewalled
 */
global define boolean Query(string device) ``{
    string dev = device2fw(device);
    if(dev == nil || dev == "") return false;
    return contains(devices, dev);
}

/* EOF */
}
