/**
 * File:	modules/DNS.ycp
 * Package:	Configuration of network
 * Summary:	Hostname and DNS settings
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

module "DNS";
textdomain "network";
include "network/routines.ycp";

global string hostname = ""; //blah";
global string domain = ""; //blum.cz";
global list nameservers = []; //"ns1", "ns2"];
global list searchlist = []; //"s1", "s2"];
global boolean dhcp_hostname = false;
global boolean dhcp_resolv = false;
global string resolv_conf_process = "";
global boolean resolv_conf_force = false;

/**
 * Data was modified?
 */
global boolean modified = false;

/**
 * "routes" file location
 */
string resolv_conf = "/etc/resolv.conf";

/**
 * Get all the DNS configuration from a map.
 * When called by dns_auto (preparing autoinstallation data)
 * the map may be empty.
 * @param settings autoinstallation settings
 * @return true if success
 */
global define boolean Import(map settings) ``{
    if(size(settings) == 0)
	return false;

    hostname = lookup(settings, "hostname", "");
    domain = lookup(settings, "domain", "");
    nameservers = lookup(settings, "nameservers", []);
    searchlist = lookup(settings, "searchlist", []);
    dhcp_hostname = lookup(settings, "dhcp_hostname", false);
    dhcp_resolv = lookup(settings, "dhcp_resolv", false);
    modified = true;
    return true;
}

/**
 * Dump the DNS settings to a map, for autoinstallation use.
 * @return autoinstallation settings
 */
global define map Export() ``{
    return $[
	"hostname"	: hostname,
	"domain"	: domain,
	"nameservers"	: nameservers,
	"searchlist"	: searchlist,
	"dhcp_hostname"	: dhcp_hostname,
	"dhcp_resolv"	: dhcp_resolv,
    ];
}

/**
 * Reads current DNS and hostname settings
 * @return true if success
 */
global define boolean Read() ``{

    /* set hostname via dhcp? */
    string dhcp = "";
    dhcp = SCR::Read(.sysconfig.dhcp.DHCLIENT_SET_HOSTNAME);
    if(dhcp == nil) dhcp = "";
    y2debug("dhcp=%1",dhcp);
    dhcp_hostname = (tolower(dhcp) == "yes") ? true : false;

    /* set hostname via dhcp? */
    dhcp = "";
    dhcp = SCR::Read(.sysconfig.dhcp.DHCLIENT_MODIFY_RESOLV_CONF);
    if(dhcp == nil) dhcp = "";
    y2debug("dhcp=%1",dhcp);
    dhcp_resolv = (tolower(dhcp) == "yes") ? true : false;

    /* install.inf from linuxrc */
    map install_inf = $[];
    if(SCR::Read(.target.size, "/etc/install.inf") != -1)
	install_inf = SCR(`Read(.etc.install_inf));

    /* check for externally modified resolv.conf */
    if(SCR::Execute(.target.bash, "/sbin/modify_resolvconf check -q") != 0)
	resolv_conf_process = SCR::Read(.etc.resolv_conf.process);

    /* only read /etc/resolv.conf if present */
    if(SCR::Read(.target.size, resolv_conf) > 0) {

	/* name servers */
	list resolvlist = SCR::Read(.etc.resolv_conf.nameserver);
	if(resolvlist == nil) {
	    if(size(lookup(install_inf, "nameserver", "")) > 0)
		change(nameserver, (lookup(install_inf, "nameserver", "")));
	}
	else
	    nameservers = resolvlist;

	/* search list */
	resolvlist = SCR::Read(.etc.resolv_conf.search);
	if(resolvlist != nil) searchlist = resolvlist;
	if(size(searchlist) < 1) {
	    string dom = SCR::Read(.etc.resolv_conf.domain);
	    if(dom != nil && dom != "") searchlist = [ dom ];
	}
    }

    /* host name and domain */
    string fqhostname = "";
    if(SCR::Read(.target.size, "/etc/HOSTNAME") > 0) {
	fqhostname = SCR::Read(.target.string, "/etc/HOSTNAME");
	fqhostname = substring(fqhostname, 0, findfirstof(fqhostname, "\n"));
    }

    if(fqhostname != "") {
	integer dot = findfirstof(fqhostname, ".");
	if(dot != nil) {
	    hostname = substring(fqhostname, 0, dot);
	    domain = substring(fqhostname, dot+1);
	}
	else
	    hostname = fqhostname;
    }
    else {
	/* default hostname and domain (if not in /etc/install.inf) */
	hostname = lookup(install_inf, "machinename", "linux");
	domain = lookup(install_inf, "domain", "local");
    }

    return true;
}

/**
 * Write new DNS and hostname settings
 * @return true if success
 */
global define boolean Write() ``{

    if(!modified) return true;
    y2milestone("Writing configuration");

    /* build FQ hostname */
    string fqhostname = hostname;
    if(domain != "") fqhostname = fqhostname + "." + domain;

    /* set hostname via dhcp? */
    SCR::Write(.sysconfig.dhcp.DHCLIENT_SET_HOSTNAME, dhcp_hostname?"yes":"no");
    SCR::Write(.sysconfig.dhcp.DHCLIENT_MODIFY_RESOLV_CONF, dhcp_resolv?"yes":"no");
    SCR::Write(.sysconfig.dhcp, nil);

    //if(!dhcp_hostname) {
	/* remember the X authorization key */
	string xauth_key = SCR::Read(.xauth.key);

	/* change the hostname */
	SCR::Execute(.target.bash, "/bin/hostname " + hostname);

	/* write hostname */
	SCR::Write(.target.string, "/etc/HOSTNAME", fqhostname + "\n");
	SCR::Execute(.target.bash, "/sbin/SuSEconfig --quick --nonewpackage --module hostname");

	/* update X authorization */
	SCR::Write(.xauth.key, xauth_key);
    //}

    if(SCR::Read(.target.size, resolv_conf) < 0)
	SCR::Write(.target.string, resolv_conf, "");

    /* either no process or force update */
    if(resolv_conf_process == "" || resolv_conf_force == true) {

	/* update /etc/resolv.conf */
	SCR::Write(.etc.resolv_conf.search, searchlist);
	SCR::Write(.etc.resolv_conf.nameserver, nameservers);
	/* update domain in /etc/resolv.conf */
	if(size(searchlist) > 0)
	    SCR::Write(.etc.resolv_conf.domain, "");
	else
	    SCR::Write(.etc.resolv_conf.domain, domain);
	SCR::Write(.etc.resolv_conf, nil);

	/* write only an original header */
	if(resolv_conf_force == true)
	    SCR::Write(.etc.resolv_conf.write_header, true);

    }

    return true;
}

/* EOF */
}
