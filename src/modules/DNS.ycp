/**
 * File:	modules/DNS.ycp
 * Package:	Network configuration
 * Summary:	Hostname and DNS data
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

module "DNS";
textdomain "network";

include "network/dns.ycp";
include "network/routines.ycp";
include "network/runtime.ycp";

global string hostname = "";
global string domain = "";
global list nameservers = [];
global list searchlist = [];
global boolean dhcp_hostname = false;
global boolean dhcp_resolv = false;
global string resolv_conf_process = "";
global boolean resolv_conf_force = false;

/**
 * Data was modified?
 */
global boolean modified = false;

/**
 * "routes" file location
 */
string resolv_conf = "/etc/resolv.conf";

/**
 * Reads current DNS and hostname settings
 * @return true if success
 */
global define boolean Read() ``{

    /* set hostname via dhcp? */
    string dhcp = "";
    dhcp = SCR::Read(.sysconfig.dhcp.DHCLIENT_SET_HOSTNAME);
    if(dhcp == nil) dhcp = "";
    y2debug("dhcp=%1",dhcp);
    dhcp_hostname = (tolower(dhcp) == "yes") ? true : false;

    /* set hostname via dhcp? */
    dhcp = "";
    dhcp = SCR::Read(.sysconfig.dhcp.DHCLIENT_MODIFY_RESOLV_CONF);
    if(dhcp == nil) dhcp = "";
    y2debug("dhcp=%1",dhcp);
    dhcp_resolv = (tolower(dhcp) == "yes") ? true : false;

    /* install.inf from linuxrc */
    map install_inf = $[];
    if(SCR::Read(.target.size, "/etc/install.inf") > 0)
	install_inf = SCR::Read(.etc.install_inf);

    /* check for externally modified resolv.conf */
    if(SCR::Execute(.target.bash, "/sbin/modify_resolvconf check -q < /dev/null") != 0)
	resolv_conf_process = SCR::Read(.etc.resolv_conf.process);

    /* only read /etc/resolv.conf if present */
    if(SCR::Read(.target.size, resolv_conf) > 0) {

	/* name servers */
	list resolvlist = SCR::Read(.etc.resolv_conf.nameserver);
	if(resolvlist == nil) {
	    if(size(install_inf["nameserver"]:"") > 0)
		change(nameserver, install_inf["nameserver"]:"");
	}
	else
	    nameservers = resolvlist;

	/* search list */
	resolvlist = SCR::Read(.etc.resolv_conf.search);
	if(resolvlist != nil) searchlist = resolvlist;
	if(size(searchlist) < 1) {
	    string dom = SCR::Read(.etc.resolv_conf.domain);
	    if(dom != nil && dom != "") searchlist = [ dom ];
	}
    }

    /* host name and domain */
    string fqhostname = "";
    if(SCR::Read(.target.size, "/etc/HOSTNAME") > 0) {
	fqhostname = SCR::Read(.target.string, "/etc/HOSTNAME");
	fqhostname = substring(fqhostname, 0, findfirstof(fqhostname, "\n"));
    }

    if(fqhostname != "") {
	list split = split_fqhostname(fqhostname);
	hostname = split[0]:"";
	domain = split[1]:"";
    }
    else {
	/* default hostname and domain (if not in /etc/install.inf) */
	hostname = install_inf["machinename"]:"linux";
	domain = install_inf["domain"]:"local";
    }

    return true;
}

/**
 * Write new DNS and hostname settings
 * @return true if success
 */
global define boolean Write() ``{

    if(!modified) return true;
    y2milestone("Writing configuration");

    /* build FQ hostname */
    string fqhostname = hostname;
    if(domain != "") fqhostname = fqhostname + "." + domain;

    /* set hostname via dhcp? */
    SCR::Write(.sysconfig.dhcp.DHCLIENT_SET_HOSTNAME, dhcp_hostname?"yes":"no");
    SCR::Write(.sysconfig.dhcp.DHCLIENT_MODIFY_RESOLV_CONF, dhcp_resolv?"yes":"no");
    SCR::Write(.sysconfig.dhcp, nil);

    /* Allow to set hostname even if it's modified by DHCP (#bug)
    if(!dhcp_hostname) { */

	/* remember the X authorization key */
	string xauth_key = SCR::Read(.xauth.key);

	/* change the hostname */
	SCR::Execute(.target.bash, "/bin/hostname " + hostname);

	/* write hostname */
	SCR::Write(.target.string, "/etc/HOSTNAME", fqhostname + "\n");
	RunSuSEconfig();

	/* update X authorization */
	SCR::Write(.xauth.key, xauth_key);

    if(SCR::Read(.target.size, resolv_conf) < 0)
	SCR::Write(.target.string, resolv_conf, "");

    /* either no process or force update */
    if(resolv_conf_process == "" || resolv_conf_force == true) {

	/* update /etc/resolv.conf */
	SCR::Write(.etc.resolv_conf.search, searchlist);
	SCR::Write(.etc.resolv_conf.nameserver, nameservers);
	/* update domain in /etc/resolv.conf */
	if(size(searchlist) > 0)
	    SCR::Write(.etc.resolv_conf.domain, "");
	else
	    SCR::Write(.etc.resolv_conf.domain, domain);

	/* write only an original header */
	if(resolv_conf_force == true)
	    SCR::Write(.etc.resolv_conf.write_header, true);

	/* flush the cache */
	SCR::Write(.etc.resolv_conf, nil);
	SCR::Execute(.target.bash, "/bin/chmod a+r /etc/resolv.conf");

    }

    modified = false;
    return true;
}

/**
 * Get all the DNS configuration from a map.
 * When called by dns_auto (preparing autoinstallation data)
 * the map may be empty.
 * @param settings autoinstallation settings
 * @return true if success
 */
global define boolean Import(map settings) ``{
    if(size(settings) == 0)
	return false;

    hostname = settings["hostname"]:"";
    domain = settings["domain"]:"";
    nameservers = eval(settings["nameservers"]:[]);
    searchlist = eval(settings["searchlist"]:[]);
    dhcp_hostname = settings["dhcp_hostname"]:false;
    dhcp_resolv = settings["dhcp_resolv"]:false;
    modified = true;
    return true;
}

/**
 * Dump the DNS settings to a map, for autoinstallation use.
 * @return autoinstallation settings
 */
global define map Export() ``{
    return $[
	"hostname"	: hostname,
	"domain"	: domain,
	"nameservers"	: eval(nameservers),
	"searchlist"	: eval(searchlist),
	"dhcp_hostname"	: dhcp_hostname,
	"dhcp_resolv"	: dhcp_resolv,
    ];
}

/**
 * Create DNS text summary
 * @return summary text
 */
global define string Summary() ``{

    string summary = "<p>";

    if(dhcp_hostname == true)
	/* Summary text */
	summary = summary + _("Host Name: set by DHCP");
    else
	/* Summary text */
	summary = summary + sformat(_("Host Name: %1"), hostname) +
	    (domain != ""? "." + domain : "");

    summary = summary + "<p>";

    if(dhcp_resolv == true) {
	/* Summary text */
	summary = summary + _("Name Servers: set by DHCP") + "<br>";
	/* Summary text */
	summary = summary + _("Search List: set by DHCP");
    }
    else {
	/* Summary text */
	summary = summary + sformat(_("Name Servers: %1"), nameservers) + "<p>";
	/* Summary text */
	summary = summary + sformat(_("Search List: %1"), searchlist);
    }

    return summary;
}

/* EOF */
}
