/**
 * File:	modules/Detection.ycp
 * Package:	Network configuration
 * Summary:	Detection routines
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 * <h3>Detection process:</h3>
 * <h4>Initial stage:</h4><ul>
 *   <li>hardware detection
 *   <li>load kernel modules (if not already active *1)
 *   <li>set up interface (if not already set up *2)
 *   <li>run detection
 * </ul>
 * <h4>Final stage:</h4><ul>
 *   <li>read detection data
 *   <li>shut down interfaces (if set up before, see *2)
 *   <li>remove kernel modules (if loaded before, see *1)
 * </ul>
 *
 * <p>
 * <h4>Used software:</h4><ul>
 *   <li>netprobe(8)
 *   <li>dhcpcd(8)
 * </ul>
 *
 *
 */

{

module "Detection";

textdomain "network";

import "Directory";
include "network/hardware.ycp";

global map result = $[];

string device = "eth0";
string tmpdir = Directory::tmpdir;

string detection_module = "";
boolean detection_interface = false;

global define boolean StartEthInterface() ``{

    y2milestone("Network detection prepare");

    list Hardware = [];
    ReadHardware("netcard");

    y2debug("Hardware=%1", Hardware);
    if(size(Hardware) < 1) return false;

    /* Look for eth cards */
    map card = $[];
    maplist(map h, Hardware, ``{
	if(h["type"]:"" == "eth") {
	    if(card == $[]) card = h;
	    else card = nil;
	}
    });

    y2debug("card=%1", card);
    card = Hardware[0]:$[];
    y2debug("card=%1", card);
    if(card == nil || card == $[]) return false;

    /* Load the module */
    detection_module = card["module"]:"";
    y2debug("detection_module=%1", detection_module);
    if(detection_module != "") {
	if(SCR::Execute(.target.bash, sformat("grep ^%1 /proc/modules", detection_module)) != 0) {
	    y2milestone("Loading module %1 ...", detection_module);
	    SCR::Execute(.target.bash, sformat("/sbin/modprobe %1 2>&1", detection_module));
	}
	else
	    detection_module = "";
    }
    y2debug("detection_module=%1", detection_module);

    /* Setup the interface */
    detection_interface=false;
    if(SCR::Execute(.target.bash, sformat("ifconfig %1 2>&1 | grep 'inet addr'", device)) != 0) {
	y2milestone("Setting up interface %1 ...", device);
	SCR::Execute(.target.bash, sformat("/sbin/ifconfig %1 up 2>&1", device));
	detection_interface=true;
    }
    y2debug("detection_interface=%1", detection_interface);

    y2milestone("Network detection prepare (end)");
    return true;
}

global define boolean StopEthInterface() ``{

    y2milestone("Network detection finish");

    if(detection_interface) {
	y2milestone("Shut down interface %1 ...", device);
	SCR::Execute(.target.bash, sformat("/sbin/ifconfig %1 down 2>&1", device));
    }
    detection_interface = false;

    if(detection_module != "") {
	y2milestone("Removing module %1 ...", detection_module);
	SCR::Execute(.target.bash, sformat("/sbin/rmmod %1 2>&1", detection_module));
    }
    detection_module = "";

    y2milestone("Network detection finish (end)");
    return true;
}

/**
 * Start detection
 * @return true if success
 */
global define boolean StartDetection() ``{

    /* Start DHCP detection */
    SCR::Execute(.target.bash, sformat("rm -f %1/dhcpcd-*", tmpdir));
    SCR::Execute(.target.bash, sformat("dhcpcd -Td -t 10 -NYRG -L %1 %2", tmpdir, device));

    return true;
}

/**
 * Finish detection
 * @return true if success
 */
global define boolean FinishDetection() ``{

    /* Read DHCP data */
    string info = sformat("%1/dhcpcd-%2.info", tmpdir, device);
    info = "/var/lib/dhcpcd/dhcpcd-eth0.info";

    path detpath = .detection.dhcp;
    string tmpfile = tmpdir + "/detection_dhcp.scr";
    string scrfile = sformat("%1\n\n`ag_ini(SysConfigFile(\"%2\"))\n", detpath, info);
    SCR::Write(.target.string, tmpfile, scrfile);
    SCR::RegisterAgent(detpath, tmpfile);

    result = $[];
    list keys = SCR::Dir(detpath);
    y2debug("keys=%1", keys);
    maplist(string k, keys, ``{
	string v = SCR::Read(add(detpath, k));
	y2debug("%1=%2", k, v);
	/* FIXME: duplicate keys (make list? add with suffix1, etc? ...? */
	change(result, k, v);
    });
    SCR::UnregisterAgent(.detection.dhcp);

    /* Finish DHCP detection */
    SCR::Execute(.target.bash, sformat("kill $(cat %1/dhcpcd-%2.pid)", tmpdir, device));

    return true;
}

/* EOF */
}
