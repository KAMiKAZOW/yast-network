/**
 * File:	modules/Detection.ycp
 * Package:	Network configuration
 * Summary:	Network detection
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 * <h3>Detection process:</h3>
 * <h4>Initial stage:</h4><ul>
 *   <li>hardware detection
 *   <li>load kernel modules (if not already active *1)
 *   <li>set up interface (if not already set up *2)
 *   <li>run detection
 * </ul>
 * <h4>Final stage:</h4><ul>
 *   <li>read detection data
 *   <li>shut down interfaces (if set up before, see *2)
 *   <li>remove kernel modules (if loaded before, see *1)
 * </ul>
 *
 * <p>
 * <h4>Used software:</h4><ul>
 *   <li>dhcpcd(8)
 *   <li>netprobe(8) (currently not)
 * </ul>
 *
 * <p>
 * <h4>Usage:</h4><ul>
 *   <li>Detection::Start() somewhere at the start of installation
 * </ul><p>Later at the module:<ul>
 *   <li>if(Detection::running) Detection::Stop();
 *   <li>string gw = Detection::result["GATEWAY"]:"";
 * </ul>
 *
 */

{

module "Detection";

textdomain "network";

import "Directory";
include "network/hardware.ycp";

/**
 * Detection result
 */
global map result = $[];

/**
 * True, if detection is running
 */
global boolean running = false;

string device = "eth0";
string tmpdir = Directory::tmpdir;

string detection_module = "";
boolean detection_interface = false;

/**
 * Set up the first eth interface, if not already running
 * @return true if success
 */
define boolean StartEthInterface() ``{

    y2milestone("Network detection prepare");

    list<map> Hardware = [];
    ReadHardware("netcard");

    y2debug("Hardware=%1", Hardware);
    if(size(Hardware) < 1) return false;

    /* Look for eth cards */
    list<map> ethernet_cards = filter(map h, Hardware, ``(h["type"]:"" == "eth"));
    map card = ethernet_cards[0]:nil;
    y2debug("card=%1", card);
    if(card == nil || card == $[]) return false;

    /* Load the module */
    detection_module = card["module"]:"";
    y2debug("detection_module=%1", detection_module);
    if(detection_module != "") {
	if(SCR::Execute(.target.bash, sformat("grep ^%1 /proc/modules", detection_module)) != 0) {
	    y2milestone("Loading module %1 ...", detection_module);
	    if(SCR::Execute(.target.bash, sformat("/sbin/modprobe %1 2>&1", detection_module)) != 0)
		detection_module = "";
	}
	else
	    detection_module = "";
    }
    y2debug("detection_module=%1", detection_module);

    /* Setup the interface */
    detection_interface=false;
    if(SCR::Execute(.target.bash, sformat("/sbin/ifconfig %1 2>&1 | grep 'inet6\? addr'", device), $["LC_MESSAGES":"C"]) != 0) {
	y2milestone("Setting up interface %1 ...", device);
	SCR::Execute(.target.bash, sformat("/sbin/ifconfig %1 up 2>&1", device));
	detection_interface=true;
    }
    y2debug("detection_interface=%1", detection_interface);

    y2milestone("Network detection prepare (end)");
    return true;
}

/**
 * Shut down the eth interface, previously set up by StartEthInterface
 * @return true if success
 */
define boolean StopEthInterface() ``{

    y2milestone("Network detection finish");

    if(detection_interface) {
	y2milestone("Shut down interface %1 ...", device);
	SCR::Execute(.target.bash, sformat("/sbin/ifconfig %1 down 2>&1", device));
    }
    detection_interface = false;

    if(detection_module != "") {
	y2milestone("Removing module %1 ...", detection_module);
	SCR::Execute(.target.bash, sformat("/sbin/rmmod %1 2>&1", detection_module));
    }
    detection_module = "";

    y2milestone("Network detection finish (end)");
    return true;
}

/**
 * Start detection
 * @return true if success
 */
define boolean StartDetection() ``{

    y2milestone("Network detection start");

    /* Start DHCP detection */
    SCR::Execute(.target.bash, sformat("/bin/rm -f %1/dhcpcd-*", tmpdir));
    SCR::Execute(.target.bash, sformat("/usr/sbin/dhcpcd-test %1 > %2/dhcpcd-%1.info", device, tmpdir));

    y2milestone("Network detection start (end)");
    return true;
}

/**
 * Finish detection
 * @return true if success
 */
define boolean StopDetection() ``{

    y2milestone("Network detection stop");

    result = $[];

    /* Read DHCP data */
    string info = sformat("%1/dhcpcd-%2.info", tmpdir, device);
    // info = "/var/lib/dhcpcd/dhcpcd-eth0.info";

    if(SCR::Read(.target.size, info) > 0) {

	path detpath = .detection.dhcp;
	string tmpfile = tmpdir + "/detection_dhcp.scr";
	string scrfile = sformat("%1\n\n`ag_ini(SysConfigFile(\"%2\"))\n", detpath, info);
	SCR::Write(.target.string, tmpfile, scrfile);
	SCR::RegisterAgent(detpath, tmpfile);

	list keys = SCR::Dir(detpath);
	y2debug("keys=%1", keys);

	maplist(string k, keys, ``{
	    string v = (string) SCR::Read(add(detpath, k));
	    y2debug("%1=%2", k, v);
	    /* FIXME: duplicate keys (make list? add with suffix1, etc? ...? */
	    change(result, k, v);
	});
	SCR::UnregisterAgent(detpath);

    }

    /* Finish DHCP detection */
    SCR::Execute(.target.bash, sformat("test -f %1/dhcpcd-%2.pid && kill $(cat %1/dhcpcd-%2.pid)", tmpdir, device));

    y2milestone("Network detection stop (end)");
    return true;
}

/**
 * Start the detection
 * @return true on success
 */
global define boolean Start() ``{
    if(running == true) {
	y2error("Detection already running");
	return false;
    }

y2milestone("IFCONFIG1: %1", SCR::Execute(.target.bash_output, "/sbin/ifconfig"));
    boolean ret = false;
    if(StartEthInterface() && StartDetection()) {
	running = true;
	ret = true;
    }

y2milestone("IFCONFIG2: %1", SCR::Execute(.target.bash_output, "/sbin/ifconfig"));
    y2milestone("Detection start result: %1", ret);
    return ret;
}

/**
 * Stop the detection
 * @return true on success
 */
global define boolean Stop() ``{
    if(running != true) {
	y2error("Detection not running");
	return false;
    }
    running = false;

y2milestone("IFCONFIG3: %1", SCR::Execute(.target.bash_output, "/sbin/ifconfig"));
    boolean ret = StopDetection();
    ret = StopEthInterface() && ret;

y2milestone("IFCONFIG4: %1", SCR::Execute(.target.bash_output, "/sbin/ifconfig"));
    y2milestone("Detection stop result: %1", ret);
    return ret;
}

/* EOF */
}
