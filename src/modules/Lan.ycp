/**
 * File:
 *   modules/Lan.ycp
 *
 * Package:
 *   Configuration of network cards
 *
 * Summary:
 *   Data for configuration of network, input and output functions.
 *
 * Authors:
 *   Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 * Representation of the configuration of network.
 * Input and output routines.
 *
 */

{

module "Lan";
textdomain "network";
import "Progress";

include "network/config.ycp";
include "network/hardware.ycp";
include "network/routines.ycp";

include "ui/summary.ycp";

/*-------------*/
/* GLOBAL DATA */

/* kernel options */
global string name = "";
global string modul = "";
global string options = "";
global string unique = "";
global string type = "";

global boolean pcmcia = false;

/* address options */
global string bootproto = "";
global string ipaddr = "";
global string netmask = "";
global string device = "";

/**
 * Abort function
 * return boolean return true if abort
 */
global term AbortFunction = nil;

/*--------------*/
/* PRIVATE DATA */

/**
 * Hardware information
 * [
 *     "name"	: "Digital DecCHIP 1234",
 *     "unique"	: "uihd98723hodi2hgday8",
 *     "modul"	: "tulip",
 *     "options" : ""
 * ]
 */
list HARDWARE = [];

/**
 * Config information
 */
map CONFIG = $[];

/**
 * Data was modified?
 */
boolean modified = false;

/*------------------*/
/* GLOBAL FUNCTIONS */

/**
 * Data was modified?
 */
global define boolean Modified() ``{
    y2debug("modified=%1",modified);
    return modified;
};

/**
 * Read all network settings from the SCR
 * @return true on success
 */
global define boolean Read() ``{

    string caption = _("Initializing network configuration");
    integer steps = 3;

    /* FIXME */
    integer sl = 0; //2000;

    Progress::New(caption, " ", steps, [
	_("Detect devices"),
	_("Read current configuration"),
	_("Detect current status"),
    ], [], "");

    sleep(sl);
    if(Abort()) return false;
    Progress::NextStage();
    Progress::Title(_("Detecting network cards"));
    ReadHardware();
    sleep(sl);

    if(Abort()) return false;
    Progress::NextStage();
    Progress::Title(_("Reading current configuration"));
    ReadConfig("eth|tr");
    sleep(sl);

    if(Abort()) return false;
    Progress::NextStage();
    Progress::Title(_("Detecting current status"));
    ReadStatus();
    sleep(sl);

    if(Abort()) return false;
    Progress::NextStage();
    Progress::Title(_("Finished"));

    sleep(sl);
    if(Abort()) return false;
    return true;
}

/**
 * Update the SCR according to network settings
 * @return true on success
 */
global define boolean Write() ``{

    string caption = _("Saving network configuration");
    integer steps = 2;

    /* FIXME */
    integer sl = 1000;

    Progress::New(caption, " ", steps, [
	_("Write configuration"),
	_("Run SuSEconfig"),
    ], [], "");

    sleep(sl);
    if(Abort()) return false;
    Progress::NextStage();
    Progress::Title(_("Writing configuration"));
    WriteConfig();
    sleep(sl);

    if(Abort()) return false;
    Progress::NextStage();
    Progress::Title(_("Running SuSEconfig"));
    RunSuSEconfig();
    sleep(sl);

    if(Abort()) return false;
    Progress::NextStage();
    Progress::Title(_("Finished"));

    sleep(sl);
    if(Abort()) return false;
    return true;
}

/**
 * Get all network settings from the first parameter
 * (for use by autoinstallation)
 * @param settings a map of settings to be imported.
 * @return true on success
 */
global define boolean Import(map settings) ``{
    return true;
}

/**
 * Dump the network settings to a single map
 * (for use by autoinstallation)
 * @return dumped settings (later acceptable by Import ())
 */
global define map Export() ``{
    return $[];
}

/**
 * Build a textual summary and a list of unconfigured cards
 * @return summary of the current configuration
 */
global define list Summary() ``{

    list configured = [];
    list unconfigured = [];

    maplist(`d, HARDWARE, ``{
	string hwname = lookup(d, "name", _("Unknown network card"));
	string ty = lookup(d, "type", "eth");
	string un = lookup(d, "unique", nil);
	string status = IsConfigured(ty, un);
	y2debug("status(%1)=%2",status,d);
	if(status != "")
	    change(configured, summaryDevice(hwname, "Configured as " + status));
	else
	    change(unconfigured, d);
    });

    string summary = "";
    if(size(configured) > 0)
	summary = summaryAddHeader("", _("Already configured network cards:")) +
	    summaryDevicesList(configured);
    else
	summary = summaryAddHeader("", _("No configured network card."));

    list devs = hwlist2items(unconfigured, 0);
    change(devs, `item(`id(`other), _("Other (not detected)")));

    return [ devs, summary ];
}

/*-------------------*/
/* PRIVATE FUNCTIONS */

/**
 * Abort function
 * @return blah blah lahjk
 */
define boolean Abort() ``{
    if(AbortFunction != nil)
	return eval(AbortFunction) == true;
    return false;
}

/**
 * Read status information
 * @return true if success
 */
define boolean ReadStatus() ``{
    return true;
}

/**
 * Run SuSEconfig
 * @return true if success
 */
define boolean RunSuSEconfig() ``{
    return true;
}

global define list FreeDevices(string type) ``{
    y2debug("CONFIG=%1",CONFIG);
    return GetFreeDevices(type, 10);
}

global define string Configured(string type, string unique) ``{
    return IsConfigured(type, unique);
}

global define void SelectHW(integer which) ``{
    map sel = select(HARDWARE, which, $[]);

    if(which > size(HARDWARE))
	y2error("Item not found in HARDWARE: %1 (%2)", which, size(HARDWARE));

    name = lookup(sel, "name", "");
    unique = lookup(sel, "unique", "");
    modul = lookup(sel, "module", "");
    options = lookup(sel, "options", "");
    type = lookup(sel, "type", "eth");
    device = "eth" + select(GetFreeDevices(type,1), 0, "");

    if(device == "eth") device = _("Unknown device");
}

global define UpdateConfig() ``{
    /* FIXME add global variables to CONFIG */
    modified = true;
}

/* EOF */
}
