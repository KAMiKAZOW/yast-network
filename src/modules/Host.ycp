/**
 * File:	modules/Host.ycp
 * Package:	Network configuration
 * Summary:	Hosts data
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

module "Host";
textdomain "network";
import "Summary";
include "network/routines.ycp";

/**
 * All hosts
 */
global map hosts = $[];

/**
 * Deleted hosts
 */
global list Deleted = [];

/**
 * Data was modified?
 */
global boolean modified = false;

/**
 * All hosts read at the start
 */
map hosts_init = $[];

/**
 * "hosts" file location
 */
string hosts_file = "/etc/hosts";

/**
 * Read hosts settings
 * @return true if success
 */
global define boolean Read() ``{

    /* read route.conf */
    if(SCR::Read(.target.size, hosts_file) > 0) {
	list hostlist = SCR::Dir(.etc.hosts);
	hosts = listmap(string host, hostlist, ``{
	    string name = SCR::Read(topath(sformat(".etc.hosts.\"%1\"", host)));
	    list names = filter(string s, splitstring(name, "[ \t]"), ``(s != nil && s != ""));
	    return [ host, names ];
	});
    }

    /* save hosts to check for changes later */
    hosts_init = hosts;

    y2debug("hosts=%1", hosts);
    return true;
}

/**
 * Write hosts settings and apply changes
 * @return true if success
 */
global define boolean Write() ``{

    if(!modified) return true;
    y2milestone("Writing configuration");

    /* Check if there is anything to do */
    if(hosts_init == hosts) {
	y2debug("Hosts not modified");
	return true;
    }

    /* Create if not exists, otherwise backup */
    if(SCR::Read(.target.size, hosts_file) < 0)
	SCR::Write(.target.string, hosts_file, "");
    else
	SCR::Execute(.target.bash, "/bin/cp "+hosts_file+" "+hosts_file+".YaST2save");

    any ret = false;
    if(hosts == $[] || hosts == nil)
	/* Workaround bug [#4476] */
	ret = SCR::Write(.target.string, hosts_file, "");
    else {
	/* Update the hosts config */
	y2debug("hosts=%1", hosts);
	y2debug("Deleted=%1", Deleted);
	/* Deleted deleted hosts */
	maplist(string ho, Deleted, ``(SCR::Write(add(.etc.hosts, ho), nil)));
	/* Add and update new hosts */
	maplist(string ho, list names, hosts, ``{
	    if(contains(Deleted, ho) || hosts_init[ho]:nil != names) {
		y2debug("changed: %1 (%2:%3)", ho, names, hosts_init[ho]:nil);
		SCR::Write(add(.etc.hosts, ho), mergestring(names, " "));
	    }
	});
	ret = true;
    }

    return ret == true;
}

/**
 * Get all the Hosts configuration from a map.
 * When called by hosts_auto (preparing autoinstallation data)
 * the map may be empty.
 * @param settings autoinstallation settings
 * @return true if success
 */
global define boolean Import(map settings) ``{
    if(size(settings) == 0)
	return true;

    modified = true;

    hosts = eval(settings["hosts"]:[]);
    return true;
}

/**
 * Dump the Hosts settings to a map, for autoinstallation use.
 * @return autoinstallation settings
 */
global define map Export() ``{
    return $[
	"hosts": eval(hosts),
    ];
}

/**
 * Return "system" predefined hosts (should be present all the time)
 * @return list of system hosts
 */
global define list GetSystemHosts() ``{
    return [
	"127.0.0.1",
	"::1", "fe00::0", "ff00::0", "ff02::1", "ff02::2", "ff02::3"
    ];
}

/**
 * Update hosts according to the current hostname
 * @param hostname current hostname
 * @param domain current domain name
 * @param ips localhost IP addresses
 * @return true if success
 */
global define boolean Update(string hostname, string domain, list ips) ``{

    string fqhostname = hostname;
    if(domain != "") fqhostname = fqhostname + "." + domain;

    string oldhostname = "";
    string oldhostip = "";

    /* Read oldhostname entry */
    list oldhost = splitstring(SCR::Read(.var.adm.SuSEconfig.oldhostentry), "\n");
    if(size(oldhost) > 0)
	oldhostname = oldhost[0]:"";
    if(size(oldhost) > 1)
	oldhostip = oldhost[1]:"";

    /* Remove old hostname from hosts */
    if(contains(hosts, oldhostip))
	hosts = remove(hosts, oldhostip);

    /* Add at least one hostname/ip */
    if(size(ips) < 1) {
	change(hosts, "127.0.0.2", fqhostname + " " + hostname);
	return true;
    }

    /* Add hostname/ip for all ips */
    boolean nickadded = false;
    maplist(string ip, ips, ``{
	/* Only add if not present yet */
	if(contains(hosts, ip)) return;

	string name = fqhostname;
	/* Add nick for the first one */
	if(!nickadded) {
	    nickadded = true;
	    name = name + " " + hostname;
	}

	change(hosts, ip, name);
    });

    /* */

    return true;
}
/**
 * Create host summary
 * @return summary text
 */
global define string Summary() ``{

	string summary = "";
	if (hosts == $[] )
		return Summary::NotConfigured();

	summary = Summary::OpenList(summary);
	foreach(`k, `v, hosts, ``{
		summary = Summary::AddListItem(summary, k + " - " + mergestring(v, " ") );
	});
	summary = Summary::CloseList(summary);
	return summary;
}

/* EOF */
}
