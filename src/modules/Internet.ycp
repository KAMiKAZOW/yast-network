/**
 * File:	modules/Internet.ycp
 * Package:	Network configuration
 * Summary:	Internet data
 * Authors:	Michal Svec <msvec@suse.cz>
 *		Arvin Schnell <arvin@suse.de>
 *
 * $Id$
 */

{

module "Internet";
textdomain "network";

include "network/complex.ycp";
include "network/devices.ycp";
include "network/routines.ycp";

global string device = "";
global string password = "";
global boolean demand = false;
global boolean askpassword = nil;

/**
 * Devices in order from fastest to slowest
 */
map FastestRegexps = $[
    1 : NetworkDeviceRegex,
    2 : "dsl",
    3 : "isdn|ippp|isdn-pcmcia-|isdn-usb-|ippp-pcmcia-|ippp-usb-",
    4 : "ppp",
];

/**
 * Find the fastest connection to the Internet
 * @return device with the fastest connection
 */
global define boolean Fastest() ``{

    /* Read available devcies */
    map Devices = $[];
    ReadDevices("");
    y2debug("Devices=%1", Devices);
    list types = mapkeys(Devices);
    y2debug("types=%1", types);
    list devices = [];
    maplist(string t, types, ``{
	devices = union(devices, maplist(string n, mapkeys(Devices[t]:$[]), ``(t+n)));
    });
    y2debug("devices=%1", devices);

    /* Find the fastest device */
    device = "";
    maplist(integer num, string regex, FastestRegexps, ``{
	maplist(string dev, devices, ``{
	    if(device == "" && regexpmatch(dev, "^"+regex+"[0-9]*$")) device = dev;
	});
    });
    y2milestone("fastest=%1", device);

    // no fallback since there are devices that should not be tested (e.g. lo)

    if (device == "")
	return false;

    map devmap = Devices[device_type(device), device_num(device)]:$[];
    y2debug("devmap=%1", devmap);

    /* Lookup the provider values */
    string provider = devmap["PROVIDER"]:"";
    if(provider != "") {
	import "Providers";
	Providers::Read("all");
	Providers::Select(provider);
	demand = Providers::Provider["DEMAND"]:"no" == "yes";
	password = Providers::Provider["PASSWORD"]:"";
	askpassword = Providers::Provider["ASKPASSWORD"]:"no" == "yes";
    }

    return true;
}

/**
 * Start the fastest interface
 * @return true if successful started
 */
global define boolean Start() ``{
    // FIXME: use password and askpassword
    return SCR::Execute(.target.bash, "/sbin/ifup " + device) == 0;
}

/**
 * Stop the fastest interface
 * @return true if successful stopped
 */
global define boolean Stop() ``{
    return SCR::Execute(.target.bash, "/sbin/ifdown " + device) == 0;
}

/**
 * Status of the fastest interface
 * @return true if interface is up (which is not equal to connected)
 */
global define boolean Status() ``{
    return SCR::Execute(.target.bash, "/sbin/ifstatus " + device) == 0;
}

/* EOF */
}
