/**
 * File:	modules/Internet.ycp
 * Package:	Network configuration
 * Summary:	provide an internet connection
 * Authors:	Arvin Schnell <arvin@suse.de>
 *
 * $Id$
 */

{
    module "Internet";
    textdomain "network";

    import "Wizard";
    include "ui/common_messages.ycp";

    /**
     *  lan, dsl, isdn, modem or empty
     */
    global string type = "";

    /**
     *  the ifcfg file
     */
    global string ifcfg_file = "";

    /**
     *  the provider file (only valid for dsl, isdn and modem)
     */
    global string provider_file = "";

    /**
     *  demand (only valid for dsl, isdn and modem)
     */
    global boolean demand = false;

    /**
     *  ask password (only valid for dsl, isdn and modem)
     */
    global boolean ask_password = false;

    /**
     *  true if ask_password is true and the password has successfully been
     *  asked for
     */
    boolean password_known = false;

    /**
     *  the password (only valid for dsl, isdn and modem)
     */
    string password = "";

    /**
     *  somehow find the "fastest" configured internet connection
     */
    global define void FindFastest () ``{
	// FIXME
	type = "dsl";
	ifcfg_file = "ifcfg-dsl0";
	provider_file = "tonline-dsl";
	demand = false;
	ask_password = false;
    }

    define boolean AskForPassword () ``{

	UI::OpenDialog (`VBox (`Heading (_("Enter Provider Password")),
			       `Password (`id(`password), _("&Password:")),
			       `HBox (`PushButton (`id(`ok), `opt(`default),
						   OKButtonLabel()),
				      `PushButton (`id(`cancel),
						   CancelButtonLabel()))));

	UI::SetFocus (`id (`password));
	symbol ret = UI::UserInput ();
	UI::CloseDialog ();

	if (ret == `ok)
	{
	    password_known = true;
	    password = UI::QueryWidget (`id(`password), `Value);
	    return true;
	}
	else
	{
	    password_known = false;
	    password = "";
	    return false;
	}
    }

    global define boolean Start () ``{

	if ((type == "dsl" || type == "isdn" || type == "modem") &&
	    (ask_password && !password_known))
	{
	    if (!AskForPassword ())
		return false;
	}

	// integer ret = SCR::Execute (.target.bash, "/sbin/ifup " + ifcfg_file);
    }

    global define boolean Status () ``{


    }

    global define boolean Stop () ``{


    }
}
