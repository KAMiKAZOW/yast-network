/**
 * File:	modules/Internet.ycp
 * Package:	Network configuration
 * Summary:	Internet data
 * Authors:	Michal Svec <msvec@suse.cz>
 *		Arvin Schnell <arvin@suse.de>
 *
 * $Id$
 */

{

module "Internet";
textdomain "network";

include "network/complex.ycp";
include "network/devices.ycp";
include "network/routines.ycp";

/**
 * Flag to remember if user wants to run internet test
 */
global boolean do_test = true;

/**
 * Flag to remember if you should be started
 */
global boolean do_you = false;


global string device = "";
global string type = "";
global string logfile = "";
global string provider = "";
global string password = "";
global boolean demand = false;
global boolean askpassword = nil;


/**
 * Devices in order from fastest to slowest.
 *
 * Though real network devices are faster than the others we preferable
 * want to test dialup connection. The network cards are last because
 * we assume local network and one (slower) connection to the Internet
 * in the case more network devices.
 */
map FastestRegexps = $[
    1 : "dsl",
    2 : ISDNDeviceRegex,
    3 : "modem|ppp",
    4 : NetworkDeviceRegex
];


/**
 * Types in order from fastest to slowest.
 * @see FastestRegexps
 */
map FastestTypes = $[
    1 : "dsl",
    2 : "isdn",
    3 : "modem",
    4 : "netcard"
];


/**
 * Find the fastest connection to the Internet
 * @return true if a "good" connection was found
 */
global define boolean FindFastest () ``{

    /* Reset Values */
    device = "";
    type = "";
    logfile = "";
    demand = false;
    askpassword = nil;

    /* Read available devcies */
    map Devices = $[];
    ReadDevices("");
    y2debug("Devices=%1", Devices);
    list types = mapkeys(Devices);
    y2debug("types=%1", types);
    list devices = [];
    maplist(string t, types, ``{
	devices = union(devices, maplist(string n, mapkeys(Devices[t]:$[]), ``(t+n)));
    });
    y2debug("devices=%1", devices);

    /* Find the fastest device */
    maplist(integer num, string regex, FastestRegexps, ``{
	maplist(string dev, devices, ``{
	    if(device == "" && regexpmatch(dev, "^" + regex + "[0-9]*$"))
		device = dev;
	});
    });
    y2milestone("fastest=%1", device);

    /* No fallback since there are devices that must not be tested (e.g. lo) */
    if (device == "")
	return false;

    /* Set type */
    maplist(integer num, string regex, FastestRegexps, ``{
	if (type == "" && regexpmatch(device, "^" + regex + "[0-9]*$"))
	    type = FastestTypes[num]:"";
    });

    /* Set logfile */
    if (type == "dsl" || type == "modem")
	logfile = "/var/log/smpppd/ifcfg-" + device + ".log";

    /* Lookup the provider values */
    map devmap = Devices[device_type(device), device_num(device)]:$[];
    y2debug("devmap=%1", devmap);

    provider = devmap["PROVIDER"]:"";
    if(provider != "") {
	import "Provider";
	Provider::Read("all");
	Provider::Select(provider);
	demand = Provider::Provider["DEMAND"]:"no" == "yes";
	password = Provider::Provider["PASSWORD"]:"";
	askpassword = Provider::Provider["ASKPASSWORD"]:"no" == "yes";
    } else {
	demand = false;
	password = "";
	askpassword = nil;
    }

    return true;
}


/**
 * Start the fastest interface
 * @return true if successful started
 */
global define boolean Start(string logfile) ``{

    if(type == "isdn") {
	if(SCR::Execute(.target.bash, "/etc/init.d/isdn status") != 0) {
	    if(SCR::Execute(.target.bash, "/etc/init.d/isdn start") != 0) {
		y2error("starting of isdn failed");
		return false;
	    }
	}
    }

    string cmd = "/sbin/ifup " + device;
    cmd = cmd + "> " + logfile + " 2>&1";

    if(askpassword == true)
    {
	if (SCR::Execute(.target.bash_input, cmd, password) != 0) {
	    y2error("ifup failed");
	    return false;
	}
    }
    else
    {
	if (SCR::Execute(.target.bash, cmd) != 0) {
	    y2error("ifup failed");
	    return false;
	}
    }

    if(type == "isdn") {
	if(SCR::Execute(.target.bash, "/usr/sbin/isdnctrl dial " + device) != 0) {
	    y2error("isdnctrl failed");
	    return false;
	}
    }

    return true;
}


/**
 * Stop the fastest interface
 * @return true if successful stopped
 */
global define boolean Stop(string logfile) ``{
    string cmd = "/sbin/ifdown " + device;
    cmd = cmd + "> " + logfile + " 2>&1";
    integer ret = SCR::Execute(.target.bash, cmd);
    return ret == 0;
}


/**
 * Status of the fastest interface
 * @return true if interface is up (which is not equal to connected)
 */
global define boolean Status() ``{
    integer ret = SCR::Execute(.target.bash, "/sbin/ifstatus " + device);
    return ret == 0 || ret == 10;
}


/**
 * Test if the interface is connected
 * @return true if connected
 */
global define boolean Connected() ``{

    if(type == "dsl" || type == "modem") {
	string tmp1 = SCR::Read(.target.string, "/var/lib/smpppd/ifcfg-" +
				 device + ".info");
	list tmp2 = splitstring(tmp1, "\n");
	return contains(tmp2, "status: connected");
    }

    /* FIXME: isdn */
    if(type == "isdn") {
	return SCR::Execute(.target.bash, "/usr/bin/grep -q pppd /etc/resolv.conf") == 0;
    }

    return true;
}


/**
 * Set dial-on-demand
 * @param demand true if dial-on-demand should be set
 */
global define void SetDemand(boolean demand) ``{
    path pp = .sysconfig.network.providers.v;
    pp = add(pp, provider);
    pp = add(pp, "DEMAND");
    SCR::Write(pp, (demand == true) ? "yes" : "no");
    SCR::Write(.sysconfig.network.providers, nil);
}

}
