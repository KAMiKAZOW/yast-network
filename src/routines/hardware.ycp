/**
 * File:	include/network/hardware.ycp
 * Package:	Configuration of network cards
 * Summary:	Hardware routines
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 * All hardware settings are stored in a global variable HARDWARE.
 *
 * If you want to add a new HW type, you have to do the following steps:
 * - add the type to ReadHardware
 * - add the type to SelectHardware
 * - add the type to ControllerType
 */

{

textdomain "network";

/**
 * Read HW information
 * @param hwtype type of devices to read (netcard|modem|isdn)
 * @return true if success
 */
global define boolean ReadHardware(string hwtype) ``{
    HARDWARE = [];

    integer num = 0;
    list paths = [];
    list allcards = [];

    map hwtypes = $[
	"netcard" : .probe.netcard,
	"modem" : .probe.modem,
	"isdn" : .probe.isdn,
	"dsl" : .probe.isdn,
    ];

    /* read the corresponding hardware */
    if(haskey(hwtypes, hwtype))
	allcards = SCR::Read(lookup(hwtypes, hwtype, nil));
    else if(hwtype == "all" || hwtype == "" || hwtype == nil)
	maplist(path v, mapvalues(hwtypes), ``{
	    allcards = merge(allcards, SCR::Read(v));
	});
    else {
	y2error("unknown hwtype: %1", hwtype);
	return false;
    }

    if(allcards == nil) {
	y2error("hardware detection failure");
	allcards = [];
    }

    /* fill in the hardware data */
    maplist(map card, allcards, ``{
	map one = $[];

	/* common stuff */
	string controller = ControllerType(card);
	change(one, "name", DeviceName(card));
	change(one, "type", controller);
	change(one, "unique", card["unique_key"]:"");
	change(one, "num", num);

	/* modem */
	if(controller == "modem") {
	    map resource = lookup(card, "resource", []);
	    change(one, "device_name", lookup(card, "dev_name", ""));
	    change(one, "speed", lookup(select(lookup(resource, "baud", []), 0, $[]), "speed", ""));
	    change(one, "init1", lookup(select(lookup(resource, "init_strings", []),0,$[]), "init1", ""));
	    change(one, "init2", lookup(select(lookup(resource, "init_strings", []),0,$[]), "init2", ""));
	    change(one, "pppd_options", lookup(select(lookup(resource, "pppd_option", []),0,$[]), "option", ""));
	}
	/* isdn card */
	else if(controller == "isdn") {
	    map resource = lookup(card, "resource", []);
	    list drivers = lookup(card, "isdn", []);
	    change(one, "drivers", drivers);
	    change(one, "sel_drv", 0);
	    change(one, "bus", lookup(card, "bus", ""));
	    change(one, "io", lookup(select(lookup(resource, "io", []),0, $[]), "start", 0));
	    change(one, "irq", lookup(select(lookup(resource, "irq", []), 0, $[]), "irq", 0));
	}
	/* dsl card */
	else if(controller == "dsl") {
	    y2error("dsl not ready yet");
	    /* FIXME */
	}
	/* treat the rest as a network card */
	else {
	    list drivers = lookup(card, "drivers", []);
	    if(size(drivers) < 0) y2error("Not enough drivers");
	    map driver = select(drivers, 0, $[]);
	    change(one, "active", driver["active"]:false);
	    list modules = select(lookup(driver, "modules", []), 0, []);
	    change(one, "module", select(modules, 0, ""));
	    change(one, "options", select(modules, 1, ""));

	    // #13571
	    string hotplug = card["hotplug"]:"";
	    if(hotplug == "pcmcia" || hotplug == "cardbus")
	    {
		controller = controller + "-pcmcia-";
	    }
	    else if(hotplug == "usb")
	    {
		controller = controller + "-usb-";
	    }
	    change(one, "type", controller);
	}

	y2debug("found device: %1", one);
	change(HARDWARE, one);
	num = num + 1;
    });

    y2debug("HARDWARE=%1",HARDWARE);
    return true;
}

/**
 * Select the given hardware item or clean up structures
 * @param which item to be chosen
 */
global define void SelectHardware(integer which) ``{
    map sel = $[];

    if(which != nil) {
	sel = select(HARDWARE, which, $[]);

	if(which > size(HARDWARE) || which < 0)
	    y2error("Item not found in HARDWARE: %1 (%2)", which, size(HARDWARE));
    }

    /* common stuff */
    name = lookup(sel, "name", "");
    unique = lookup(sel, "unique", "");
    type = lookup(sel, "type", "eth");
    device = GetFreeDevice(type);

    /* modem */
    if(type == "modem") {
	Init1 = sel["init1"]:"";
	Init2 = sel["init2"]:"";
	Device = sel["device_name"]:"";
	BaudRate = sel["speed"]:"115200";
	PPPDoptions = sel["pppd_options"]:"";
	type = "ppp";
    }
    /* isdn card */
    else if(type == "isdn") {
	y2error("isdn not ready yet");
	/* FIXME */
    }
    /* dsl card */
    else if(type == "dsl") {
	y2error("dsl not ready yet");
	/* FIXME */
    }
    /* treat the rest as a network card */
    else {
	modul = sel["module"]:"";
	options = sel["options"]:"";
	// #13571
	// How is this different from Lan::AddEdit?
	pcmcia = issubstring(type, "pcmcia");
	usb = issubstring(type, "usb");
    }

    return true;
}

/**
 * Read /etc/modules.conf
 * @return true if success
 */
global define boolean ReadModules() ``{
    return false;
}

/**
 * Write /etc/modules.conf
 * @return true if success
 */
global define boolean WriteModules() ``{
    return false;
}

/**
 * Select the given modules.conf entry or clean up structures
 * @param which item to be chosen
 */
global define void SelectModules(integer which) ``{
}

/**
 * Extract the device 'name'
 * @param hwdevice hardware device
 * @return name consisting of vendor and device name
 */
global define string DeviceName(map hwdevice) ``{
    string delimiter = " "; // "\n";
    string model = "";
    string vendor = "";
    string dev = "";

    model = lookup(hwdevice, "model", "");
    if(model != "" && model != nil) return model;

    vendor = lookup(hwdevice, "sub_vendor", "");
    dev = lookup(hwdevice, "sub_device", "");

    if((vendor == "") || (dev == "")) {
	vendor = lookup(hwdevice, "vendor", "");
	dev = lookup(hwdevice, "device", "");
    }

    if(vendor != "")
	return vendor + delimiter + dev;
    else
	return dev;
};

/**
 * Simple convertor from subclass to controller type.
 * @param hwdevice map with card info containing "subclass"
 * @return short device name
 * @example ControllerType(<ethernet controller map>) -> "eth"
 */
global define string ControllerType(map hwdevice) ``{

    if(lookup(hwdevice, "subclass", "") == "Modem") return "modem";
    if(lookup(hwdevice, "subclass", "") == "ISDN") return "isdn";
    if(lookup(hwdevice, "subclass", "") == "DSL") return "dsl";

    integer subclass_id = lookup(hwdevice, "sub_class_id", -1);

    /* Network controller */
    if(lookup(hwdevice, "class_id", -1) == 2) {
	if(subclass_id == 00) return "eth";
	else if(subclass_id == 01) return "tr";
	else if(subclass_id == 02) return "fddi";
	else if(subclass_id == 03) return "ctc";
	else if(subclass_id == 04) return "iucv";
	else if(subclass_id == 05) return "hsi";
	else if(subclass_id == 06) return "qeth";
	else if(subclass_id == 07) return "escon";
	else if(subclass_id == 0x80) {
	    /* Nothing was found, default is eth */
	    y2error("Unknown network controller type: %1", hwdevice);
	    y2error("It's probably missing in hwinfo (src/hd/hd.h:sc_net_if)");
	    return "eth";
	}
	else {
	    /* Nothing was found, default is eth */
	    y2error("Unknown network controller type: %1", hwdevice);
	    return "eth";
	}

    }
    /* Network Interface */
    else if(lookup(hwdevice, "class_id", -1) == 0x107) {
	if(subclass_id == 0) return "lo";
	else if(subclass_id == 1) return "eth";
	else if(subclass_id == 2) return "tr";
	else if(subclass_id == 3) return "fddi";
	else if(subclass_id == 4) return "ctc";
	else if(subclass_id == 5) return "iucv";
	else if(subclass_id == 6) return "hsi";
	else if(subclass_id == 7) return "qeth";
	else if(subclass_id == 8) return "escon";
	else if(subclass_id == 0x80) {
	    /* Nothing was found, default is eth */
	    y2error("Unknown network interface type: %1", hwdevice);
	    y2error("It's probably missing in hwinfo (src/hd/hd.h:sc_net_if)");
	    return "eth";
	}
	else if(subclass_id == 0x81) return "sit";
	else {
	    /* Nothing was found, default is eth */
	    y2error("Unknown network interface type: %1", hwdevice);
	    return "eth";
	}
    }
    else if(lookup(hwdevice, "class_id", -1) == 0x102)
	return "modem";
    else if(lookup(hwdevice, "class_id", -1) == 0x103)
	return "isdn";

    /* Nothing was found, default is eth */
    y2error("Unknown controller type: %1", hwdevice);
    return "eth";
}

/* EOF */
}
