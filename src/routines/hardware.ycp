/**
 * File:	include/network/hardware.ycp
 * Package:	Network configuration
 * Summary:	Hardware routines
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 * All hardware settings are stored in a global variable Hardware.
 *
 * If you want to add a new HW type, you have to do the following steps:
 * - add the type to ReadHardware
 * - add the type to SelectHardware
 * - add the type to ControllerType
 */

{

textdomain "network";

import "Confirm";
import "Map";

/**
 * Extract the device 'name'
 * @param hwdevice hardware device
 * @return name consisting of vendor and device name
 */
global define string DeviceName(map hwdevice) ``{
    string delimiter = " "; // "\n";
    string model = "";
    string vendor = "";
    string dev = "";

    model = hwdevice["model"]:"";
    if(model != "" && model != nil) return model;

    vendor = hwdevice["sub_vendor"]:"";
    dev = hwdevice["sub_device"]:"";

    if((vendor == "") || (dev == "")) {
	vendor = hwdevice["vendor"]:"";
	dev = hwdevice["device"]:"";
    }

    if(vendor != "")
	return vendor + delimiter + dev;
    else
	return dev;
}

/**
 * Simple convertor from subclass to controller type.
 * @param hwdevice map with card info containing "subclass"
 * @return short device name
 * @example ControllerType(<ethernet controller map>) -> "eth"
 */
global define string ControllerType(map hwdevice) ``{

    if(hwdevice["subclass"]:"" == "Modem") return "modem";
    if(hwdevice["subclass"]:"" == "ISDN") return "isdn";
    if(hwdevice["subclass"]:"" == "DSL") return "dsl";

    integer subclass_id = hwdevice["sub_class_id"]:-1;

    /* Network controller */
    if(hwdevice["class_id"]:-1 == 2) {
	if(subclass_id == 0) return "eth";
	else if(subclass_id == 1) return "tr";
	else if(subclass_id == 2) return "fddi";
	else if(subclass_id == 3) return "ctc";
	else if(subclass_id == 4) return "iucv";
	else if(subclass_id == 5) return "hsi";
	else if(subclass_id == 6) return "qeth";
	else if(subclass_id == 7) return "escon";
	else if(subclass_id == 0x81) return "myri";
	else if(subclass_id == 0x82) return "wlan";
	else if(subclass_id == 0x80) {
	    /* Nothing was found */
	    y2error("Unknown network controller type: %1", hwdevice);
	    y2error("It's probably missing in hwinfo (src/hd/hd.h:sc_net_if)");
	    return "";
	}
	else {
	    /* Nothing was found */
	    y2error("Unknown network controller type: %1", hwdevice);
	    return "";
	}

    }
    /* Communication controller */
    if(hwdevice["class_id"]:-1 == 7) {
	if(subclass_id == 3) return "modem";
	else if(subclass_id == 0x80) {
	    /* Nothing was found */
	    y2error("Unknown network controller type: %1", hwdevice);
	    y2error("It's probably missing in hwinfo (src/hd/hd.h:sc_net_if)");
	    return "";
	}
	else {
	    /* Nothing was found */
	    y2error("Unknown network controller type: %1", hwdevice);
	    return "";
	}

    }
    /* Network Interface */
    else if(hwdevice["class_id"]:-1 == 0x107) {
	if(subclass_id == 0) return "lo";
	else if(subclass_id == 1) return "eth";
	else if(subclass_id == 2) return "tr";
	else if(subclass_id == 3) return "fddi";
	else if(subclass_id == 4) return "ctc";
	else if(subclass_id == 5) return "iucv";
	else if(subclass_id == 6) return "hsi";
	else if(subclass_id == 7) return "qeth";
	else if(subclass_id == 8) return "escon";
	else if(subclass_id == 9) return "myri";
	else if(subclass_id == 10) return "wlan";
	else if(subclass_id == 0x80) {
	    /* Nothing was found */
	    y2error("Unknown network interface type: %1", hwdevice);
	    y2error("It's probably missing in hwinfo (src/hd/hd.h:sc_net_if)");
	    return "";
	}
	else if(subclass_id == 0x81) return "sit";
	else {
	    /* Nothing was found */
	    y2error("Unknown network interface type: %1", hwdevice);
	    return "";
	}
    }
    else if(hwdevice["class_id"]:-1 == 0x102)
	return "modem";
    else if(hwdevice["class_id"]:-1 == 0x103)
	return "isdn";

    /* Nothing was found */
    y2error("Unknown controller type: %1", hwdevice);
    return "";
}

/**
 * Read HW information
 * @param hwtype type of devices to read (netcard|modem|isdn)
 * @return true if success
 */
global define boolean ReadHardware(string hwtype) ``{
    Hardware = [];

    y2debug("hwtype=%1", hwtype);

    /* FIXME: no clean DSL hardware support yet */
    if(hwtype == "dsl") return false;

    integer num = 0;
    list paths = [];
    list allcards = [];

    map hwtypes = $[
	"netcard" : .probe.netcard,
	"modem" : .probe.modem,
	"isdn" : .probe.isdn,
	"dsl" : .probe.dsl,
    ];

    map hwstrings = $[
	/* Confirmation: label text (detecting hardware: xxx) */
	"netcard" : _("Network Cards"),
	/* Confirmation: label text (detecting hardware: xxx) */
	"modem" : _("Modems"),
	/* Confirmation: label text (detecting hardware: xxx) */
	"isdn" : _("ISDN Cards"),
	/* Confirmation: label text (detecting hardware: xxx) */
	"dsl" : _("DSL Devices"),
    ];

    /* Confirmation: label text (detecting hardware: xxx) */
    string hwstring = _("All Network Devices");
    if(haskey(hwstrings, hwtype)) hwstring = hwstrings[hwtype]:"";
    if(!Confirm::Detection(hwstring)) return false;

    /* read the corresponding hardware */
    if(haskey(hwtypes, hwtype))
	allcards = SCR::Read(hwtypes[hwtype]:nil);
    else if(hwtype == "all" || hwtype == "" || hwtype == nil)
	maplist(path v, Map::Values(hwtypes), ``{
	    allcards = merge(allcards, SCR::Read(v));
	});
    else {
	y2error("unknown hwtype: %1", hwtype);
	return false;
    }

    if(allcards == nil) {
	y2error("hardware detection failure");
	allcards = [];
    }

    /* fill in the hardware data */
    maplist(map card, allcards, ``{
	map one = $[];

	/* common stuff */
	string controller = ControllerType(card);
	change(one, "name", DeviceName(card));
	change(one, "type", controller);
	change(one, "unique", card["unique_key"]:"");
	change(one, "num", num);

	/* modem */
	if(controller == "modem") {
	    map resource = card["resource"]:[];
	    change(one, "device_name", card["dev_name"]:"");
	    change(one, "drivers", card["drivers"]:[]);
	    change(one, "requires", card["requires"]:[]);
	    change(one, "speed", lookup(select(lookup(resource, "baud", []), 0, $[]), "speed", 57600));
	    change(one, "init1", lookup(select(lookup(resource, "init_strings", []),0,$[]), "init1", ""));
	    change(one, "init2", lookup(select(lookup(resource, "init_strings", []),0,$[]), "init2", ""));
	    change(one, "pppd_options", lookup(select(lookup(resource, "pppd_option", []),0,$[]), "option", ""));
	}
	/* isdn card */
	else if(controller == "isdn") {
	    map resource = card["resource"]:[];
	    list drivers = card["isdn"]:[];
	    change(one, "drivers", drivers);
	    change(one, "sel_drv", 0);
	    change(one, "bus", card["bus"]:"");
	    change(one, "io", lookup(select(lookup(resource, "io", []),0, $[]), "start", 0));
	    change(one, "irq", lookup(select(lookup(resource, "irq", []), 0, $[]), "irq", 0));
	}
	/* dsl card */
	else if(controller == "dsl") {
	    y2error("dsl not ready yet");
	    /* FIXME: DSL HW */
	}
	/* treat the rest as a network card */
	else if(controller != "") {
	    list drivers = card["drivers"]:[];
	    if(size(drivers) < 0) y2error("Not enough drivers");
	    map driver = drivers[0]:$[];
	    change(one, "active", driver["active"]:false);
	    list modules = select(lookup(driver, "modules", []), 0, []);
	    change(one, "module", modules[0]:"");
	    change(one, "options", modules[1]:"");

	    /* FIXME: this should be also done for modems and others */
	    /* FIXME: #13571 */
	    string hp = card["hotplug"]:"";
	    if(hp == "pcmcia" || hp == "cardbus")
		change(one, "hotplug", "pcmcia");
	    else if(hp == "usb")
		change(one, "hotplug", "usb");
	}

	y2debug("found device: %1", one);
	/* Ignore nForce2 netcards (no driver yet: #25531) */
	if(one["module"]:"" == "nvnet") {
	    y2milestone("nForce2 found: skipping (driver not available)");
	}
	else if(controller != "") {
	    Hardware[size(Hardware)] = one;
	    num = num + 1;
	}
	else {
	    y2error("Unknown controller: %1", card);
	}
    });

    y2debug("Hardware=%1", Hardware);
    return true;
}

/**
 * Select the given hardware item or clean up structures (item == nil)
 * @param which item to be chosen
 */
global define void SelectHardware(integer which) ``{
    map sel = $[];

    if(which != nil) {
	sel = Hardware[which]:$[];

	if(which > size(Hardware) || which < 0)
	    y2error("Item not found in Hardware: %1 (%2)", which, size(Hardware));
    }

    /* common stuff */
    name = sel["name"]:"";
    unique = sel["unique"]:"";
    type = sel["type"]:"eth";
    hotplug = sel["hotplug"]:"";

    /* modem */
    if(type == "modem") {
	Init1 = sel["init1"]:"";
	Init2 = sel["init2"]:"";
	Device = sel["device_name"]:"";
	BaudRate = sel["speed"]:57600;
	PPPDoptions = sel["pppd_options"]:"";
	Requires = sel["requires"]:[];
	type = "ppp";
    }
    /* isdn card */
    else if(type == "isdn") {
	/* FIXME: ISDN */
	y2error("isdn not ready yet");
    }
    /* dsl card */
    else if(type == "dsl") {
	/* FIXME: DSL HW */
	pppmode = sel["pppmode"]:"capi-adsl";
	startmode = sel["startmode"]:"manual";
    }
    /* treat the rest as a network card */
    else {
	/* don't make modules.conf entries for hotpluggable HW (29547) */
	if(hotplug == "") {
	    Module["module"] = sel["module"]:"";
	    Module["options"] = sel["options"]:"";
	}
	else
	    y2debug("HOTPLUG(%1) -> ignoring modules.conf", hotplug);
    }

    device = GetFreeDevice(RealType(type, hotplug));

    return true;
}

/* EOF */
}
