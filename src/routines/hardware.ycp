/**
 * File:
 *   include/network/hardware.ycp
 *
 * Package:
 *   Configuration of network cards
 *
 * Summary:
 *   Hardware routines
 *
 * Authors:
 *   Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 * All hardware settings are stored in a global variable HARDWARE.
 */

{

textdomain "network";

/**
 * Read HW information
 * @param hwtype type of devices to read (netcard|modem|isdn)
 * @return true if success
 */
global define boolean ReadHardware(string hwtype) ``{
    HARDWARE = [];

    integer num = 0;
    list paths = [];
    list allcards = [];

    map hwtypes = $[
	"netcard" : .probe.netdev,
	"isdn" : .probe.isdn,
	"ppp" : .probe.modem,
    ];

    /* read the corresponding hardware */
    if(haskey(hwtypes, hwtype))
	allcards = SCR::Read(lookup(hwtypes, hwtype, nil));
    else if(hwtype == "all")
	maplist(`v, mapvalues(hwtypes), ``{
	    allcards = merge(allcards, SCR::Read(v));
	});
    else {
	y2error("unknown hwtype: %1", hwtype);
	return false;
    }

    /* fill in the hardware data */
    maplist (`card, allcards, ``{
	map one = $[];
	string controller = ControllerType(card);
	change(one, "name", DeviceName(card));
	change(one, "type", controller);
	change(one, "unique", lookup(card, "unique_key", ""));
	change(one, "num", num);

	/* modem */
	if(controller == "ppp") {
	    map resource = lookup(card, "resource", []);
	    change(one, "device_name", lookup(card, "dev_name", ""));
	    change(one, "speed", lookup(select(lookup(resource, "baud", []), 0, $[]), "speed", ""));
	    change(one, "init1", lookup(select(lookup(resource, "init_strings", []),0,$[]), "init1", ""));
	    change(one, "init2", lookup(select(lookup(resource, "init_strings", []),0,$[]), "init2", ""));
	    change(one, "pppd_options", lookup(select(lookup(resource, "pppd_option", []),0,$[]), "option", ""));
	}
	/* isdn card */
	else if(controller == "isdn") {
	    /* FIXME: isdn data */
	}
	/* network cards */
	/* FIXME treat the rest as a network card */
	else {
	    list drivers = lookup(card, "drivers", []);
	    /* FIXME: error if no driver found */
	    map driver = select(drivers, 0, $[]);
	    list modules = select(lookup(driver, "modules", []), 0, []);
	    change(one, "module", select(modules, 0, ""));
	    change(one, "options", select(modules, 1, ""));
	}

	y2debug("found device: %1", one);
	change(HARDWARE, one);
	num = num + 1;
    });

    y2debug("HARDWARE=%1",HARDWARE);
    return true;
}

/**
 * Write /etc/modules.conf
 * @return true if success
 */
global define boolean WriteModulesConf() ``{
    return false;
}

/**
 * Extract the device 'name'
 * @param hwdevice hardware device
 * @return name consisting of vendor and device name
 */
global define string DeviceName(map hwdevice) ``{
    string delimiter = " "; // "\n";
    string vendor = "";
    string dev = "";

    vendor = lookup(hwdevice, "sub_vendor", "");
    dev = lookup(hwdevice, "sub_device", "");

    if((vendor == "") || (dev == "")) {
	vendor = lookup(hwdevice, "vendor", "");
	dev = lookup(hwdevice, "device", "");
    }

    if(vendor != "")
	return vendor + delimiter + dev;
    else
	return dev;
};

/**
 * Simple convertor from subclass to controller type.
 * @param hwdevice map with card info containing "subclass"
 * @return short device name
 * @example ControllerType("Ethernet Controller") -> "eth"
 */
global define string ControllerType(map hwdevice) ``{

    if(lookup(hwdevice, "subclass", "") == "Modem") return "ppp";
    if(lookup(hwdevice, "subclass", "") == "ISDN") return "isdn";

    integer subclass_id = lookup(hwdevice, "sub_class_id", -1);

    /* Network controller */
    if(lookup(hwdevice, "class_id", -1) == 2) {
	if(subclass_id == 00) return "eth";
	else if(subclass_id == 01) return "tr";
	else if(subclass_id == 02) return "fddi";
	else return "eth";  /* default */

    }
    /* Network Interface */
    else if(lookup(hwdevice, "class_id", -1) == 0x107) {
	if(subclass_id == 01) return "eth";
	else if(subclass_id == 02) return "tr";
	else if(subclass_id == 03) return "fddi";
	else return "eth";  /* default */
    }
    else if(lookup(hwdevice, "class_id", -1) == 0x102)
	return "ppp";
    else if(lookup(hwdevice, "class_id", -1) == 0x103)
	return "isdn";

    /* Nothing was found, default is eth */
    return "unknown";
}

}
