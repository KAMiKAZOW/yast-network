/**
 * File:	include/network/runtime.ycp
 * Package:	Configuration of network
 * Summary:	Runtime routines
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

import "Arch";
import "Runlevel";

textdomain "network";

/**
 * Read status information
 * @return true if success
 */
global define boolean ReadStatus() ``{
    return true;
}

/**
 * Run SuSEconfig
 * @return true if success
 */
global define boolean RunSuSEconfig() ``{
    y2milestone("Running SuSEconfig ...");
    SCR::Execute(.target.bash, "/sbin/SuSEconfig --module hostname");
    SCR::Execute(.target.bash, "/sbin/SuSEconfig --module apache 2>/dev/null");
    SCR::Execute(.target.bash, "/sbin/SuSEconfig --module sendmail 2>/dev/null");
    SCR::Execute(.target.bash, "/sbin/SuSEconfig --module postfix 2>/dev/null");
    return true;
}

/**
 * Run one SuSEconfig module
 * @return true if success
 */
global define boolean RunSuSEconfigModule(string modul) ``{
    if(modul == nil || modul == "") {
	y2error("Wrong SuSEconfig module: %1", modul);
	return false;
    }
    y2milestone("Running SuSEconfig module %1", modul);
    return SCR::Execute(.target.bash, sformat("/sbin/SuSEconfig --module %1", modul)) == 0;
}

/**
 * Run KInternet
 * @return true if success
 */
global define boolean RunKInternet() ``{
    y2milestone("Running KInternet ...");
    return SCR::Execute(.target.bash, "{ [ \"$USER\" ] && [ \"$DISPLAY\" ] && kdesu -u $USER -- kinternet -quiet; } >/dev/null 2>&1 &") == 0;
}

/**
 * Start network
 * @return true if success
 */
global define boolean StartNetwork() ``{
    if(Arch::s390) SCR::Execute(.target.bash, "/etc/init.d/chandev reload");
    return SCR::Execute(.target.bash, "/etc/init.d/network start") == 0;
}

/**
 * Restart network
 * @return true if success
 */
global define boolean RestartNetwork() ``{
    return SCR::Execute(.target.bash, "/etc/init.d/network restart") == 0;
}

/**
 * Stop network
 * @return true if success
 */
global define boolean StopNetwork() ``{
    return SCR::Execute(.target.bash, "/etc/init.d/network stop") == 0;
}

/**
 * Enable and start smpppd(8)
 * @return true if success
 */
global define boolean EnableSMPPPD() ``{
    EnableService("smpppd");
    // FIXME: move somewhere else
    if(Runlevel::ServiceStatus("smpppd") == 0)
	Runlevel::RunInitScript("smpppd", "reload");
    else
	Runlevel::RunInitScript("smpppd", "start");
    return true;
}

/**
 * Enable the network service
 * @return true if success
 */
global define boolean EnableNetwork() ``{
    return EnableService("network");
}

/**
 * Enable service
 * @param service service to be enabled
 * @return true if success
 */
global define boolean EnableService(string service) ``{
    if(service == nil || service == "") {
	y2error("Wrong service: %1", service);
	return false;
    }
    y2milestone("Enabling service %1", service);
    /* return Runlevel::ServiceFinetune(service, [ "2", "3", "5" ]); */
    return Runlevel::ServiceAdjust(service, "enable");
}

/**
 * Disable service
 * @param service service to be disabled
 * @return true if success
 */
global define boolean DisableService(string service) ``{
    if(service == nil || service == "") {
	y2error("Wrong service: %1", service);
	return false;
    }
    y2milestone("Disabling service %1", service);
    return Runlevel::ServiceAdjust(service, "disable");
}

/* EOF */
}
