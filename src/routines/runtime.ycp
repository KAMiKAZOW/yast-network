/**
 * File:	include/network/runtime.ycp
 * Package:	Network configuration
 * Summary:	Runtime routines
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

import "Arch";
import "Runlevel";

textdomain "network";

/**
 * Read status information
 * @return true if success
 */
global define boolean ReadStatus() ``{
    return true;
}

/**
 * Run SuSEconfig
 * @return true if success
 */
global define boolean RunSuSEconfig() ``{
    y2milestone("Running SuSEconfig ...");
    SCR::Execute(.target.bash, "/sbin/SuSEconfig --module hostname");
    SCR::Execute(.target.bash, "/sbin/SuSEconfig --module apache 2>/dev/null");
    SCR::Execute(.target.bash, "/sbin/SuSEconfig --module sendmail 2>/dev/null");
    SCR::Execute(.target.bash, "/sbin/SuSEconfig --module postfix 2>/dev/null");
    return true;
}

/**
 * Run one SuSEconfig module
 * @param modul SuSEconfig module
 * @return true if success
 */
global define boolean RunSuSEconfigModule(string modul) ``{
    if(modul == nil || modul == "") {
	y2error("Wrong SuSEconfig module: %1", modul);
	return false;
    }
    y2milestone("Running SuSEconfig module %1", modul);
    return SCR::Execute(.target.bash, sformat("/sbin/SuSEconfig --module %1", modul)) == 0;
}

/**
 * Run KInternet
 * @return true if success
 */
global define boolean RunKInternet() ``{
    y2milestone("Running KInternet ...");
    return SCR::Execute(.target.bash_background, "[ \"$USER\" ] && [ \"$DISPLAY\" ] && kdesu --nonewdcop -u $USER -- kinternet -quiet") == 0;
    // return SCR::Execute(.target.bash, "{ [ \"$USER\" ] && [ \"$DISPLAY\" ] && kdesu -u $USER -- kinternet -quiet; } >/dev/null 2>&1 &") == 0;
}

/**
 * Start network
 * @return true if success
 */
global define boolean StartNetwork() ``{
    boolean ret = true;
    if(Arch::s390) ret = StartService("chandev");
    ret = StartService("network") && ret;
    return ret;
}

/**
 * Restart network
 * @return true if success
 */
global define boolean RestartNetwork() ``{
    return RestartService("network");
}

/**
 * Stop network
 * @return true if success
 */
global define boolean StopNetwork() ``{
    return StopService("network");
}

/**
 * Enable and start smpppd(8)
 * @return true if success
 */
global define boolean EnableSMPPPD() ``{
    boolean ret = true;
    ret = EnableService("smpppd") && ret;
    ret = StartService("smpppd") && ret;
    return ret;
}

/**
 * Enable the network service
 * @return true if success
 */
global define boolean EnableNetwork() ``{
    return EnableService("network");
}

/**
 * Enable service
 * @param service service to be enabled
 * @return true if success
 */
global define boolean EnableService(string service) ``{
    if(service == nil || service == "") {
	y2error("Wrong service: %1", service);
	return false;
    }
    y2milestone("Enabling service %1", service);
    /* return Runlevel::ServiceFinetune(service, [ "2", "3", "5" ]); */
    return Runlevel::ServiceAdjust(service, "enable");
}

/**
 * Disable service
 * @param service service to be disabled
 * @return true if success
 */
global define boolean DisableService(string service) ``{
    if(service == nil || service == "") {
	y2error("Wrong service: %1", service);
	return false;
    }
    y2milestone("Disabling service %1", service);
    return Runlevel::ServiceAdjust(service, "disable");
}

/**
 * Start service (reload if already running)
 * @param service service to be started
 * @return true if success
 */
global define boolean StartService(string service) ``{
    if(service == nil || service == "") {
	y2error("Wrong service: %1", service);
	return false;
    }
    any ret = nil;
    y2milestone("Starting service %1", service);
    /*
    if(Runlevel::ServiceStatus(service) == 0)
	ret = Runlevel::RunInitScript(service, "reload");
    else
    */
	ret = Runlevel::RunInitScript(service, "start");
    y2debug("ret=%1", ret);
    return ret == 0;
}

/**
 * Restart service (reload if already running)
 * @param service service to be started
 * @return true if success
 */
global define boolean RestartService(string service) ``{
    if(service == nil || service == "") {
	y2error("Wrong service: %1", service);
	return false;
    }
    any ret = nil;
    y2milestone("Restarting service %1", service);
    ret = Runlevel::RunInitScript(service, "restart");
    y2debug("ret=%1", ret);
    return ret == 0;
}

/**
 * Stop service
 * @param service service to be stopped
 * @return true if success
 */
global define boolean StopService(string service) ``{
    if(service == nil || service == "") {
	y2error("Wrong service: %1", service);
	return false;
    }
    any ret = nil;
    y2milestone("Stopping service %1", service);
    ret = Runlevel::RunInitScript(service, "stop");
    y2debug("ret=%1", ret);
    return ret == 0;
}

/* EOF */
}
