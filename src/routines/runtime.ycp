/**
 * File:	include/network/runtime.ycp
 * Package:	Network configuration
 * Summary:	Runtime routines
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

import "Arch";
import "Runlevel";
import "Service";

textdomain "network";

/**
 * Read status information
 * @return true if success
 */
define boolean ReadStatus() ``{
    return true;
}

/**
 * Run SuSEconfig
 * @return true if success
 */
define boolean RunSuSEconfig() ``{
    y2milestone("Running SuSEconfig ...");
    SCR::Execute(.target.bash, "/sbin/SuSEconfig --module hostname");
    SCR::Execute(.target.bash, "/sbin/SuSEconfig --module apache 2>/dev/null");
    SCR::Execute(.target.bash, "/sbin/SuSEconfig --module sendmail 2>/dev/null");
    SCR::Execute(.target.bash, "/sbin/SuSEconfig --module postfix 2>/dev/null");
    return true;
}

/**
 * Run one SuSEconfig module
 * @param modul SuSEconfig module
 * @return true if success
 */
define boolean RunSuSEconfigModule(string modul) ``{
    if(modul == nil || modul == "") {
	y2error("Wrong SuSEconfig module: %1", modul);
	return false;
    }
    y2milestone("Running SuSEconfig module %1", modul);
    return SCR::Execute(.target.bash, sformat("/sbin/SuSEconfig --module %1", modul)) == 0;
}

/**
 * Run KInternet
 * @return true if success
 */
define boolean RunKInternet() ``{
    y2milestone("Running KInternet ...");
    return SCR::Execute(.target.bash_background, "[ \"$USER\" ] && [ \"$DISPLAY\" ] && kdesu --nonewdcop -u $USER -- kinternet --quiet") == 0;
    // return SCR::Execute(.target.bash, "{ [ \"$USER\" ] && [ \"$DISPLAY\" ] && kdesu -u $USER -- kinternet --quiet; } >/dev/null 2>&1 &") == 0;
}

/**
 * Start network
 * @return true if success
 */
define boolean StartNetwork() ``{
    boolean ret = true;
    if(Arch::s390) ret = Service::Start("chandev");
    ret = Service::Start("network") && ret;
    return ret;
}

/**
 * Restart network
 * @return true if success
 */
define boolean RestartNetwork() ``{
    return Service::Restart("network");
}

/**
 * Stop network
 * @return true if success
 */
define boolean StopNetwork() ``{
    return Service::Stop("network");
}

/**
 * Enable and start smpppd(8)
 * @return true if success
 */
define boolean EnableSMPPPD() ``{

    boolean ret = true;
    ret = Service::Enable("smpppd") && ret;

    if(Service::Status("smpppd") == 0)
	ret = Service::Reload("smpppd") && ret;
    else
	ret = Service::Restart("smpppd") && ret;
    y2debug("ret=%1", ret);

    return ret;
}

/**
 * Enable the network service
 * @return true if success
 */
define boolean EnableNetwork() ``{
    return Service::Enable("network");
}

/* EOF */
}
