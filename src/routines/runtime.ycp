/**
 * File:	include/network/runtime.ycp
 * Package:	Network configuration
 * Summary:	Runtime routines
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

import "Arch";
import "Mode";
import "NetworkDevices";
import "Package";
import "Service";

textdomain "network";

/**
 * Read status information
 * @return true if success
 */
define boolean ReadStatus() {
    return true;
}

/**
 * Run SuSEconfig
 * @return true if success
 */
define boolean RunSuSEconfig() {
    y2milestone("Running SuSEconfig ...");
    SCR::Execute(.target.bash, "/sbin/SuSEconfig --module apache 2>/dev/null");
    SCR::Execute(.target.bash, "/sbin/SuSEconfig --module sendmail 2>/dev/null");
    SCR::Execute(.target.bash, "/sbin/SuSEconfig --module postfix 2>/dev/null");
    return true;
}

/**
 * Run one SuSEconfig module
 * @param modul SuSEconfig module
 * @return true if success
 */
define boolean RunSuSEconfigModule(string modul) {
    if(modul == nil || modul == "") {
	y2error("Wrong SuSEconfig module: %1", modul);
	return false;
    }
    y2milestone("Running SuSEconfig module %1", modul);
    return SCR::Execute(.target.bash, sformat("/sbin/SuSEconfig --module %1", modul)) == 0;
}

/**
 * Start network
 * @return true if success
 */
define boolean StartNetwork() {
    return Service::Start("network");
}

/**
 * Restart network
 * @return true if success
 */
define boolean RestartNetwork() {
    return Service::Restart("network");
}

/**
 * Stop network
 * @return true if success
 */
define boolean StopNetwork() {
    return Service::Stop("network");
}

/**
 * Enable the network service
 * @return true if success
 */
define boolean EnableNetwork() {
    return Service::Enable("network");
}

/**
 * Setup smpppd(8)
 * @return true if success
 */
define boolean SetupSMPPPD() {
    list devs = NetworkDevices::List("dialup");
    y2milestone("dialup devices: %1", devs);

    boolean ret = true;
    /* Stop and disable */
    if(size(devs) < 1) {
	if(Service::Enabled("smpppd"))
	    ret = Service::Disable("smpppd") && ret;
	if(Service::Status("smpppd") == 0)
	    ret = Service::Stop("smpppd") && ret;
    }
    /* Start and enable */
    else {
	if(!Service::Enabled("smpppd"))
	    ret = Service::Enable("smpppd") && ret;

	/* Installation? */
	if(Mode::normal) {
	    if(Service::Status("smpppd") == 0)
		ret = Service::Reload("smpppd") && ret;
	    else
		ret = Service::Start("smpppd") && ret;
	}
    }

    y2debug("ret=%1", ret);
    return ret;
}

/**
 * Run KInternet
 * @return true if success
 */
define boolean RunKInternet() {
    list devs = NetworkDevices::List("dialup");
    y2milestone("dialup devices: %1", devs);

    /* Any dialup devices? */
    if(size(devs) < 1) {
	y2milestone("No dialup devices");
	return true;
    }

    /* Installation? */
    if(!Mode::normal) {
	y2milestone("No normal mode");
	return true;
    }

    /* Text mode? */
    map ui = UI::GetDisplayInfo();
    boolean ncurses = (boolean) ui["TextMode"]:nil;
    y2milestone("Text mode: %1", ncurses);
    if(ncurses == nil || ncurses == true) return true;

    /* KDE installed? */
    if(!Package::Installed("kdebase3")) {
	y2milestone("KDE not installed");
	return true;
    }

    /* KDE running? */
    if((integer) SCR::Execute(.target.bash, "test \"$KDE_FULL_SESSION\" || test \"$KDESU_USER\"") != 0) {
	y2milestone("KDE not running");
	return true;
    }

    /* KInternet already running? */
    if((integer) SCR::Execute(.target.bash, "dcop | grep '^kinternet'") == 0) {
	y2milestone("KInternet already running");
	return true;
    }

    y2milestone("Running KInternet ...");
    return SCR::Execute(.target.bash_background, "[ \"$USER\" ] && [ \"$DISPLAY\" ] && kdesu --nonewdcop -u $USER -- kinternet --quiet") == 0;
    // return SCR::Execute(.target.bash, "{ [ \"$USER\" ] && [ \"$DISPLAY\" ] && kdesu -u $USER -- kinternet --quiet; } >/dev/null 2>&1 &") == 0;
}

/* EOF */
}
