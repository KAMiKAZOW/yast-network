/**
 * File:	include/network/runtime.ycp
 * Package:	Network configuration
 * Summary:	Runtime routines
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

import "Arch";
import "Mode";
import "NetworkDevices";
import "Package";
import "Service";
import "String";

textdomain "network";

/**
 * Read status information
 * @return true if success
 */
define boolean ReadStatus() {
    return true;
}

/**
 * Run SuSEconfig
 * @return true if success
 */
define boolean RunSuSEconfig() {
    y2milestone("Running SuSEconfig ...");
    SCR::Execute(.target.bash, "/sbin/SuSEconfig --module apache 2>/dev/null");
    SCR::Execute(.target.bash, "/sbin/SuSEconfig --module sendmail 2>/dev/null");
    SCR::Execute(.target.bash, "/sbin/SuSEconfig --module postfix 2>/dev/null");
    return true;
}

/**
 * Run one SuSEconfig module
 * @param modul SuSEconfig module
 * @return true if success
 */
define boolean RunSuSEconfigModule(string modul) {
    if(modul == nil || modul == "") {
	y2error("Wrong SuSEconfig module: %1", modul);
	return false;
    }
    y2milestone("Running SuSEconfig module %1", modul);
    return SCR::Execute(.target.bash, sformat("/sbin/SuSEconfig --module %1", modul)) == 0;
}

/**
 * Check if running on a local system or over a network
 * @return true if running on a local system
 * /
boolean RunningLocal() {
    import "DNS";
    import "Hostname";

    string domain = DNS::domain;
    string hostname = DNS::hostname;
    string fqhostname = Hostname::MergeFQ(hostname, domain);
    string display = lookup((map) SCR::Execute(.target.bash_output, "echo $DISPLAY"), "output", nil);
    string ssh_client = lookup((map) SCR::Execute(.target.bash_output, "echo $SSH_CLIENT"), "output", nil);

    y2milestone("display=%1", display);
    y2milestone("ssh_client=%1", ssh_client);
    y2milestone("fqhostname=%1", fqhostname);

    /* $SSH_CLIENT:
     * if(not set)	local
     * else		REMOTE
     * /
    if(ssh_client != "" && ssh_client != nil) return false;

    /* $DISPLAY:
     *			local
     * :0.0		local
     * localhost:0.0	local
     * beholder:0.0	local
     * wyvern:11.0	REMOTE
     * /
    if(display != "" && display != nil) {
        string dhost = splitstring(display, ":")[0]:"";
	if(dhost != "" && dhost != nil && dhost != "localhost" &&
	    dhost != hostname && dhost != fqhostname) return false;
    }
    return true;
}

/**
 * Duplicate IP detection
 * @param ip tested IP address
 * @return true if duplicate found
 * @see arping(8), ip(8)
 */
boolean DuplicateIP(string ip) {
    string command = "ip l l|grep BROADCAST|grep -v NOARP|cut -d: -f2|tr '\n' ' '";
    string ifs = (string) lookup((map) SCR::Execute(.target.bash_output, command), "stdout", "");
    ifs = String::CutBlanks(ifs);

    foreach(string ifname, splitstring(ifs, " "), {
	command = "arping -qD -c2 -w3 -I" + ifname + " " + ip;
	if(SCR::Execute(.target.bash, command) == 1) return true;
    });

    return false;
}

/**
 * Link detection
 * @return true if link found
 * @see ethtool(8)
 */
boolean HasLink() {
    string ifname = "eth0";

    string command = sformat("ethtool %1 | grep -q 'Link detected: no'", ifname);
    if((integer) SCR::Execute(.target.bash, command) == 1) return false;
    return true;
}

/**
 * Resolve IP to host name
 * @param ip given IP address
 * @return resolved host
 */
string ResolveIP(string ip) {
    string command = "/usr/bin/getent hosts \"%1\" | sed \"s/^[0-9.: \t]\\+//g\"";
    map getent = (map) SCR::Execute(.target.bash_output, sformat(command, ip));
    string hnent = getent["stdout"]:"";
    y2debug("%1", hnent);
    hnent = select(splitstring(hnent, " "), 0, "");
    if(hnent == nil) hnent = "";
    y2debug("'%1'", hnent);
    return String::CutBlanks(hnent);
}

/**
 * Start network
 * @return true if success
 */
define boolean StartNetwork() {
    return Service::Start("network");
}

/**
 * Restart network
 * @return true if success
 */
define boolean RestartNetwork() {
    return Service::Restart("network");
}

/**
 * Stop network
 * @return true if success
 */
define boolean StopNetwork() {
    return Service::Stop("network");
}

/**
 * Enable the network service
 * @return true if success
 */
define boolean EnableNetwork() {
    return Service::Enable("network");
}

/**
 * Setup smpppd(8)
 * @return true if success
 */
define boolean SetupSMPPPD() {
    list devs = NetworkDevices::List("dialup");
    y2milestone("dialup devices: %1", devs);

    boolean ret = true;
    /* Stop and disable */
    if(size(devs) < 1) {
	if(Service::Enabled("smpppd"))
	    ret = Service::Disable("smpppd") && ret;
	if(Service::Status("smpppd") == 0)
	    ret = Service::Stop("smpppd") && ret;
    }
    /* Start and enable */
    else {
	if(!Service::Enabled("smpppd"))
	    ret = Service::Enable("smpppd") && ret;

	/* Installation? */
	if(Mode::normal) {
	    if(Service::Status("smpppd") == 0)
		ret = Service::Reload("smpppd") && ret;
	    else
		ret = Service::Start("smpppd") && ret;
	}
    }

    y2debug("ret=%1", ret);
    return ret;
}

/**
 * Run KInternet
 * @return true if success
 */
define boolean RunKInternet() {
    list devs = NetworkDevices::List("dialup");
    y2milestone("dialup devices: %1", devs);

    /* Any dialup devices? */
    if(size(devs) < 1) {
	y2milestone("No dialup devices");
	return true;
    }

    /* Installation? */
    if(!Mode::normal) {
	y2milestone("No normal mode");
	return true;
    }

    /* Text mode? */
    map ui = UI::GetDisplayInfo();
    boolean ncurses = (boolean) ui["TextMode"]:nil;
    y2milestone("Text mode: %1", ncurses);
    if(ncurses == nil || ncurses == true) return true;

    /* KDE installed? */
    if(!Package::Installed("kdebase3")) {
	y2milestone("KDE not installed");
	return true;
    }

    /* KDE running? */
    if((integer) SCR::Execute(.target.bash, "test \"$KDE_FULL_SESSION\" || test \"$KDESU_USER\"") != 0) {
	y2milestone("KDE not running");
	return true;
    }

    /* KInternet already running? */
    if((integer) SCR::Execute(.target.bash, "dcop | grep '^kinternet'") == 0) {
	y2milestone("KInternet already running");
	return true;
    }

    y2milestone("Running KInternet ...");
    return SCR::Execute(.target.bash_background, "[ \"$USER\" ] && [ \"$DISPLAY\" ] && kdesu --nonewdcop -u $USER -- kinternet --quiet") == 0;
    // return SCR::Execute(.target.bash, "{ [ \"$USER\" ] && [ \"$DISPLAY\" ] && kdesu -u $USER -- kinternet --quiet; } >/dev/null 2>&1 &") == 0;
}

/* EOF */
}
