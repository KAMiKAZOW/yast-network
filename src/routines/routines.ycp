/**
 * File:	include/network/routines.ycp
 * Package:	Network configuration
 * Summary:	Miscellaneous routines
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

textdomain "network";

include "ui/common_popups.ycp";

/**
 * Return all keys from the map
 * @param m the map
 * @return a list of all keys from the map
 */
global define list mapkeys(map m) ``{
    if(m==nil || m==$[]) return [];
    return maplist(any var, any val, m, ``(var));
}

/**
 * Return all values from the map
 * @param m the map
 * @return a list of all values from the map
 */
global define list mapvalues(map m) ``{
    if(m==nil || m==$[]) return [];
    return maplist(any var, any val, m, ``(val));
}

/**
 * Return value from a map for the given key, nil if not found
 * @param m the map
 * @param k the key
 * @return the found value, nil if not found
 */
global define any mapvalue(map m, any k) ``{
    if(m==nil || m==$[]) return nil;
    return m[k]:nil;
}

/**
 * Check if a map contains all needed keys
 * @param m map to be checked
 * @param keys needed keys
 * @return true if map kontains all keys
 */
global define boolean mapcheckkeys(map m, list keys) ``{
    if(m == nil || keys == nil)
	return false;

    boolean ret = true;
    foreach(any k, keys, ``{
	if(!haskey(m, k)) {
	    y2error("Missing key: %1", k);
	    ret = false;
	}
    });

    return ret;
}

/**
 * Convert options map $[var:val, ...] to string "var=val ..."
 * @param m map to be converted
 * @return converted map
 */
global define string map2string(map m) ``{
    if(m == nil) return nil;

    string ret = "";
    maplist(string var, string val, m, ``{
	ret = ret + sformat(" %1=%2", var, val);
    });
    return ret;
}

/**
 * Convert string "var=val ..." to map $[val:var, ...]
 * @param s string to be converted
 * @return converted string
 */
global define string string2map(string s) ``{
    if(s == nil) return nil;

    map ret = $[];
    maplist(string vals, splitstring(s, " "), ``{
	list val = splitstring(vals, "=");
	if(size(val) < 1 || val[0]:"" == "") return;
	if(size(val) > 1)
	    change(ret, val[0]:"", val[1]:"");
	else
	    change(ret, val[0]:"", "");
    });
    return ret;
}

/**
 * Abort function
 * @return blah blah lahjk
 */
global define boolean Abort() ``{
    if(AbortFunction != nil)
	return eval(AbortFunction) == true;
    return false;
}

/**
 * Check for pending Abort press
 * @return true if pending abort
 */
global define boolean PollAbort() ``{
    return UI::PollInput() == `abort;
}

/**
 * If modified, ask for confirmation
 * @return true if abort is confirmed
 */
global define boolean ReallyAbort() ``{
    return !Modified() || UI::ReallyAbortPopup(true);
}

/**
 * Set screen shot name
 * @param name screenshot name
 */
global define void ScreenName(string name) ``{
    if(name != "" && name != nil)
	UI::SetModulename(/* "network/" + */ name);
}

/**
 * Progress::NextStage and Progress::Title combined into one function
 * @param title progressbar title
 */
global define void ProgressNextStage(string title) ``{
    Progress::NextStage();
    Progress::Title(title);
}

/**
 * Change UI widget only if it exists
 * @param id widget id
 * @param param widget parameter
 * @param value widget parameter value
 */
global define void ChangeWidgetIfExists(term id, symbol param, any value) ``{
    if(UI::WidgetExists(id))
	UI::ChangeWidget(id, param, value);
    else
	y2debug("Not changing: %1", id);
}

/**
 * Query UI widget only if it exists
 * @param id widget id
 * @param param widget parameter
 * @param value previous parameter value
 * @return widget value if exists, previous value otherwise
 */
global define any QueryWidgetIfExists(term id, symbol param, any value) ``{
    if(UI::WidgetExists(id))
	return UI::QueryWidget(id, param);
    y2debug("Not changing: %1", id);
    return value;
}

/**
 * Check if required packages are installed and install them if they're not
 * @param packages list of required packages (["rpm", "bash"])
 * @return `next if packages installation is successfull, `abort otherwise
 */
global define symbol Packages(list packages) ``{
    if(size(packages) < 1) return `next;
    y2debug("Checking packages: %1", packages);

    include "require.ycp";
    if(AreAllPackagesInstalled(packages)) return `next;

    /* Popup text */
    string text = _("These packages need to be installed:") + "<p>";
    maplist(string l, packages, ``{ text = text + sformat("%1<br>",l); });
    y2debug("Installing packages: %1", text);

    while(true) {
	boolean ret = InstallAndRemove(packages, [], text);
	if(ret == true) break;

	if(ret == false && AreAllPackagesInstalled(packages)) {
	    ret = true;
	    break;
	}

	/* Popup text */
	if(!UI::YesNoPopup(_("The required packages are not installed.
The configuration will be aborted.

Try again?
")))
	    break;
    }

    return ret == true ? `next : `abort;
}

/**
 * Create comment for changed file
 * @param modul YaST2 module changing the file
 * @return comment
 * @example ChangedComment("lan") -> # Changed by YaST2 module lan 1.1.2000"
 */
global define string ChangedComment(string modul) ``{
    string ret = "\n# Changed by YaST2";
    if(modul != nil && modul != "") ret = ret + " module " + modul;
    string date = lookup(SCR::Execute(.target.bash_output, "/bin/date '+%x'"), "stdout", "");
    if(date != "") ret = ret + " " + date;
    return ret;
}

/**
 * Show busy popup (for proposal)
 * @param message label to bw shown
 */
global define void BusyPopup(string message) ``{
    UI::BusyCursor();
    UI::OpenDialog(`VBox(`Label(message)));
}

/**
 * Close busy popup
 * @see BusyPopup
 */
global define void BusyPopupClose() ``{
    UI::CloseDialog();
}

/**
 * Create a list of items for UI from the given list
 * @param l given list for conversion
 * @param selected selected item (0 for the first)
 * @return a list of items
 * @example [ "x", "y" ] -&gt; [ `item(`id(0), "x"), `item(`id(1), "y") ]
 */
global define list list2items(list l, integer selected) ``{
    list items = [];
    integer n = 0;
    foreach(any i, l, ``{
	change(items, `item(`id(n), i, n == selected));
	n = n + 1;
    });
    return items;
}

/**
 * Create a list of items for UI from the given hardware list
 * @param l given list for conversion
 * @param selected selected item (0 for the first)
 * @return a list of items
 */
global define list hwlist2items(list l, integer selected) ``{
    list items = [];
    integer n = 0;
    foreach(map i, l, ``{
	/* Table field (Unknown device) */
	string hwname = i["name"]:_("Unknown");
	integer num = i["num"]:n;
	change(items, `item(`id(num), hwname, num == selected));
	n = n + 1;
    });
    return items;
    //return list2items(maplist(map h, l, ``(h["name"]:_("Unknown device"))), selected);
}

/**
 * Return a device type
 * @param dev device
 * @return device type
 * @example device_type("eth1") -> "eth"
 * @example device_type("eth-pcmcia-0") -> "eth-pcmcia"
 */
global define string device_type(string dev) ``{
    if(regexpmatch(dev, "([a-zA-Z-]*[a-zA-Z])[^a-zA-Z]*$") != true) return "";
    string ret = regexpsub(dev, "([a-zA-Z-]*[a-zA-Z])[^a-zA-Z]*$", "\\1");
    if(ret == nil) ret = "";
    return ret;

    //return regexpsub(dev, "^([a-zA-Z-]+)[^a-zA-Z-]*$", "\\1");
}

/**
 * Return a device number
 * @param dev device
 * @return device number
 * @example device_num("eth1") -> "1"
 * @example device_num("lo") -> ""
 */
global define integer device_num(string dev) ``{
    if(regexpmatch(dev, "[a-zA-Z-]*([0-9]+)") != true) return "";
    string ret = regexpsub(dev, "[a-zA-Z-]*([0-9]+)", "\\1");
    if(ret == nil) ret = "";
    return ret;

    //string num = regexpsub(dev, "^[a-zA-Z-]*([0-9]+).*$", "\\1");
    string num = regexpsub(dev, "[a-zA-Z-]*([0-9]+)", "\\1");
    return tointeger(num);
}

/**
 * Return a device alias number
 * @param dev device
 * @return alias number
 * @example alias_num("eth1:2") -> 2
 */
global define integer alias_num(string dev) ``{
    if(regexpmatch(dev, "[a-zA-Z-]*[0-9]*:([0-9]+)") != true) return "";
    string ret = regexpsub(dev, "[a-zA-Z-]*[0-9]*:([0-9]+)", "\\1");
    if(ret == nil) ret = "";
    return ret;

    string num = regexpsub(dev, "[a-zA-Z-]*[0-9]*:([0-9]+)", "\\1");
    return tointeger(num);
}

/**
 * Create a device name from its type and number
 * @param typ device type
 * @param num device number
 * @return device name
 * @example device_name("eth", "1") -> "eth1"
 * @example device_name("lo", "") -> "lo"
 */
global define string device_name(string typ, string num) ``{
    if(typ == nil || typ == "") {
	y2error("wrong type: %1", typ);
	return nil;
    }
    if(num == nil /* || num < 0 */) {
	y2error("wrong number: %1", num);
	return nil;
    }
    if(IsHotplug(typ) && num != "") return sformat("%1-%2", typ, num);
    return sformat("%1%2", typ, num);
}

/**
 * Create a alias name from its type and numbers
 * @param typ device type
 * @param num device number
 * @param anum alias number
 * @return alias name
 * @example alias_name("eth", "1", "2") -> "eth1:2"
 */
global define string alias_name(string typ, string num, string anum) ``{
    if(typ == nil || typ == "") {
	y2error("wrong type: %1", typ);
	return nil;
    }
    if(num == nil /* || num < 0 */) {
	y2error("wrong number: %1", num);
	return nil;
    }
    if(anum == nil || anum == "") {
	y2error("wrong alias number: %1", anum);
	return nil;
    }
    return sformat("%1%2:%3", typ, num, anum);
}

/**
 * Test hotplugability of a device
 * @param type device type
 * @return true if hotpluggable
 */
global define boolean IsHotplug(string type) ``{
    if(type == "" || type == nil) return false;
    if(regexpmatch(type, "(pcmcia|usb|pci)$")) return true;
    return false;
}

/**
 * Return real type of the device (incl. PCMCIA, USB, ...)
 * @param type basic device type
 * @param hotplug hot plug type
 * @return real type
 * @example RealType("eth", "usb") -> "eth-usb-"
 */
global define string RealType(string type, string hotplug) ``{

    y2debug("type=%1", type);
    if(type == "" || type == nil) {
	y2error("Wrong type: %1", type);
	return "eth";
    }

    if(hotplug == "" || hotplug == nil)
	return type;

    string realtype = type + "-" + hotplug; // FIXME + "-";
    y2debug("realtype=%1", realtype);
    return realtype;
}

/**
 * Quote a string with 's
 * @param var unquoted string
 * @return quoted string
 * @example quote("a'b") -> "a'\''b"
 */
global define string quote(string var) ``{
    if(var == nil || var == "") return "";
    return mergestring(splitstring(var, "'"), "'\\''");
}

/**
 * Unquote a string with 's (quoted with quote)
 * @param var quoted string
 * @return unquoted string
 * @see quote
 */
global define string unquote(string var) ``{
    if(var == nil || var == "") return "";
    y2debug("var=%1", var);
    while(regexpmatch(var, "'\\\\''")) {
	var = regexpsub(var, "(.*)'\\\\''(.*)", "\\1'\\2");
	y2debug("var=%1", var);
    }
    return var;
}

/* EOF */
}
