/**
 * File:	include/network/routines.ycp
 * Package:	Network configuration
 * Summary:	Miscellaneous routines
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

textdomain "network";

include "ui/common_popups.ycp";

/**
 * Return all keys from the map
 * @param m the map
 * @return a list of all keys from the map
 */
global define list mapkeys(map m) ``{
    if(m==nil || m==$[]) return [];
    return maplist(any var, any val, m, ``(var));
}

/**
 * Return all values from the map
 * @param m the map
 * @return a list of all values from the map
 */
global define list mapvalues(map m) ``{
    if(m==nil || m==$[]) return [];
    return maplist(any var, any val, m, ``(val));
}

/**
 * Return value from a map for the given key, nil if not found
 * @param m the map
 * @param k the key
 * @return the found value, nil if not found
 */
global define any mapvalue(map m, any k) ``{
    if(m==nil || m==$[]) return nil;
    return m[k]:nil;
}

/**
 * Check if a map contains all needed keys
 * @param m map to be checked
 * @param keys needed keys
 * @return true if map kontains all keys
 */
global define boolean mapcheckkeys(map m, list keys) ``{
    if(m == nil || keys == nil)
	return false;

    boolean ret = true;
    foreach(any k, keys, ``{
	if(!haskey(m, k)) {
	    y2error("Missing key: %1", k);
	    ret = false;
	}
    });

    return ret;
}

/**
 * Abort function
 * @return blah blah lahjk
 */
global define boolean Abort() ``{
    if(AbortFunction != nil)
	return eval(AbortFunction) == true;
    return false;
}

/**
 * Check for pending Abort press
 * @return true if pending abort
 */
global define boolean PollAbort() ``{
    return UI::PollInput() == `abort;
}

/**
 * If modified, ask for confirmation
 * @return true if abort is confirmed
 */
global define boolean ReallyAbort() ``{
    return !Modified() || UI::ReallyAbortPopup(true);
}

/**
 * Progress::NextStage and Progress::Title combined into one function
 * @param title progressbar title
 */
global define void ProgressNextStage(string title) ``{
    Progress::NextStage();
    Progress::Title(title);
}

/**
 * Change UI widget only if it exists
 * @param id widget id
 * @param param widget parameter
 * @param value widget parameter value
 */
global define void ChangeWidgetIfExists(term id, symbol param, any value) ``{
    if(UI::WidgetExists(id))
	UI::ChangeWidget(id, param, value);
}

/**
 * Display the finished popup and possibly run another module.
 * If not modified, don't do anything.
 * @param modified true if there are any modified data
 * @param text text to be shown
 * @param run module to be run
 * @param params parameters to pass to the module
 * @return always `next
 */
global define symbol Finished(boolean modified, string text, string run, list params) ``{
    if(!modified) return `next;
    /* popup headline */
    string head = _("Configuration has been successfully saved.");
    any ret = UI::YesNoHeadlinePopup(head, text);
    if(ret == true) CallModule(run, params);
    return `next;
}

/**
 * Question at the end of the network modules about the mail configuration
 * @return question text
 */
global define string FinishedMailText() ``{
    /* Popup text */
    return _("Configure the mail now?");
}

/**
 * Check if required packages are installed and install them if they're not
 * @param packages list of required packages (["rpm", "bash"])
 * @return `next if packages installation is successfull, `abort otherwise
 */
global define symbol Packages(list packages) ``{
    if(size(packages) < 1) return `next;
    y2debug("Checking packages: %1", packages);

    include "require.ycp";
    if(AreAllPackagesInstalled(packages)) return `next;

    /* Popup text */
    string text = _("These packages need to be installed:") + "<p>";
    maplist(string l, packages, ``{ text = text + sformat("%1<br>",l); });
    y2debug("Installing packages: %1", text);

    while(true) {
	boolean ret = InstallAndRemove(packages, [], text);
	if(ret == true) break;

	if(ret == false && AreAllPackagesInstalled(packages)) {
	    ret = true;
	    break;
	}

	if(!UI::YesNoPopup(_("The required packages are not installed,
the configuration will be aborted.\n\nDo you want to try again?\n")))
	    break;
    }

    return ret == true ? `next : `abort;
}

/**
 * Create a list of items for UI from the given list
 * @param l given list for conversion
 * @param selected selected item (0 for the first)
 * @return a list of items
 * @example [ "x", "y" ] -&gt; [ `item(`id(0), "x"), `item(`id(1), "y") ]
 */
global define list list2items(list l, integer selected) ``{
    list items = [];
    integer n = 0;
    foreach(any i, l, ``{
	change(items, `item(`id(n), i, n == selected));
	n = n + 1;
    });
    return items;
}

/**
 * Create a list of items for UI from the given hardware list
 * @param l given list for conversion
 * @param selected selected item (0 for the first)
 * @return a list of items
 */
global define list hwlist2items(list l, integer selected) ``{
    list items = [];
    integer n = 0;
    foreach(any i, l, ``{
	/* Table field (Unknown device) */
	string hwname = lookup(i, "name", _("Unknown"));
	integer num = lookup(i, "num", n);
	change(items, `item(`id(num), hwname, num == selected));
	n = n + 1;
    });
    return items;
    //return list2items(maplist(`h, l, ``(lookup(h, "name", _("Unknown device")))), selected);
}

/**
 * Return a device type
 * @param dev device
 * @return device type
 * @example device_type("eth1") -> "eth"
 */
global define string device_type(string dev) ``{
    //return regexpsub(dev, "^([a-zA-Z-]+)[^a-zA-Z-]*$", "\\1");
    return regexpsub(dev, "([a-zA-Z-]+)[^a-zA-Z-]*$", "\\1");
}

/**
 * Return a device number
 * @param dev device
 * @return device number
 * @example device_num("eth1") -> 1
 * @example device_num("lo") -> -1
 */
global define integer device_num(string dev) ``{
    //string num = regexpsub(dev, "^[a-zA-Z-]*([0-9]+).*$", "\\1");
    string num = regexpsub(dev, "[a-zA-Z-]*([0-9]+)", "\\1");
    return tointeger(num);
}

/**
 * Return a device alias number
 * @param dev device
 * @return alias number
 * @example alias_num("eth1:2") -> 2
 */
global define integer alias_num(string dev) ``{
    string num = regexpsub(dev, "[a-zA-Z-]*[0-9]*:([0-9]+)", "\\1");
    return tointeger(num);
}

/**
 * Create a device name from its type and number
 * @param typ device type
 * @param num device number
 * @return device name
 * @example device_name("eth", 1) -> "eth1"
 */
global define string device_name(string typ, integer num) ``{
    if(typ == nil || typ == "") {
	y2error("wrong type: %1", typ);
	return nil;
    }
    if(num == nil || num < 0) {
	y2error("wrong number: %1", num);
	return nil;
    }
    return sformat("%1%2", typ, num);
}

/**
 * Create a alias name from its type and numbers
 * @param typ device type
 * @param num device number
 * @param anum alias number
 * @return alias name
 * @example alias_name("eth", 1) -> "eth1"
 */
global define string alias_name(string typ, integer num, integer anum) ``{
    if(typ == nil || typ == "") {
	y2error("wrong type: %1", typ);
	return nil;
    }
    if(num == nil || num < 0) {
	y2error("wrong number: %1", num);
	return nil;
    }
    if(anum == nil || anum < 0) {
	y2error("wrong alias number: %1", anum);
	return nil;
    }
    return sformat("%1%2:%3", typ, num, anum);
}

/* EOF */
}
