/**
 * File:	include/network/dns.ycp
 * Module:	Network configuration library
 * Summary:	DNS manipulation routines
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

textdomain "network";

global string ValidCharsHostname = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-";
global string ValidCharsDomain = ValidCharsHostname + ".";
global string ValidCharsFQHostname = ValidCharsDomain;

/* FIXME: move the below to "routines/check.ycp" */

include "network/ip.ycp";

/**
 * @return a description of a valid address (ip4 or name)
 */
global define string valid_address() ``{
    return valid_ip4() + "\n" + valid_domainname();
}

/**
 * @return describe a valid domain name
 */
global define string valid_domainname() ``{
    return
    //Translators: dot: ".", hyphen: "-"
_("A valid domain name consists of components separated by dots.
Each component contains letters, digits, and hyphens.
A hyphen may not start or end a component
and the last component may not begin with a digit.");
}

/**
 * Check syntax of a network address (ip4 or name)
 * @param address an address
 * @return true if correct
 */
global define boolean check_address(string address) ``{
    return check_ip(address) || check_fqhostname(address);
}

/**
 * Check syntax of a network address (ip4 or name)
 * @param address an address
 * @return true if correct
 */
global define boolean check_address4(string address) ``{
    return check_ip4(address) || check_fqhostname(address);
}

/* FIXME: move the above to "routines/check.ycp" */

/**
 * Check syntax of hostname entry
 * (that is a domain name component, unqualified, without dots)
 * @see rfc1123, rfc2396 and obsoleted rfc1034
 * @param host hostname
 * @return true if correct
 */
global define boolean check_hostname(string host) ``{
    if(host == nil || host == "" || size(host) > 63) return false;
    return regexpmatch(host, "^[[:alnum:]]([[:alnum:]-]*[[:alnum:]])?$");
}

/**
 * Check syntax of fully qualified hostname
 * @param host hostname
 * @return true if correct
 */
global define boolean check_fqhostname(string host) ``{
    return check_domainname(host);
}

/**
 * Check syntax of domain entry
 * @param domain domain name
 * @return true if correct
 */
global define boolean check_domainname(string domain) ``{
    if(domain == nil || domain == "") return false;
    list l = splitstring(domain, ".");
    if(contains(maplist(string h, l, ``(check_hostname(h))), false)) return false;
    return !regexpmatch(domain, "\\.[[:digit:]][^.]*$");
}

/**
 * Split FQ hostname to hostname and domain name
 * @param fqhostname FQ hostname
 * @return list of hostname and domain name
 * @example split_fqhostname("ftp.suse.cz") -> ["ftp", "suse.cz"]
 * @example split_fqhostname("ftp") -> ["ftp"]
 */
global define list split_fqhostname(string fqhostname) ``{
    if(fqhostname == "" || fqhostname == nil) {
	y2error("Bad FQ hostname: %1", fqhostname);
	return [];
    }

    string hn = "";
    string dn = "";

    integer dot = findfirstof(fqhostname, ".");
    if(dot != nil) {
	hn = substring(fqhostname, 0, dot);
	dn = substring(fqhostname, dot+1);
	return [ hn, dn ];
    }
    else {
	hn = fqhostname;
	return [ hn ];
    }

    return [ hn, dn ];
}

/* EOF */
}
