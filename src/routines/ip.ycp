/**
 * File:	include/network/ip.ycp
 * Module:	Network configuration library
 * Summary:	IP manipulation routines
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

textdomain "network";

/**
 * Check syntax of IP address
 * @param ip IP address
 * @return true if correct
 */
global define boolean check_ip(string ip) ``{
    return check_ip4(ip) || check_ip6(ip);
}

//TODO: the check is too permissive.
/**
 * @return describe a valid IPv4 address
 */
global define string valid_ip4 () ``{
    return
    //Translators: dot: "."
_("A valid IP address consists of four integers
in the range 0-255 separated by dots.");
}

/**
 * Check syntax of IPv4 address
 * @param ip IPv4 address
 * @return true if correct
 */
global define boolean check_ip4(string ip) ``{
    if (ip == nil || ip == "") return false;
    string num = "(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])";
    string ipv4 = "^" + num + "(\\." + num + "){3}$";
    return regexpmatch(ip, ipv4);
}

/*
 * Check syntax of IPv4 address (maybe better)
 * @param ip IPv4 address
 * @return true if correct
 */
/*
global defin boolean check_ip4_new(string ip) ``{
    if (ip == nil || ip == "") return false;
    string num0 = "(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[1-9])";
    string num1 = "(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])";
    string ipv4 = "^" + num0 + "(\\." + num1 + "){3}$";
    return regexpmatch(ip, ipv4);
}
*/

/**
 * Check syntax of IPv6 address
 * @param ip IPv6 address
 * @return true if correct
 */
global define boolean check_ip6(string ip) ``{
    if (ip == nil || ip == "") return false;

    //string num = "([1-9a-fA-F][0-9a-fA-F]*|0)";
    string num = "([0-9a-fA-F]{1,4})";

    /* 1:2:3:4:5:6:7:8 */
    if(regexpmatch(ip, "^" + num + "(:" + num + "){7}$")) return true;
    /* ::3:4:5:6:7:8 */
    if(regexpmatch(ip, "^:(:" + num + "){1,6}$")) return true;
    /* 1:2:3:4:5:6:: */
    if(regexpmatch(ip, "^(" + num + ":){1,6}:$")) return true;
    /* :: only once */
    if(regexpmatch(ip, "::.*::")) return false;
    /* : max 7x */
    if(regexpmatch(ip, "^([^:]*:){8,}")) return false;
    /* 1:2:3::5:6:7:8 */
    /* 1:2:3:4:5:6::8 */
    if(regexpmatch(ip, "^(" + num + ":){1,6}(:" + num + "){1,6}$")) return true;

    return false;
}

/**
 * Check the netmask
 * @param netmask network mask
 * @return true if correct
 */
global define boolean check_netmask(string netmask) ``{
    return check_netmask4(netmask) || check_netmask6(netmask);
}

/**
 * Check the IPv4 netmask
 * Note that 0.0.0.0 is not a correct netmask.
 * @param netmask network mask
 * @return true if correct
 */
global define boolean check_netmask4(string netmask) ``{

    if(netmask == nil || netmask == "") return false;

    /* <0,32> */
    if(regexpmatch(netmask, "^[0-9]+$")) {
	integer nm = tointeger(netmask);
	return nm >= 0 && nm <= 32;
    }

    /* 255.255.240.0 */
    string s1 = "(128|192|224|240|248|252|254|255)";
    string nm = "^(" + s1 + ".0.0.0|" + "255." + s1 + ".0.0|"
	+ "255.255." + s1 + ".0|" + "255.255.255." + s1 + ")$";
    return regexpmatch(netmask, nm);
}

/**
 * Check the IPv6 netmask
 * @param netmask network mask
 * @return true if correct
 */
global define boolean check_netmask6(string netmask) ``{

    if(netmask == nil || netmask == "") return false;

    /* <0,256> */
    if(!regexpmatch(netmask, "^[0-9]+$")) return false;
    integer nm = tointeger(netmask);
    return nm >= 0 && nm <= 256;
}

/**
 * Convert IPv4 address from string to integer
 * @param ip IPv4 address
 * @return ip address as integer
 */
global define integer ip2integer(string ip) ``{
    /* FIXME: check_ip4, also to compute_* */
    /* if(size(l)!=4) return nil; */
    list l = maplist (`e, splitstring (ip, "."), ``(tointeger (e)));
    return select(l,3,0) + select(l,2,0)<<8 + select(l,1,0)<<16 + select(l,0,0)<<24;
}

/**
 * Convert IPv4 address from integer to string
 * @param ip IPv4 address
 * @return ip address as string
 */
global define string ip2string(integer ip) ``{
    list l = maplist (`b, [0x1000000, 0x10000, 0x100, 0x1], ``((ip / b) & 0xff));
    return sformat("%1.%2.%3.%4",select(l,0,0),select(l,1,0),select(l,2,0),select(l,3,0));
}

/**
 * Converts IPv4 address from string to hex format
 * @param ip IP address as string in "ipv4" format
 * @return string representing IP in Hex
 * @example ip2hex ("192.168.1.1") -> "0xC0A80101"
 * @example ip2hex ("10.10.0.1") -> "0x0A0A0001"
 */
global define string ip2hex(string ip) ``{
    string tmp = "00000000" + substring(toupper(tohexstring(ip2integer(ip))),2);
    return substring (tmp, size (tmp) - 8);
}

/**
 * Compute IPv4 network address from ip4 address and network mask.
 * @param ip IPv4 address
 * @param mask netmask
 * @return computed subnet
 */
global define string compute_network(string ip, string mask) ``{
    integer i = ip2integer(ip);
    integer m = ip2integer(mask);
    return ip2string((i & m) & 0xffffffff);
}

/**
 * Compute IPv4 broadcast address from ip4 address and network mask. The
 * broadcast address is the highest address of network address range.
 * @param ip IPv4 address
 * @param mask netmask
 * @return computed broadcast
 */
global define string compute_broadcast(string ip, string mask) ``{
    integer i = ip2integer(ip);
    integer m = ip2integer(mask);
    return ip2string((i | ~m) & 0xffffffff);
}

/**
 * Convert netmask in bits form (24) to netmask string (255.255.240.0)
 * @param bits number of bits in netmask
 * @return netmask string
 */
global define string bits2netmask(integer bits) ``{
    integer b = bits / 8;
    integer d = bits % 8;

    map l = $[ 1:"255.", 2:"255.255.", 3:"255.255.255.", 4:"255.255.255.255" ];
    map r = $[ 3:"0", 2:"0.0", 1:"0.0.0", 0:"0.0.0.0" ];
    map m = $[
	1:"128", 2:"192", 3:"224", 4:"240",
	5:"248", 6:"252", 7:"254", 8:"255",
    ];

    return l[b]:"" + (d!=0? m[d]:""+(b!=3?".":"") : "") + r[d==0?b:b+1]:"";
}

/**
 * Convert netmask as string (255.255.240.0) to bits form (24)
 * @param netmask netmask as string
 * @return number of bits in netmask
 */
global define integer netmask2bits(string netmask) ``{
    integer bits = 0;
    map m = $[
	"128":1, "192":2, "224":3, "240":4,
	"248":5, "252":6, "254":7, "255":8,
    ];
    maplist(`i, splitstring(netmask, "."), ``{ bits = bits + m[i]:0; });
    return bits;
}

/* EOF */
}
