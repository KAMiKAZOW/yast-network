/**
 * File:	include/network/complex.ycp
 * Package:	Network configuration
 * Summary:	Summary and overview functions
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 * All config settings are stored in a global variable Devices.
 * All hardware settings are stored in a global variable HARDWARE.
 * Deleted devices are in the global list DELETED.
 */

{

textdomain "network";
include "network/routines.ycp";
import "Summary";

/**
 * Build textual summary
 * @param split split configured and unconfigured?
 * @return [ configured, unconfigured ] if split, [ summary ] otherwise
 */
global define list BuildSummary(boolean split) ``{

    list uniques = [];
    list configured = [];
    list unconfigured = [];

    /* build a list of configured devices */
    maplist(`devtype, `devsmap, Devices, ``{
	maplist(`devnum, `devmap, devsmap, ``{

	    /* main device summary */
	    string unq = lookup(devmap, "UNIQUE", "");
	    string hwname = CheckEmptyName(devtype, HardwareName(unq));
	    string status = DeviceStatus(devtype, devnum, devmap);
	    change(configured, Summary::Device(hwname, status));
	    change(uniques, unq);

	    /* aliases summary */
	    map aliases = lookup(devmap, "_aliases", $[]);
	    if(aliases != $[])
		maplist(`anum, `amap, aliases, ``{
		    //hwname = CheckEmptyName(devtype, HardwareName(unq));
		    hwname = _("Virtual network interface");
		    status = DeviceStatus(devtype, devnum + ":" + anum, amap);
		    change(configured, Summary::Device(hwname, status));
		});

	});
    });

    y2debug("uniques(%1)", uniques);
    /* build a list of unconfigured devices */
    maplist(`h, HARDWARE, ``{
	string unq = lookup(h, "unique", "");
	string hwtype = lookup(h, "type", ""); //ControllerType(h);
	string hwname = CheckEmptyName(hwtype, lookup(h, "name", ""));
	y2debug("unq(%1)", unq);
	if(!contains(uniques, unq)) {
	    if(split)
		change(unconfigured, h);
	    else
		change(configured, Summary::Device(hwname, Summary::NotConfigured()));
	}
    });

    y2debug("configured=%1",configured);
    y2debug("unconfigured=%1",unconfigured);

    /* create a summary text */
    string summary = Summary::DevicesList(configured);

    /* if not split -> summary is finished */
    if(!split) return [ summary ];

    /* add headers */
    if(size(configured) > 0)
    // Summary text
	summary = Summary::AddHeader("", _("Already configured devices:")) + summary;
    else
    // Summary text
	summary = Summary::AddHeader("", _("Nothing is configured."));

    /* create a table of unconfigured devices */
    integer selected = lookup(select(unconfigured, 0, $[]), "num", 0);
    list devs = hwlist2items(unconfigured, selected);
    if(size(devs)==0)
    // Label of not detected device
    change(devs, `item(`id(`other), _("Other (not detected)"), true));
    else
    // Label of not detected device
	change(devs, `item(`id(`other), _("Other (not detected)")));

    return [ summary, devs ];

}

/**
 * Fill in sensible string if the name is empty
 * @param devtype device type
 * @param hwname device name
 * @return hwname if not empty, "Unknown device" otherwise
 */
global define string CheckEmptyName(string devtype, string hwname) ``{
    if(hwname != nil && hwname != "") return hwname;

    map device_names = $[
	/* Device type label */
	"arc"		: _("ARCnet network card"),
	/* Device type label */
	"atm"		: _("Asynchronous Transfer Mode (ATM)"),
	/* Device type label */
	"ci"		: _("Common link access for workstation (CLAW)"),
	/* Device type label */
	"contr"		: _("ISDN card"),
	/* Device type label */
	"contr-pcmcia-"	: _("PCMCIA ISDN card"),
	/* Device type label */
	"contr-usb-"	: _("USB ISDN card"),
	/* Device type label */
	"ctc"		: _("Channel to channel interface (CTC)"),
	/* Device type label */
	"dummy"		: _("Dummy network device"),
	/* Device type label */
	"escon"		: _("Enteprise system connector (ESCON)"),
	/* Device type label */
	"eth"		: _("Ethernet network card"),
	/* Device type label */
	"eth-pcmcia-"	: _("PCMCIA Ethernet network card"),
	/* Device type label */
	"eth-usb-"	: _("USB Ethernet network card"),
	/* Device type label */
	"fddi"		: _("FDDI network card"),
	/* Device type label */
	"fddi-pcmcia-"	: _("PCMCIA FDDI network card"),
	/* Device type label */
	"fddi-usb-"	: _("USB FDDI network card"),
	/* Device type label */
	"hippi"		: _("HIgh Performance Parallel Interface (HIPPI)"),
	/* Device type label */
	"hsi"		: _("Hipersockets interface (HSI)"),
	/* Device type label */
	"ippp"		: _("ISDN connection"),
	/* Device type label */
	"ippp-pcmcia-"	: _("PCMCIA ISDN connection"),
	/* Device type label */
	"ippp-usb-"	: _("USB ISDN connection"),
	/* Device type label */
	"irlan"		: _("Infra-red network device"),
	/* Device type label */
	"irda"		: _("Infra-red device"),
	/* Device type label */
	"isdn"		: _("ISDN connection"),
	/* Device type label */
	"isdn-pcmcia-"	: _("PCMCIA ISDN connection"),
	/* Device type label */
	"isdn-usb-"	: _("USB ISDN connection"),
	/* Device type label */
	"iucv"		: _("Inter user communication vehicle (IUCV)"),
	/* Device type label */
	"lo"		: _("Loopback device"),
	/* Device type label */
	"modem"		: _("Modem"),
	/* Device type label */
	"modem-pcmcia-"	: _("PCMCIA modem"),
	/* Device type label */
	"modem-usb-"	: _("USB modem"),
	/* Device type label */
	"myri"		: _("Myrinet network card"),
	/* Device type label */
	"net"		: _("ISDN connection"),
	/* Device type label */
	"ppp"		: _("Modem"),
	/* Device type label */
	"ppp-pcmcia-"	: _("PCMCIA modem"),
	/* Device type label */
	"ppp-usb-"	: _("USB modem"),
	/* Device type label */
	"sit"		: _("IPv6-in-IPv4 encapsulation device"),
	/* Device type label */
	"tr"		: _("Token Ring network card"),
	/* Device type label */
	"tr-pcmcia-"	: _("PCMCIA Token Ring network card"),
	/* Device type label */
	"tr-usb-"	: _("USB Token Ring network card"),
	/* Device type label */
	"vmnet"		: _("VMWare network device"),
    ];

    if(haskey(device_names, devtype))
	return device_names[devtype]:"";

    y2error("Unknown type: %1", devtype);
    /* Device type label */
    return _("Unknown network device");
}

/**
 * Return a hardware name for devices with given unique number
 * @param unq unique number
 * @return hardware name
 */
global define string HardwareName(string unq) ``{
    string hwname = "";
    if(unq != "")
	maplist(`h, HARDWARE, ``{
	    if(lookup(h, "unique", "") == unq)
		hwname = lookup(h, "name", "");
	});
    return hwname;
}

/**
 * Return the textual device status
 * @param devtype device type
 * @param devnum device number
 * @param devmap map with devices settings
 * @return text wth device status
 */
global define string DeviceStatus(string devtype, string devnum, map devmap) ``{
    string dev = devtype + devnum;

    /* modem */
    if(devtype == "ppp" || devtype == "modem") {
	string prov = devmap["PROVIDER_NAME"]:"";
	if(prov == "" || prov == nil)
	    prov = devmap["PROVIDER"]:"";

	if(prov == "" || prov == nil)
	    // modem status (%1 is the device type and number)
	    return sformat(_("Configured as %1"), dev);
	else
	    // modem status (%1 is the device type and number, %2 is provider)
	    return sformat(_("Configured as %1 with provider %2"), dev, prov);
    }
    /* isdn stuff */
    else if(devtype == "contr")
	// isdn device status (%1 is the device type and number)
	return sformat(_("Configured as %1"), dev);
    else if(devtype == "net") {
        // proto: connection protocol (syncppp | rawip)
	string proto    = lookup(devmap, "PROTOCOL", _("Unknown protocol"));
	// provider: name of the provider
	string sn = lookup(devmap, "PROVIDER", "unknown____");
	map p = Provider::ReadProvider(sn);
	string provider = sn; //lookup(p, "PROVIDER", _("Unknown provider"));
	// example: ISDN Connection to Arcor with syncppp on net0
	return sformat(_("to %1 with %2 on %3"), provider, proto, dev);
    }
    /* treat the rest as a network card */
    else {
	if(!regexpmatch(devtype, "lo|dummy|arc|myri|eth|tr|fddi|escon|hsi|ctc|iucv|claw"))
	    y2error("Unknown type: %1", devtype);

	string proto = lookup(devmap, "BOOTPROTO", "static");
	if(proto == "" || proto == "static" || proto == "none" || proto == nil) {
	    string addr = lookup(devmap, "IPADDR", "");
	    string remip = lookup(devmap, "REMOTE_IPADDR", "");
	    if(addr == "" || addr == nil)
		// network card status (%1 is the device type and number)
		return sformat(_("Configured as %1"), dev);
	    else if(remip == "" || remip == nil)
		// network card status (%1 is the device type and number, %2 is address)
		return sformat(_("Configured as %1 with address %2"), dev, addr);
	    else
		// network card status (%1 is the device type and number, %2 is address)
		return sformat(_("Configured as %1 with address %2 (remote %3)"), dev, addr, remip);
	}
	else
	    // network card status (%1 is the device type and number, %2 protocol)
	    return sformat(_("Configured as %1 with %2"), dev, toupper(proto));
    }
}

/**
 * Return textual device type
 * @param type device type
 * @return textual form of device type
 * @example DeviceType("eth") -> "Ethernet"
 */
global define string DeviceType(string type) ``{

    /* Device type label */
    if(issubstring(type, ":"))
	return _("Virtual interface");

    map device_types = $[
	/* Device type label */
	"arc"	: _("ARCnet"),
	/* Device type label */
	"atm"	: _("ATM"),
	/* Device type label */
	"ci"	: _("CLAW"),
	/* Device type label */
	"contr"	: _("ISDN"),
	/* Device type label */
	"ctc"	: _("CTC"),
	/* Device type label */
	"dsl"	: _("DSL"),
	/* Device type label */
	"dummy"	: _("Dummy"),
	/* Device type label */
	"escon"	: _("ESCON"),
	/* Device type label */
	"eth"	: _("Ethernet"),
	/* Device type label */
	"fddi"	: _("FDDI"),
	/* Device type label */
	"hippi"	: _("HIPPI"),
	/* Device type label */
	"hsi"	: _("HSI"),
	/* Device type label */
	"ippp"	: _("ISDN"),
	/* Device type label */
	"irlan"	: _("IrDA"),
	/* Device type label */
	"irda"	: _("IrDA"),
	/* Device type label */
	"isdn"	: _("ISDN"),
	/* Device type label */
	"iucv"	: _("IUCV"),
	/* Device type label */
	"lo"	: _("Loopback"),
	/* Device type label */
	"myri"	: _("Myrinet"),
	/* Device type label */
	"net"	: _("ISDN"),
	/* Device type label */
	"ppp"	: _("Modem"),
	/* Device type label */
	"sit"	: _("IPv6-in-IPv4"),
	/* Device type label */
	"tr"	: _("Token Ring"),
	/* Device type label */
	"vmnet"	: _("VMWare"),
    ];

    if(haskey(device_types, type))
	return device_types[type]:"";

    if(haskey(device_types, select(splitstring(type, "-"), 0, "-")))
	return device_types[select(splitstring(type, "-"), 0, "-")]:"";

    y2error("Unknown type: %1", type);
    return type;
}

/**
 * Return the device protocol or IP address in case of static config
 * @param devmap device map
 * @return textual device protocol
 */
global define string DeviceProtocol(map devmap) ``{
    string ip = devmap["BOOTPROTO"]:"static";
    if(ip == nil || ip == "" || ip == "static" || ip == "none")
	ip = devmap["IPADDR"]:"";
    else ip = toupper(ip);
    return ip;
}

/**
 * Create overview table contents
 * @return table items
 */
global define list BuildOverview() ``{
    list overview = [];

    maplist(`type, `devmap, Devices, ``{
	maplist(`k, `v, devmap, ``{
	    term item = nil;
	    string dev = sformat("%1%2", type, k);
	    string ip = DeviceProtocol(v);

	    /* modem */
	    if(type == "modem" || type == "ppp")
		item = `item(`id(dev), dev, DeviceType(type), v["PROVIDER_NAME"]:_("Unknown provider"));
	    /* ISDN stuff */
	    else if (type == "contr") {
		string cname = lookup(v, "NAME", "unknown");
		item = `item(`id(dev), dev, DeviceType(type), cname /*, "active?", ip, "?", "?"*/);
	    }
	    /* ISDN stuff */
	    else if (type == "net") {
		string cname = lookup(v, "PROVIDER", "unknown");
		string rip   = lookup(v, "PTPADDR", "none");
		string proto = lookup(v, "PROTOCOL", "unknown");
		item = `item(`id(dev), dev, proto, cname, ip, rip);
	    }
	    /* other known types */
	    else if(regexpmatch(type, "lo|dummy|arc|myri|eth|tr|fddi|escon|hsi|ctc|iucv|ci"))
		item = `item(`id(dev), dev, DeviceType(type), /*"active?",*/ ip/*, "?", "?"*/);
	    /* unknown type */
	    else {
		y2error("Unknown type: %1", type);
		item = `item(`id(dev), dev, DeviceType(type), /*"active?",*/ ip/*, "?", "?"*/);
	    }
	    overview = add(overview, item);

	    /* aliases summary */
	    map aliases = lookup(v, "_aliases", $[]);
	    if(aliases != $[])
		maplist(`anum, `amap, aliases, ``{
		    //hwname = CheckEmptyName(devtype, HardwareName(unq));
		    dev = sformat("%1:%2", dev, anum);
		    ip = DeviceProtocol(amap);
		    item = `item(`id(dev), dev, DeviceType(dev), ip);
		    overview = add(overview, item);
		});

	});
    });

    y2debug("overview=%1",overview);
    return overview;
}

/**
 * Create table widget for the overview screens with correct spacings
 * @param caption table caption
 * @param header table header
 * @param contents table contents
 * @param first table is first of the two tables
 * @return table widget
 */
global define term OverviewTableContents(string caption, term header, list contents, boolean first) ``{

    term addbutton = nil;
    term editbutton = nil;
    term deletebutton = nil;
    if(first) {
	/* Pushbutton label */
	addbutton = `PushButton(`id(`add), _("A&dd"));
	/* Pushbutton label */
	editbutton = `PushButton(`id(`edit), _("&Edit"));
	/* Pushbutton label */
	deletebutton = `PushButton(`id(`delete), _("De&lete"));
    }
    else {
	/* Pushbutton label (different shortcut) */
	addbutton = `PushButton(`id(`Add), _("&Add"));
	/* Pushbutton label (different shortcut) */
	editbutton = `PushButton(`id(`Edit), _("Ed&it"));
	/* Pushbutton label (different shortcut) */
	deletebutton = `PushButton(`id(`Delete), _("Dele&te"));
    }

    return `HBox(`HSpacing(1.5), `VBox(
	`VSpacing(0.0),
	caption != ""? `Left(`Heading(caption)) : `VSpacing(0.0),
	`Table(
	    `id(first?`table:`Table),
	    header,
	    contents
	),
	`VSpacing(0.4),
	`HBox(
	    `opt(`hstretch),
	    addbutton,
	    editbutton,
	    deletebutton
	),
	`VSpacing(0.5)
    ),`HSpacing(1.5));

}

/**
 * Create table widget for the overview screens
 * @param header table header
 * @param contents table contents
 * @return table widget
 */
global define term OverviewTable(term header, list contents) ``{
    return `VBox(
	`VSpacing(0.5),
	OverviewTableContents("", header, contents, true)
    );
}

/**
 * Create two table widgets for the overview screens
 * @param caption1 first table caption
 * @param header1 first table header
 * @param contents1 first table contents
 * @param caption2 second table caption
 * @param header2 second table header
 * @param contents2 second table contents
 * @return table widget
 */
global define term OverviewTableDouble(string caption1, term header1, list contents1, string caption2, term header2, list contents2) ``{

    return `VBox(
	`VSpacing(0.5),
	OverviewTableContents(caption1, header1, contents1, true),
	OverviewTableContents(caption2, header2, contents2, false)
    );

}

/*
    list overviewdev = [
	`item(`id(0), "0", "ISDN", "ippp0", "Hisax ISDN"),
    ];
    list overviewif = [
	`item(`id(0), "0", "ippp", "Contactel", "1.2.3.4", "4.3.2.1"),
	`item(`id(1), "1", "ippp", "Czech Online", "1.2.3.6", "6.3.2.1"),
    ];

    y2debug("overviewdev=%1",overviewdev);
    y2debug("overviewif=%1",overviewif);

    import "Wizard";
    include "ui/common_messages.ycp";
    Wizard::CreateDialog();
    term contents = nil;

    contents = OverviewTable(
	`header(_("No."), _("Type"), _("Device"), _("Hardware")),
	overviewdev
    );

    Wizard::SetContentsButtons("Network cards configuration overview", contents, "helptext",
	    BackButtonLabel(), FinishButtonLabel());

    UI::UserInput();

    contents = OverviewTableDouble(
	"ISDN devices",
	`header(_("No."), _("Type"), _("Device"), _("Hardware")),
	overviewdev,
	"Providers",
	`header(_("No."), _("Type"), _("Connection"), _("IP"), _("Remote IP")),
	overviewif
    );

    Wizard::SetContentsButtons("ISDN configuration overview", contents, "helptext",
	    BackButtonLabel(), FinishButtonLabel());

    UI::UserInput();

*/

/* EOF */
}
