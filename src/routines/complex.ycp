/**
 * File:	include/network/complex.ycp
 * Package:	Network configuration
 * Summary:	Summary and overview functions
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 * All config settings are stored in a global variable Devs.
 * All hardware settings are stored in a global variable Hardware.
 * Deleted devices are in the global list DELETED.
 */

{

textdomain "network";

import "Popup";
import "Summary";

include "network/routines.ycp";
include "network/summary.ycp";

define string CheckEmptyName(string devtype, string hwname);
define string DeviceStatus(string devtype, string devnum, map devmap);
define string HardwareName(list<map> Hardware, string unq);

/**
 * Build textual summary
 * @param split split configured and unconfigured?
 * @return [ configured, unconfigured ] if split, [ summary ] otherwise
 */
define list<any> BuildSummary(list<map> Hardware, boolean split) {

    y2debug("Devs=%1", Devs);
    y2debug("Hardware=%1", Hardware);
    y2debug("split=%1", split);

    list uniques = [];
    list<string> configured = [];
    list<map> unconfigured = [];

    /* build a list of configured devices */
    maplist(string devtype, map devsmap, (map<string,map>) Devs, {
	maplist(string devnum, map devmap, (map<string,map>)devsmap, {

	    /* main device summary */
	    string hwname = CheckEmptyName(devtype, HardwareName(Hardware, devnum));
	    string status = DeviceStatus(devtype, devnum, devmap);

	    configured = add(configured, Summary::Device(hwname, status));
	    uniques = add(uniques, devnum);

	    /* aliases summary */
	    map<string,map> aliasee = devmap["_aliases"]:$[];
	    if(aliasee != $[])
		maplist(string aid, map amap, aliasee, {
		    /* Table item */
		    hwname = _("Virtual Interface");
		    status = DeviceStatus(devtype, devnum /* FIXME: devname + sformat(":%1", aid)*/, amap);
		    configured = add(configured, Summary::Device(hwname, status));
		});

	});
    });

    y2debug("uniques(%1)", uniques);
    /* build a list of unconfigured devices */
    maplist(map h, Hardware, {
	string busid = "bus-" + h["bus"]:"" + "-" + h["busid"]:"";
	string mac = "id-" + h["mac"]:"";
	string hwtype = h["type"]:"";
	string hwname = CheckEmptyName(hwtype, h["name"]:"");
	y2debug("busid=%1, mac=%2", busid, mac);
	if(!contains(uniques, busid) && !contains(uniques, mac)) {
	    if(split)
		unconfigured = add(unconfigured, h);
	    else
		configured = add(configured, Summary::Device(hwname, Summary::NotConfigured()));
	}
    });

    y2debug("configured=%1", configured);
    y2debug("unconfigured=%1", unconfigured);

    /* create a summary text */
    string summary = Summary::DevicesList(configured);

    /* if not split -> summary is finished */
    if(!split) return [ summary ];

    /* add headers */
    if(size(configured) > 0)
	/* Summary text */
	summary = Summary::AddHeader("", _("Already configured devices:")) + summary;
    else
	/* Summary text */
	summary = Summary::AddHeader("", _("Nothing is configured."));

    /* create a table of unconfigured devices */
    integer selected = lookup(unconfigured[0]:$[], "num", 0);
    list devs = hwlist2items(unconfigured, selected);

    // FIXME OtherDevices(devs, type);

    /* Label for not detected devices */
    devs = add(devs, `item(`id(`other), _("Other (not detected)"), size(devs) == 0));

    y2debug("summary=%1", summary);
    y2debug("devs=%1", devs);
    return [ summary, devs ];
}

/**
 * Fill in sensible string if the name is empty
 * @param devtype device type
 * @param hwname device name
 * @return hwname if not empty, "Unknown device" otherwise
 */
define string CheckEmptyName(string devtype, string hwname) {
    if(hwname != nil && hwname != "") return hwname;

    map device_names = $[
	/* Device type label */
	"arc"		: _("ARCnet Network Card"),
	/* Device type label */
	"atm"		: _("Asynchronous Transfer Mode (ATM)"),
	/* Device type label */
	"ci"		: _("Common Link Access for Workstation (CLAW)"),
	/* Device type label */
	"contr"		: _("ISDN card"),
	/* Device type label */
	"contr-pcmcia"	: _("PCMCIA ISDN Card"),
	/* Device type label */
	"contr-usb"	: _("USB ISDN Card"),
	/* Device type label */
	"ctc"		: _("Channel to Channel Interface (CTC)"),
	/* Device type label */
	"dsl"		: _("DSL Connection"),
	/* Device type label */
	"dummy"		: _("Dummy network device"),
	/* Device type label */
	"escon"		: _("Enterprise System Connector (ESCON)"),
	/* Device type label */
	"eth"		: _("Ethernet Network Card"),
	/* Device type label */
	"eth-pcmcia"	: _("PCMCIA Ethernet Network Card"),
	/* Device type label */
	"eth-usb"	: _("USB Ethernet Network Card"),
	/* Device type label */
	"fddi"		: _("FDDI Network Card"),
	/* Device type label */
	"fddi-pcmcia"	: _("PCMCIA FDDI Network Card"),
	/* Device type label */
	"fddi-usb"	: _("USB FDDI Network Card"),
	/* Device type label */
	"hippi"		: _("HIgh Performance Parallel Interface (HIPPI)"),
	/* Device type label */
	"hsi"		: _("Hipersockets Interface (HSI)"),
	/* Device type label */
	"ippp"		: _("ISDN connection"),
	/* Device type label */
	"ippp-pcmcia"	: _("PCMCIA ISDN Connection"),
	/* Device type label */
	"ippp-usb"	: _("USB ISDN Connection"),
	/* Device type label */
	"irlan"		: _("Infrared Network Device"),
	/* Device type label */
	"irda"		: _("Infrared Device"),
	/* Device type label */
	"isdn"		: _("ISDN connection"),
	/* Device type label */
	"isdn-pcmcia"	: _("PCMCIA ISDN Connection"),
	/* Device type label */
	"isdn-usb"	: _("USB ISDN Connection"),
	/* Device type label */
	"iucv"		: _("Inter User Communication Vehicle (IUCV)"),
	/* Device type label */
	"lo"		: _("Loopback device"),
	/* Device type label */
	"modem"		: _("Modem"),
	/* Device type label */
	"modem-pcmcia"	: _("PCMCIA Modem"),
	/* Device type label */
	"modem-usb"	: _("USB Modem"),
	/* Device type label */
	"myri"		: _("Myrinet Network Card"),
	/* Device type label */
	"net"		: _("ISDN connection"),
	/* Device type label */
	"plip"		: _("Parallel Line Connection"),
	/* Device type label */
	"ppp"		: _("Modem"),
	/* Device type label */
	"ppp-pcmcia"	: _("PCMCIA Modem"),
	/* Device type label */
	"ppp-usb"	: _("USB Modem"),
	/* Device type label */
	"sit"		: _("IPv6-in-IPv4 Encapsulation Device"),
	/* Device type label */
	"slip"		: _("Serial Line Connection"),
	/* Device type label */
	"tr"		: _("Token Ring Network Card"),
	/* Device type label */
	"tr-pcmcia"	: _("PCMCIA Token Ring Network Card"),
	/* Device type label */
	"tr-usb"	: _("USB Token Ring Network Card"),
	/* Device type label */
	"usb"		: _("USB Network Device"),
	"usb-usb"	: _("USB Network Device"),
	/* Device type label */
	"vmnet"		: _("VMWare Network Device"),
	/* Device type label */
	"wlan"		: _("Wireless Network Card"),
	/* Device type label */
	"wlan-pcmcia"	: _("PCMCIA Wireless Network Card"),
	/* Device type label */
	"wlan-usb"	: _("USB Wireless Network Card"),
    ];

    if(haskey(device_names, devtype))
	return device_names[devtype]:"";

    if(haskey(device_names, devtype + "-")) {
	y2warning("- device found: %1, %2", devtype, hwname);
	return device_names[devtype + "-"]:"";
    }

    y2error("Unknown type: %1", devtype);
    /* Device type label */
    return _("Unknown network device");
}

/**
 * Return a hardware name for devices with given unique number
 * @param unq unique number
 * @return hardware name
 */
define string HardwareName(list<map> Hardware, string id) {
    string hwname = "";
    if(id != "")
	maplist(map h, Hardware, {
	    if(hwname == "" && ("id-" + h["mac"]:"" == id))
		hwname = h["name"]:"";
	    if(hwname == "" && ("bus-" + h["bus"]:"" + "-" + h["busid"]:"" == id))
		hwname = h["name"]:"";
	});
    y2milestone("hwname=%1", hwname);
    return hwname;
}

/**
 * Get aprovider name from the provider map
 * @param provider identifier
 * @return provider name
 * @example ProviderName("tonline") -> "T-Online"
 */
define string ProviderName(string provider) {
    import "Provider";

    if(provider == nil || provider == "")
	return "";

    Provider::Select(provider);
    string nam = Provider::Current["PROVIDER"]:provider;
    if(nam == nil || nam == "") return provider;
    return nam;
}

/**
 * Return the textual device status
 * @param devtype device type
 * @param devnum device number
 * @param devmap map with devices settings
 * @return text wth device status
 */
define string DeviceStatus(string devtype, string devnum, map devmap) {
    string dev = device_name(devtype, devnum);

    /* Modem and DSL */
    if(devtype == "ppp" || devtype == "modem" || devtype == "dsl") {

	string nam = ProviderName(devmap["PROVIDER"]:"");

	if(nam == "" || nam == nil)
	    /* Modem status (%1 is device) */
	    return sformat(_("Configured as %1"), dev);
	else
	    /* Modem status (%1 is device, %2 is provider) */
	    return sformat(_("Configured as %1 with provider %2"), dev, nam);
    }
    /* ISDN card */
    else if(devtype == "isdn" || devtype == "contr") {
	/* ISDN device status (%1 is device) */
	return sformat(_("Configured as %1"), dev);
    }
    /* ISDN stuff */
    else if(devtype == "net") {

	string nam = ProviderName(devmap["PROVIDER"]:"");
        /* Connection protocol (syncppp|rawip) */
	string proto = devmap["PROTOCOL"]:"";

	/* ISDN status (%1 is device, %2 is provider, %3 protocol) */
	return sformat(_("Configured as %1 with provider %2 (protocol %3)"), dev, nam, proto);

	/* example: ISDN Connection to Arcor with syncppp on net0 */
	// return sformat(_("to %1 with %2 on %3"), provider, proto, dev);
    }
    /* Treat others as network cards */
    else {
	/*
	if(!regexpmatch(devtype, NetworkAllRegex))
	    y2error("Unknown type: %1", devtype);
	*/

	string proto = devmap["BOOTPROTO"]:"static";

	if(proto == "" || proto == "static" || proto == "none" || proto == nil) {
	    string addr = devmap["IPADDR"]:"";
	    string remip = devmap["REMOTE_IPADDR"]:"";
	    if(addr == "" || addr == nil)
		/* Network card status */
		return sformat(_("Configured"));
	    else if(remip == "" || remip == nil)
		/* Network card status (%1 is address) */
		return sformat(_("Configured with address %1"), addr);
	    else
		/* Network card status (%1 is address, %2 is address) */
		return sformat(_("Configured with address %1 (remote %2)"), addr, remip);
	}
	else
	    /* Network card status (%1 is device, %2 is protocol) */
	    return sformat(_("Configured as %1 with %2"), dev, toupper(proto));

	/* FIXME: dropped interface name */
	if(proto == "" || proto == "static" || proto == "none" || proto == nil) {
	    string addr = devmap["IPADDR"]:"";
	    string remip = devmap["REMOTE_IPADDR"]:"";
	    if(addr == "" || addr == nil)
		/* Network card status (%1 is device) */
		return sformat(_("Configured as %1"), dev);
	    else if(remip == "" || remip == nil)
		/* Network card status (%1 is device, %2 is address) */
		return sformat(_("Configured as %1 with address %2"), dev, addr);
	    else
		/* Network card status (%1 is device, %2 is address, %3 is address) */
		return sformat(_("Configured as %1 with address %2 (remote %3)"), dev, addr, remip);
	}
	else
	    /* Network card status (%1 is device, %2 is protocol) */
	    return sformat(_("Configured as %1 with %2"), dev, toupper(proto));
    }
}

/**
 * Return the device protocol or IP address in case of static config
 * @param devmap device map
 * @return textual device protocol
 */
define string DeviceProtocol(map devmap) {
    string ip = devmap["BOOTPROTO"]:"static";
    if(ip == nil || ip == "" || ip == "static" || ip == "none")
	ip = devmap["IPADDR"]:"";
    else ip = toupper(ip);
    return ip;
}

/**
 * Create overview table contents
 * @return table items
 */
define list BuildOverview() {
    list overview = [];

    maplist(string type, map devmap, (map<string,map>) Devs, {
	maplist(string k, map v, (map<string,map>)devmap, {
	    term item = nil;
	    string dev = device_name(type, k);
	    string ip = DeviceProtocol(v);

	    /* Modem and DSL */
	    if(type == "modem" || type == "ppp" || type == "dsl")
		item = `item(`id(dev), dev, DeviceType(type), ProviderName(v["PROVIDER"]:""));
	    /* ISDN stuff */
	    else if (type == "contr") {
		string cname = v["NAME"]:"unknown";
		item = `item(`id(dev), dev, DeviceType(type), cname /*, "active?", ip, "?", "?"*/);
	    }
	    /* ISDN stuff */
	    else if (type == "net") {
		string cname = v["PROVIDER"]:"unknown";
		string rip   = v["PTPADDR"]:"none";
		string proto = v["PROTOCOL"]:"unknown";
		item = `item(`id(dev), dev, proto, cname, ip, rip);
	    }
	    /* Treat others as network cards */
	    else {
		/*
		if(!regexpmatch(type, NetworkAllRegex))
		    y2error("Unknown type: %1", type);
		*/
		item = `item(`id(dev), dev, DeviceType(type), /*"active?",*/ ip/*, "?", "?"*/);
	    }
	    overview = add(overview, item);

	    /* aliases summary */
	    map<string,map> aliasee = v["_aliases"]:$[];
	    if(aliasee != $[])
		maplist(string aid, map amap, aliasee, {
		    //hwname = CheckEmptyName(devtype, HardwareName(unq));
		    string adev = sformat("%1:%2", dev, aid);
		    ip = DeviceProtocol(amap);
		    item = `item(`id(adev), adev, DeviceType(adev), ip);
		    overview = add(overview, item);
		});

	});
    });

    y2debug("overview=%1", overview);
    return overview;
}

/* EOF */
}
