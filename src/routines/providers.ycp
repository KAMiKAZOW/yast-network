/**
 * File:
 *   include/network/routines/providers.ycp
 *
 * Package:
 *   Configuration of network
 *
 * Summary:
 *   Providers dialogs
 *
 * Authors:
 *   Dan Vesely <dan@suse.cz>
 *   Petr Blahos <pblahos@suse.cz>
 *   Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 */

{

textdomain "network";

import "Modem";
import "ISDN";
import "DSL";
import "Providers";

import "Wizard";

include "ui/common_popups.ycp";
include "ui/common_messages.ycp";

/***
 * TODO/FIXME:
 * implement wvdialIs*Unique
 * add saveCustomProviders to Write ()
 * fix getting and saving settings in runEditIsdnProviderDialog
 * there must be a function ReallyAbort that tests dirty bit and
 *    possibly shows dialog.
 * select by default the local country
 */

global define ReallyAbort () ``{
    return UI::ReallyAbortPopup(true);
}

////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
///// H E L P     T E X T S ////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
/**
 * Get help text for modem or isdn provider editation.
 * @param modem true for modem, false for isdn
 * return help text
 */
global define getEditProviderHelp (boolean modem) ``{
    // help text 1/4
    string helptext =
_("<p>
Access to your Internet provider. If you have selected your provider
from the  list, these values are provided.
</p>");

    if (!modem)
	helptext = helptext +
	// help text 2/4
_("<p>
Please select the type of packet encapsulation. <b>RawIP</b> means
that MAC headers are stripped off. <b>SyncPPP</b> stands for Synchronous PPP.
</p>") +
    // help text 3/4
_("<p>
Please enter a <b>name</b> of the connection  and a <b>phone number</b>
to access your provider.
</p>") +
    // help text 4/4
_("<p>
Enter the <b>user name</b> and the <b>password</b> that will be used
for logging in (ask your provider if you are not sure).
</p>");
    if (modem)
	helptext = helptext +
_("<p>
Check the <b>Ask</b> button to have it always ask for the password.
</p>");
    return helptext;
}

////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
///// D I A L O G S   A N D   O T H E R S //////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
/**
 * Build provider info text.
 * @param prov provider settings
 * @return provider info text
 */
global define string getProviderInfoText (map prov) ``{
    string InfoText = "";
    string hp = lookup (prov, "Homepage", "");
    string hl = lookup (prov, "Hotline", "");
    if (hp != "")
	InfoText = sformat (_("<p>%1Home page: %2</p>"), InfoText, hp);
    if (hl != "")
	InfoText = sformat (_("<p>%1Hotline: %2</p>"), InfoText, hl);
    if (lookup (Providers::provider, "DialMessage1", "") !="" || lookup (Providers::provider, "DialMessage2", "") != "")
	InfoText = sformat("%1<p>%2%3</p>",
			    InfoText,
			    lookup (Providers::provider, "DialMessage1", ""),
			    lookup (Providers::provider, "DialMessage2", "")
		    );
    else if (lookup (Providers::provider, "Phone", "") == "")
    {
	if (hp != "" && hl != "")
	{
	    string it =
_("<p>
To register for <b>%1</b> and find the best dialing number, connect to the 
home page <b>%2</b> or call the hotline <b>%3</b>.
</p>");
	    InfoText = sformat(it, lookup (Providers::provider, "Provider", ""), hp, hl);
	}

	if (hp != "" && hl == "")
	{
	    string it =
_("<p>
To register for <b>%1</b> and find the best dialing number, connect to the 
home page <b>%2</b>.
</p>");
	    InfoText = sformat(it, lookup (Providers::provider, "Provider", ""), hp);
	}
	if (hp == "" && hl != "")
	{
	    string it =
_("<p>
To register for <b>%1</b> and find the best dialing number, call the hotline 
<b>%2</b>.
</p>");
	    InfoText = sformat(it, lookup (Providers::provider, "Provider", ""), hl);
	}
    }
    return InfoText;
}


global define any dividerHack (list provs, any prev) ``{
    integer p = -1;
    find (`e, provs, ``{
	p = p + 1;
	any id = select (select (e, 0, `id ("x")), 0, "x");
	return id == prev;
    });
    integer i = -1;
    find (`e, provs, ``{
	i = i + 1;
	any id = select (select (e, 0, `id ("x")), 0, "x");
	return id == ."--";
    });
    term item = select (provs, p < i ? i + 1 : i - 1, "");
    return select (select (item, 0, `id ("x")), 0, "x");
}
/**
 * Providers dialog.
 * @param type show only modem/isdn/[at]dsl capable providers? [`modem, `isdn, `tdsl, `dsl]
 * @return symbol for wizard sequencer (`next, `back, `abort, `new)
 */
global define symbol runProvidersDialog (symbol type) ``{
    string caption = _("Select Internet Service Provider (ISP)");

    string helptext =
_("<p>
Please select the appropriate <b>provider</b>.
</p>") +
    // help text 2/3
_("<p>
Choose the country or region where you are located then choose one of the listed
providers.
</p>") +
    // help text 3/3
_("<p> 
Use the <b>New</b> button to add a provider not in the list.
</p>");



    list countries = Providers::getCountries ((nil != Modem::provShortName && Modem::provShortName != "") ? "_custom" : nil);
    list provs = [];

    string country = "";
    any provider = nil;


    term contents =
	`HBox(
	    `HSpacing(),
	    `VBox(
		`HBox(
		    `HWeight (1,
			`SelectionBox(`id(`countries), `opt(`notify), _("&Country"), countries)
		    ),
		    `HSpacing(),
		    `HWeight (1,
			`ReplacePoint(`id(`providers_rep),
			`VSpacing (1))
		    )
		),
		`Left(`Label(`id(`homepage), `opt(`hstretch), "")),
		`Left(`Label(`id(`hotline), `opt(`hstretch),  "")),
		`PushButton(`id(`new), _("Ne&w"))
	    ),
	    `HSpacing()
	);

    Wizard::SetContents(caption, contents, helptext, true, true);
    UI::ChangeWidget (`id (`next), `Label, NextButtonLabel ());
    symbol ret = `countries;
    while (`next != ret && `back != ret && `abort != ret && `new != ret)
    {
	if (`countries == ret)
	{
	    //string prev = country;
	    country = UI::QueryWidget (`id (`countries), `CurrentItem);
	    provs = Providers::getProviders (country, type, Modem::provShortName);
	    UI::ReplaceWidget (`id (`providers_rep),
		    `SelectionBox (`id (`providers), `opt (`notify), _("&Provider"), provs));
	    ret = `providers;
	}
	if (`providers == ret)
	{
	    any prev = provider;
	    provider = UI::QueryWidget (`id (`providers), `CurrentItem);
	    if (is (provider, path) && ."--" == provider)
	    {
		provider = dividerHack (provs, prev);
		UI::ChangeWidget (`id (`providers), `CurrentItem, provider);
	    }
	    map p = Providers::getProvider (provider);
	    string tmp = lookup (p, "Homepage", nil);
	    tmp = ((nil == tmp || "" == tmp) ? "" : sformat (_("Home Page: %1"), tmp));
	    UI::ChangeWidget (`id (`homepage), `Value, tmp);
	    tmp = lookup (p, "Hotline", nil);
	    tmp = ((nil == tmp || "" == tmp) ? "" : sformat (_("Hot Line: %1"), tmp));
	    UI::ChangeWidget (`id (`hotline), `Value, tmp);
	}
	ret = UI::UserInput ();

	if (`abort == ret || `cancel == ret)
	{
	    ret = ReallyAbort () ? `abort : nil;
	}
    }
    if (`next == ret)
    {
	// do not do union with the old Providers::provider here because we
	// take completly new provider here.
	Providers::provider = Providers::getProvider (provider);
	Providers::editProvider (provider);
    }
    else if (`new == ret)
    {
	Providers::provider = $[];
	Providers::editProvider (nil);
    }
    return ret;
}
/**
 * Edit modem provider/create new provider.
 * @param edit add new provider or edit an existing?
 * @return symbol for wizard sequencer (`next, `back, `abort)
 */
global define symbol runEditModemProviderDialog (boolean edit) ``{
    string caption = _("Set parameters for Internet connection");

    string InfoText= getProviderInfoText ( Providers::provider );

    // fillup 'Modem' provider variables
    string provName = lookup(Providers::provider, "Provider", "");
    string provShortName = lookup(Providers::provider, "ShortName", "");
    string provUsername = lookup(Providers::provider, "Username", "");
    string provPassword = lookup(Providers::provider, "Password", "");
    boolean ask_pass = lookup(Providers::provider, "Ask Password", "0") == "1";
    string provPhone = lookup(Providers::provider, "Phone", "");

    term contents =
	`HBox (
	    `HSpacing (4),
	    `VBox (
		`TextEntry(`id(`ShortName), _("Name for &dialing"), provShortName),
		`TextEntry(`id(`Section), _("&Connection Name"), provName),
		`VSquash(
		    `HBox(
			`TextEntry(`id(`PhoneNumber),
			    _("P&hone number"),
			    filterchars (provPhone, "0123456789")
			),
			`Bottom(`PushButton(`id(`info), `opt(`disabled), _("&Info")))
		    )
		),
		`TextEntry(`id(`Username), _("&User name"), provUsername),
		`VSpacing(0.5),
		`Frame(_("Request for password"),
		    `HBox(
			`HSpacing(),
			`VBox(
			       `Left(`CheckBox(`id(`askpass), `opt(`notify), _("&Always ask me"), ask_pass)),
			       `Password(`id(`passwd), _("&Password"), provPassword)
			),
			`HSpacing()
		    )
		)
	    ),
	    `HSpacing(4)
	);

    Wizard::SetContents(caption, contents, getEditProviderHelp (true), true, true);
    UI::ChangeWidget (`id (`next), `Label, NextButtonLabel ());
    if (nil != InfoText && "" != InfoText)
    {
	UI::ChangeWidget (`id (`info), `Enabled, true);
    }
    if (ask_pass)
    {
	UI::ChangeWidget (`id (`passwd), `Enabled, true);
    }

    symbol ret = nil;
    while (`next != ret && `back != ret && `abort != ret)
    {
	ret = UI::UserInput ();
	if (`info == ret)
	{
	    UI::LongTextPopup (_("Provider info"), `RichText (InfoText), 43, 13);
	}
	else if (`askpass == ret)
	{
	    UI (``(ChangeWidget (`id (`passwd), `Enabled, !UI::QueryWidget (`id (`askpass), `Value))));
	}
	else if (`abort == ret || `cancel == ret)
	{
	    ret = ReallyAbort () ? `abort : nil;
	}
	else if (`next == ret)
	{	// validate data
	    ret = nil;
	    string name = UI::QueryWidget (`id (`Section), `Value);
	    string shortname = UI::QueryWidget (`id (`ShortName), `Value);
	    string phone = UI::QueryWidget (`id (`PhoneNumber), `Value);
	    string us = UI::QueryWidget (`id (`Username), `Value);
	    string pass = UI::QueryWidget (`id (`passwd), `Value);
	    ask_pass = UI::QueryWidget (`id (`askpass), `Value);
	    if ("" == shortname)
		UI (``{ MessagePopup (_("Name for dialing must not be empty.")); SetFocus (`id (`ShortName));});
	    else if (nil != findfirstof (shortname, " \t"))
	    {
		UI::MessagePopup (_("Name for dialing must not contain spaces."));
		UI::SetFocus (`id (`ShortName));
	    }
	    else if (shortname != lookup (Providers::provider, "ShortName", "") && !Providers::IsSectionUnique (shortname))
	    {
		UI::MessagePopup (_("Name %1 already exists."), shortname);
		UI::SetFocus (`id (`ShortName));
	    }
	    else if (name != lookup (Providers::provider, "Provider", "") && !Providers::IsProviderUnique (name))
	    {
		UI::MessagePopup (_("Connection Name %1 already exists."), name);
		UI::SetFocus (`id (`Section));
	    }
	    if (name == "")
	    {
		UI::MessagePopup (_("You have to fill connection name."));
		UI::SetFocus (`id (`Section));
	    }
	    else if ("" == phone)
	    {
		UI::MessagePopup (_("You have to fill phone number."));
		UI::SetFocus (`id (`PhoneNumber));
	    }
	    else if ("" == us)
	    {
		UI::MessagePopup (_("You have to fill user name."));
		UI::SetFocus (`id (`Username));
	    }
	    else if (!ask_pass && "" == pass)
	    {
		UI::MessagePopup (_("You have to fill password."));
		UI::SetFocus (`id (`passwd));
	    }
	    else if (filterchars (phone, "0123456789") != phone &&
		    !UI::YesNoPopup (_("You have entered some characters that are not numbers in the phone field.\n\nContinue?")))
	    {
		UI::SetFocus (`id (`PhoneNumber));
	    }
	    else
		ret = `next;

	    if(ret == `next) {
		Providers::provider = union(Providers::provider,
			$[	"Provider" : name,
			    "ShortName" : shortname,
			    "Username" : us,
			    "Password" : pass,
			    "Ask Password" : ask_pass ? "1" : "0",
			    "Password" : pass,
			    "Phone" : phone,
			]
		    );
	    }
	}
    }
    return ret;
}
/**
 * ISDN parameters.
 * @return symbol for wizard sequencer (`next, `back, `abort)
 */
global define symbol runEditIsdnProviderDialog () ``{
    string caption = _("Set parameters for Internet connection");

    string I4L_ENCAP = "syncppp";
    string InfoText = getProviderInfoText (Providers::provider);
    term contents =
	`VBox(
	    `VSpacing(1),
	    `HBox(
		`HSpacing(4),
		`VBox(
		    `HVSquash(
			`Frame(_("ISDN type"),
			    `RadioButtonGroup(`id(`Encapsulation),
				`HBox(
				    `HSpacing(0.1),
				    `VBox(
					`VSpacing(0.1),
					`Left(`RadioButton(`id(`syncppp),
					    `opt(`notify),
					    _("ISDN S&yncPPP"),
					    I4L_ENCAP=="syncppp")
					),
					`Left(`RadioButton(`id(`rawip),
					    `opt(`notify),
					    _("ISDN Ra&wIP"),
					    I4L_ENCAP!="syncppp")
					),
					`VSpacing(0.1)
				    ),
				    `HSpacing(0.1)
				)
			    )
			)
		    ),
		    `TextEntry(`id(`Section), _("&Connection Name"),
			lookup (Providers::provider, "ShortName", "")
		    ),
		    `VSpacing(0.3),
		    `VSquash(
			`HBox(
			    `TextEntry(`id(`PhoneNumber),
				_("&Phone number"),
				filterchars (lookup (Providers::provider, "Phone", ""), "0123456789")
			    ),
			    `Bottom(`PushButton(`id(`Info), `opt(`disabled), _("&Info")))
			)
		    ),
		    `VSpacing(0.3),
		    `TextEntry(`id(`Username), _("&User name"), lookup (Providers::provider, "Username", "")),
		    `VSpacing(0.3),
		    `Password(`id(`Passwd), _("Pa&ssword"), lookup (Providers::provider, "Password", ""))
		),
		`HSpacing(4)
	    ),
	    `VSpacing(2)
	);

    Wizard::SetContents(caption, contents, getEditProviderHelp (false), true, true);
    UI::ChangeWidget (`id (`next), `Label, NextButtonLabel ());
    if (nil != InfoText && "" != InfoText)
    {
	UI::ChangeWidget (`id (`Info), `Enabled, true);
    }
    if ("rawip" == I4L_ENCAP)
    {
	UI (``{ ChangeWidget (`id (`Username), `Enabled, false);
		ChangeWidget (`id (`Passwd), `Enabled, false); });
    }
    symbol ret = nil;
    while (`next != ret && `back != ret && `abort != ret)
    {
	ret = UI::UserInput ();
	if (`Info == ret)
	{
	    UI::LongTextPopup (_("Provider info"), `RichText (InfoText), 43, 13);
	}
	else if (`syncppp == ret || `rawip == ret)
	{
	    UI (``{ ChangeWidget (`id (`Username), `Enabled, QueryWidget (`id (`syncppp), `Value));
		    ChangeWidget (`id (`Passwd),   `Enabled, QueryWidget (`id (`syncppp), `Value)); });
	}
	else if (`next == ret)
	{	// validate data
	    ret = nil;
	    string name = UI::QueryWidget (`id (`Section), `Value);
	    string phone = UI::QueryWidget (`id (`PhoneNumber), `Value);
	    string us = UI::QueryWidget (`id (`Username), `Value);
	    string pass = UI::QueryWidget (`id (`Passwd), `Value);
	    boolean i4l_encap = UI::QueryWidget (`id (`syncppp), `Value); //true: "syncppp", false: "rawip"
	    if (name != lookup (Providers::provider, "Provider", "") && !wvdialIsProviderUnique (name))
	    {
		UI::MessagePopup (_("Connection Name %1 already exists."), name);
		UI::SetFocus (`id (`Section));
	    }
	    if (name == "")
	    {
		UI::MessagePopup (_("You have to fill connection name."));
		UI::SetFocus (`id (`Section));
	    }
	    else if ("" == phone)
	    {
		UI::MessagePopup (_("You have to fill phone number."));
		UI::SetFocus (`id (`PhoneNumber));
	    }
	    else if (i4l_encap && "" == us)
	    {
		UI::MessagePopup (_("You have to fill user name."));
		UI::SetFocus (`id (`Username));
	    }
	    else if (i4l_encap && "" == pass)
	    {
		UI::MessagePopup (_("You have to fill password."));
		UI::SetFocus (`id (`Passwd));
	    }
	    else if (filterchars (phone, "0123456789") != phone &&
		    !UI::YesNoPopup (_("You have entered some characters that are not numbers in the phone field.\n\nContinue?")))
	    {
		UI::SetFocus (`id (`PhoneNumber));
	    }
	    else
		ret = `next;
	    if (`next == ret)
	    {
		/*
		 * Settings to save: (FIXME)
		 */
		Providers::provider = union (Providers::provider, $[
		     "Provider": name,
		     //"ShortName" is missing in this dialog, is it necessary to have?
		     "Username" : us,  // May be unused. May we save it anyway?
		     "Password" : pass,// May be unused. May we save it anyway?
		     "Phone" : phone,
		     "I4L_ENCAP" : i4l_encap ? "syncppp" : "rawip",
		     //Provider ISDN::netdev = i4l_encap ? "ippp" : "isdn", //original isdn sets this too.
		    ]);
		//FIXME: this is an ISDN. Does anybody know anything about
		//it?
	    }
	}
	else if (`abort == ret || `cancel == ret)
	{
	    ret = ReallyAbort () ? `abort : nil;
	}
    }

    return ret;
}

/* EOF */
}
