/**
 * File:	include/network/detection.ycp
 * Package:	Network configuration
 * Summary:	Runtime routines
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

textdomain "network";

/**
 * Load all network card modules
 * return true on success
 */
global define boolean LoadNetModules() ``{

    /* Get all network cards and modules */
    list cards = SCR::Read(.probe.netcard);
    list modules = maplist(map card, cards, ``{
	list mods = lookup(select(card["drivers"]:[], 0, $[]), "modules", []);
	string mod = select(select(mods, 0, []), 0, "");
	y2debug("mod=%1", mod);
	return mod;
    });

    /* Load all network card modules */
    modules = toset(modules);
    y2debug("modules=%1", modules);
    maplist(string mod, modules, ``{
	y2debug("Loading module %1 ...", mod);
	SCR::Execute(.target.bash, sformat("/sbin/modprobe %1 2>&1", mod));
    });

    /* Set up network interfaces */
    integer i = 0;
    integer ifaces = size(modules);
    if(size(cards) > size(modules)) ifaces = size(cards);
    y2debug("ifaces=%1", ifaces);
    while(i < ifaces) {
	y2debug("Giving up interface %1 ...", i);
	SCR::Execute(.target.bash, sformat("/sbin/ifconfig eth%1 up 2>&1", i));
	i = i + 1;
    }

    return true;
}

/**
 * Start detection
 * @return true if success
 */
global define boolean StartDetection() ``{

    /* configure eth0 */
    // FIXME (only if not already running!)

    /* start DHCP detection */
    // FIXME: use .target.tmpdir
    SCR::Execute(.target.bash, "rm -f /var/tmp/dhcpcd-eth0.*");
    SCR::Execute(.target.bash, "dhcpcd -Td -t 10 -NYRG -L /var/tmp eth0");

    return true;
}

/**
 * Finish detection
 * @return true if success
 */
global define boolean FinishDetection() ``{

    /* finish DHCP detection */
    SCR::Execute(.target.bash, "kill `cat /var/tmp/dhcpcd-$device.pid`");
    // FIXME Read the data

    /* shut down eth0 */
    // FIXME (only if it was not already set up!)

    return true;
}

/* EOF */
}
