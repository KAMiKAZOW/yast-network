/**
 * File:
 *   include/network/summary.ycp
 *
 * Package:
 *   Configuration of network cards
 *
 * Summary:
 *   Summary and overview functions
 *
 * Authors:
 *   Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 * All config settings are stored in a global variable CONFIG.
 * All hardware settings are stored in a global variable HARDWARE.
 * Deleted devices are in the global list DELETED.
 */

{

textdomain "network";
include "network/routines.ycp";
import "Summary";

/**
 * Build textual summary
 * @param split split configured and unconfigured?
 * @return [ configured, unconfigured ] if split, [ summary ] otherwise
 */
global define list BuildSummary(boolean split) ``{

    list uniques = [];
    list configured = [];
    list unconfigured = [];

    /* build a list of configured devices */
    maplist(`devtype, `devsmap, CONFIG, ``{
	maplist(`devnum, `devmap, devsmap, ``{
	    string unq = lookup(devmap, "UNIQUE", "");
	    string hwname = CheckEmptyName(devtype, HardwareName(unq));
	    string status = DeviceStatus(devtype, devnum, devmap);
	    change(configured, Summary::Device(hwname, status));
	    change(uniques, unq);
	});
    });

    y2debug("uniques(%1)", uniques);
    /* build a list of unconfigured devices */
    maplist(`h, HARDWARE, ``{
	string unq = lookup(h, "unique", "");
	string hwtype = ControllerType(h);
	string hwname = CheckEmptyName(hwtype, lookup(h, "name", ""));
	y2debug("unq(%1)", unq);
	if(!contains(uniques, unq)) {
	    if(split)
		change(unconfigured, h);
	    else
		change(configured, Summary::Device(hwname, Summary::NotConfigured()));
	}
    });

    y2debug("configured=%1",configured);
    y2debug("unconfigured=%1",unconfigured);

    /* create a summary text */
    string summary = Summary::DevicesList(configured);

    /* if not split -> summary is finished */
    if(!split) return [ summary ];

    /* add headers */
    if(size(configured) > 0)
	summary = Summary::AddHeader("", _("Already configured devices:")) + summary;
    else
	summary = Summary::AddHeader("", _("Nothing is configured."));

    /* create a table of unconfigured devices */
    integer selected = lookup(select(unconfigured, 0, $[]), "num", 0);
    list devs = hwlist2items(unconfigured, selected);
    if(size(devs)==0)
	change(devs, `item(`id(`other), _("Other (not detected)"), true));
    else
	change(devs, `item(`id(`other), _("Other (not detected)")));

    return [ summary, devs ];

}

/**
 * Fill in sensible string if the name is empty
 * @param devtype device type
 * @param hwname device name
 * @return hwname if not empty, "Unknown device" otherwise
 */
global define string CheckEmptyName(string devtype, string hwname) ``{
    if(hwname != nil && hwname != "") return hwname;

    if(regexpmatch(devtype, "modem|ppp"))
	return _("Unknown modem");
    else if(regexpmatch(devtype, "isdn"))
	return _("Unknown ISDN card");
    else if(regexpmatch(devtype, "eth|tr|fddi"))
	return _("Unknown network card");
    else {
	y2error("Unknown type: %1", devtype);
	return _("Unknown network device");
    }
}

/**
 * Return a hardware name for devices with given unique number
 * @param unq unique number
 * @return hardware name
 */
global define string HardwareName(string unq) ``{
    string hwname = "";
    if(unq != "")
	maplist(`h, HARDWARE, ``{
	    if(lookup(h, "unique", "") == unq)
		hwname = lookup(h, "name", "");
	});
    return hwname;
}

/**
 * Return the textual device status
 * @param devtype device type
 * @param devnum device number
 * @param devmap map with devices settings
 * @return text wth device status
 */
global define string DeviceStatus(string devtype, string devnum, map devmap) ``{
    string dev = devtype + devnum;
    if(devtype == "eth" || devtype == "tr") {
	string proto = lookup(devmap, "BOOTPROTO", "static");
	string addr = lookup(devmap, "IPADDR", "");

	if(proto == "" || proto == "static" || proto == "none")
	    return sformat(_("Configured as %1 with address %2"), dev, addr);
	else
	    return sformat(_("Configured as %1 with %2"), dev, toupper(proto));
    }
    else if(devtype == "ppp")
	return sformat(_("Configured as %1"), dev);
    else if(devtype == "isdn")
	return sformat(_("Configured as %1"), dev);
    else {
	y2error("unknown type: %1", devtype);
	return sformat(_("Configured as %1"), dev);
    }
}

/**
 * Check if device is configured
 * @param type device type
 * @param unique device unique number
 * @return device if configured, empty string if not
 * @example IsConfigured("eth", "aazjka9yd") -&gt; "eth3"
 */
/*
global define string IsConfigured(string type, string unique) ``{

    map devmap = lookup(CONFIG, type, $[]);
    map dev = filter(`k, `v, devmap, ``{
	//y2debug("UN(%1,%2) = %3,%4",lookup(v, "UNIQUE", ""),unique,k,v);
	return lookup(v, "UNIQUE", "") == unique;
    });

    if(dev == nil && dev == $[])
	return "";

    string n = select(mapkeys(dev), 0, "");
    if(n == "") return "";

    map onedev = lookup(dev, n, $[]);
    string proto = lookup(onedev, "BOOTPROTO", "static");

    return ProtoStatus(type+n, proto, lookup(onedev, "IPADDR", ""));
}

/**
 */
/*
global define OtherConfigured(list uniques) ``{
    list ret = [];
    maplist(`type, `devs, CONFIG, ``{
	y2debug("type=%1",type);
	maplist(`dev, `devmap, devs, ``{
	    if(!contains(uniques, lookup(devmap, "UNIQUE", ""))) {
		string proto = lookup(devmap, "BOOTPROTO", "static");
		string ipadd = lookup(devmap, "IPADDR", "");
		change(ret, ProtoStatus(type+dev,proto,ipadd));
	    }
	    else
		y2debug("type+dev=%1+%2",type,dev);
	});
    });
    return ret;
}

/**
 * Return textual device type
 * @param type device type
 * @return textual form of device type
 * @example DeviceType("eth") -> "Ethernet"
 */
global define string DeviceType(string type) ``{
    if(type == "eth") return "Ethernet";
    if(type == "tr") return "Token-Ring";
    if(type == "fddi") return "FDDI";
    if(type == "isdn") return "ISDN";
    if(type == "ppp") return "Modem";
    return type;
}

/**
 * Create overview table contents
 * @param type type of devices in the table
 * @return table items
 */
global define list BuildOverview(string type) ``{
    map devmap = lookup(CONFIG, type, $[]);

    list overview = maplist(`k, `v, devmap, ``{
	string dev = sformat("%1%2", type, k);
	string ip = lookup(v, "BOOTPROTO", "static");
	if(ip == "" || ip == "static" || ip == "none") ip = lookup(v, "IPADDR", "");
	else ip = toupper(ip);
	if(type == "eth" || type == "tr")
	    return `item(`id(dev), k, DeviceType(type), dev, /*"active?",*/ ip/*, "?", "?"*/);
	else
	    return `item(`id(dev), k, DeviceType(type), dev /*, "active?", ip, "?", "?"*/);
    });

    y2debug("overview=%1",overview);
    return overview;
}

/* EOF */
}
