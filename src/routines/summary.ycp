/**
 * File:
 *   include/network/summary.ycp
 *
 * Package:
 *   Configuration of network cards
 *
 * Summary:
 *   Summary and overview functions
 *
 * Authors:
 *   Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 * All config settings are stored in a global variable CONFIG.
 * All hardware settings are stored in a global variable HARDWARE.
 * Deleted devices are in the global list DELETED.
 */

{

textdomain "network";
include "network/routines.ycp";
import "Summary";

/**
 * Build textual summary
 * @param split split configured and unconfigured?
 * @return [ configured, unconfigured ] if split, [ summary ] otherwise
 */
global define list BuildSummary(boolean split) ``{

    list uniques = [];
    list configured = [];
    list unconfigured = [];

    /* build a list of configured devices */
    maplist(`devtype, `devsmap, CONFIG, ``{
	maplist(`devnum, `devmap, devsmap, ``{

	    /* main device summary */
	    string unq = lookup(devmap, "UNIQUE", "");
	    string hwname = CheckEmptyName(devtype, HardwareName(unq));
	    string status = DeviceStatus(devtype, devnum, devmap);
	    change(configured, Summary::Device(hwname, status));
	    change(uniques, unq);

	    /* aliases summary */
	    map aliases = lookup(devmap, "_aliases", $[]);
	    if(aliases != $[])
		maplist(`anum, `amap, aliases, ``{
		    //hwname = CheckEmptyName(devtype, HardwareName(unq));
		    hwname = _("Virtual network interface");
		    status = DeviceStatus(devtype, devnum + ":" + anum, amap);
		    change(configured, Summary::Device(hwname, status));
		});

	});
    });

    y2debug("uniques(%1)", uniques);
    /* build a list of unconfigured devices */
    maplist(`h, HARDWARE, ``{
	string unq = lookup(h, "unique", "");
	string hwtype = ControllerType(h);
	string hwname = CheckEmptyName(hwtype, lookup(h, "name", ""));
	y2debug("unq(%1)", unq);
	if(!contains(uniques, unq)) {
	    if(split)
		change(unconfigured, h);
	    else
		change(configured, Summary::Device(hwname, Summary::NotConfigured()));
	}
    });

    y2debug("configured=%1",configured);
    y2debug("unconfigured=%1",unconfigured);

    /* create a summary text */
    string summary = Summary::DevicesList(configured);

    /* if not split -> summary is finished */
    if(!split) return [ summary ];

    /* add headers */
    if(size(configured) > 0)
	summary = Summary::AddHeader("", _("Already configured devices:")) + summary;
    else
	summary = Summary::AddHeader("", _("Nothing is configured."));

    /* create a table of unconfigured devices */
    integer selected = lookup(select(unconfigured, 0, $[]), "num", 0);
    list devs = hwlist2items(unconfigured, selected);
    if(size(devs)==0)
	change(devs, `item(`id(`other), _("Other (not detected)"), true));
    else
	change(devs, `item(`id(`other), _("Other (not detected)")));

    return [ summary, devs ];

}

/**
 * Fill in sensible string if the name is empty
 * @param devtype device type
 * @param hwname device name
 * @return hwname if not empty, "Unknown device" otherwise
 */
global define string CheckEmptyName(string devtype, string hwname) ``{
    if(hwname != nil && hwname != "") return hwname;

    if(regexpmatch(devtype, "(isdn|ippp)-pcmcia-"))
        return _("Unknown PCMCIA ISDN connection");
    else if(regexpmatch(devtype, "(isdn|ippp)-usb-"))
        return _("Unknown USB ISDN connection");
    else if(regexpmatch(devtype, "isdn|ippp"))
        return _("Unknown ISDN connection");
    else if(regexpmatch(devtype, "(modem|ppp)-pcmcia-"))
	return _("Unknown PCMCIA modem");
    else if(regexpmatch(devtype, "(modem|ppp)-usb-"))
	return _("Unknown USB modem");
    else if(regexpmatch(devtype, "modem|ppp"))
	return _("Unknown modem");
    else if(regexpmatch(devtype, "contr-pcmcia-"))
	return _("Unknown PCMCIA ISDN card");
    else if(regexpmatch(devtype, "contr-usb-"))
	return _("Unknown USB ISDN card");
    else if(regexpmatch(devtype, "contr"))
	return _("Unknown ISDN card");
    else if(regexpmatch(devtype, "net"))
	return _("ISDN connection");
    else if(regexpmatch(devtype, "(eth|tr|fddi)-pcmcia-"))
	return _("Unknown PCMCIA network card");
    else if(regexpmatch(devtype, "(eth|tr|fddi)-usb-"))
	return _("Unknown USB network card");
    else if(regexpmatch(devtype, "eth|tr|fddi"))
	return _("Unknown network card");
    else if(regexpmatch(devtype, "dummy"))
	return _("Dummy network device");
    else if(regexpmatch(devtype, "lo"))
	return _("Loopback device");
    else {
	y2error("Unknown type: %1", devtype);
	return _("Unknown network device");
    }
}

/**
 * Return a hardware name for devices with given unique number
 * @param unq unique number
 * @return hardware name
 */
global define string HardwareName(string unq) ``{
    string hwname = "";
    if(unq != "")
	maplist(`h, HARDWARE, ``{
	    if(lookup(h, "unique", "") == unq)
		hwname = lookup(h, "name", "");
	});
    return hwname;
}

/**
 * Return the textual device status
 * @param devtype device type
 * @param devnum device number
 * @param devmap map with devices settings
 * @return text wth device status
 */
global define string DeviceStatus(string devtype, string devnum, map devmap) ``{
    string dev = devtype + devnum;

    /* modem */
    if(devtype == "ppp" || devtype == "modem") {
	string prov = devmap["PROVIDER_NAME"]:"";
	if(prov == "" || prov == nil)
	    prov = devmap["PROVIDER"]:"";

	if(prov == "" || prov == nil)
	    return sformat(_("Configured as %1"), dev);
	else
	    return sformat(_("Configured as %1 with provider %2"), dev, prov);
    }
    /* isdn stuff */
    else if(devtype == "contr")
	return sformat(_("Configured as %1"), dev);
    else if(devtype == "net") {
        // proto: connection protocol (syncppp | rawip)
	string proto    = lookup(devmap, "PROTOCOL", "unknown protocol");
	// provider: name of the provider
	string provider = lookup(devmap, "PROVIDER", "unknown");
	// example: ISDN Connection to Arcor with syncppp on net0
	return sformat(_("to %1 with %2 on %3"), provider, proto, dev);
    }
    /* treat the rest as a network card */
    else {
	if(!regexpmatch(devtype, "lo|dummy|eth|tr|fddi"))
	    y2error("Unknown type: %1", devtype);

	string proto = lookup(devmap, "BOOTPROTO", "static");
	if(proto == "" || proto == "static" || proto == "none" || proto == nil) {
	    string addr = lookup(devmap, "IPADDR", "");
	    if(addr == "" || addr == nil)
		return sformat(_("Configured as %1"), dev);
	    else
		return sformat(_("Configured as %1 with address %2"), dev, addr);
	}
	else
	    return sformat(_("Configured as %1 with %2"), dev, toupper(proto));
    }
}

/**
 * Return textual device type
 * @param type device type
 * @return textual form of device type
 * @example DeviceType("eth") -> "Ethernet"
 */
global define string DeviceType(string type) ``{
    if(issubstring(type, ":")) return _("Virtual interface");
    if(regexpmatch(type, "lo")) return _("Loopback");
    if(regexpmatch(type, "dummy")) return _("Dummy");
    if(regexpmatch(type, "eth")) return _("Ethernet");
    if(regexpmatch(type, "fddi")) return _("FDDI");
    if(regexpmatch(type, "contr")) return _("ISDN");
    if(regexpmatch(type, "net")) return _("ISDN");
    if(regexpmatch(type, "ippp")) return _("ISDN");
    if(regexpmatch(type, "isdn")) return _("ISDN");
    if(regexpmatch(type, "ppp")) return _("Modem");
    if(regexpmatch(type, "tr")) return _("Token-Ring");
    y2error("Unknown type: %1", type);
    return type;
}

/**
 * Return the device protocol or IP address in case of static config
 * @param devmap device map
 * @return textual device protocol
 */
global define string DeviceProtocol(map devmap) ``{
    string ip = lookup(devmap, "BOOTPROTO", "static");
    if(ip == nil || ip == "" || ip == "static" || ip == "none")
	ip = lookup(devmap, "IPADDR", "");
    else ip = toupper(ip);
    return ip;
}

/**
 * Create overview table contents
 * @return table items
 */
global define list BuildOverview() ``{
    list overview = [];

    maplist(`type, `devmap, CONFIG, ``{
	maplist(`k, `v, devmap, ``{
	    term item = nil;
	    string dev = sformat("%1%2", type, k);
	    string ip = DeviceProtocol(v);

	    /* modem */
	    if(type == "modem" || type == "ppp")
		item = `item(`id(dev), k, DeviceType(type), dev, v["PROVIDER_NAME"]:_("Unknown provider"));
	    /* ISDN stuff */
	    else if (type == "contr") {
		string cname = lookup(v, "NAME", "unknown");
		item = `item(`id(dev), k, DeviceType(type), dev, cname /*, "active?", ip, "?", "?"*/);
	    }
	    /* ISDN stuff */
	    else if (type == "net") {
		string cname = lookup(v, "PROVIDER", "unknown");
		string rip   = lookup(v, "PTPADDR", "none");
		string proto = lookup(v, "PROTOCOL", "unknown");
		item = `item(`id(dev), k, proto, cname, ip, rip);
	    }
	    /* other known types */
	    else if(regexpmatch(type, "lo|dummy|eth|tr|fddi"))
		item = `item(`id(dev), k, DeviceType(type), dev, /*"active?",*/ ip/*, "?", "?"*/);
	    /* unknown type */
	    else {
		y2error("Unknown type: %1", type);
		item = `item(`id(dev), k, DeviceType(type), dev, /*"active?",*/ ip/*, "?", "?"*/);
	    }
	    overview = add(overview, item);

	    /* aliases summary */
	    map aliases = lookup(v, "_aliases", $[]);
	    if(aliases != $[])
		maplist(`anum, `amap, aliases, ``{
		    //hwname = CheckEmptyName(devtype, HardwareName(unq));
		    dev = sformat("%1:%2", dev, anum);
		    ip = DeviceProtocol(amap);
		    item = `item(`id(dev), k + ":" + anum, DeviceType(dev), dev, ip);
		    overview = add(overview, item);
		});

	});
    });

    y2debug("overview=%1",overview);
    return overview;
}

/* EOF */
}
