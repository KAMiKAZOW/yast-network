/**
 * File:	include/network/config.ycp
 * Package:	Configuration of network cards
 * Summary:	Reading functions
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 * All config settings are stored in a global variable CONFIG.
 * Deleted devices are in the global list DELETED.
 */

{

textdomain "network";
include "network/routines.ycp";

/**
 * Read CONFIG from files
 * @param devregex regular expression for the device type
 * @return true if sucess
 * @example ReadConfig("eth|tr");
 */
global define boolean ReadConfig(string devregex) ``{

    CONFIG = $[];

    /* preparation */
    list allfiles = SCR::Dir(.network.section);
    list devices = filter(`file, allfiles, ``(!regexpmatch(file, "[\.~]")));
    y2debug("devices=%1", devices);

    devices = filter(`d, devices, ``(regexpmatch(d, "[a-z][a-z-]*[0-9]+(:[0-9]+)?")));
    y2debug("devices=%1", devices);

    if(devregex != nil && devregex != "") {
	devices = filter(`file, devices, ``(regexpmatch(file, "^" + devregex + "[0-9]")));
	y2debug("devices=%1", devices);
    }

    list aliases = filter(`d, devices, ``(find(d, ":") != -1));
    list maindevs = filter(`d, devices, ``(find(d, ":") == -1));
    y2debug("maindevs=%1", maindevs);

    /* read main devices */
    maplist(`d, maindevs, ``{
	string devtype = device_type(d);
	if(devtype == "lo") return;

	string devnum = sformat("%1", device_num(d));
	y2debug("devnum=%1", devnum);

	map dev = lookup(CONFIG, devtype, $[]);
	if(haskey(dev, devnum)) {
	    y2error("device already present: %1", devnum);
	    return;
	}

	string pth = ".network.value.\"" + devtype + devnum + "\"";
	list values = SCR::Dir(topath(pth));
	map config = listmap(`val, values, ``{
	    string item = SCR::Read(topath(pth + "." + val));
	    if(item!=nil) return [ val, item ];
	});

	change(dev, devnum, config);
	change(CONFIG, devtype, dev);
    });

    y2debug("CONFIG=%1",CONFIG);

    /* read aliases */
    /* FIXME
    maplist(`d, aliases, ``{
	string devtype = device_type(d);
	if(devtype == "lo") return;

	string devnum = sformat("%1", device_num(d));
	string aliasnum = sformat("%1", device_alias(d));
	y2debug("devnum=%1(%2)",devnum,aliasnum);

	map dev = lookup(CONFIG, devtype, $[]);
	if(!haskey(dev, devnum)) {
	    y2error("main device missing: %1", devnum);
	    return;
	}

	map config = lookup(dev, devnum, $[]);
	map aliases = lookup(config, "_aliases", $[]);
	if(haskey(aliases, aliasnum)) {
	    y2error("alias already present: %1", aliasnum);
	    return;
	}

	string pth = ".network.value.\"" + devtype + devnum + ":" + aliasnum + "\"";
	list values = SCR::Dir(topath(pth));
	map aliasconfig = listmap(`v, values, ``{
	    string item = SCR::Read(topath(pth+"."+v));
	    if(item!=nil) return [ v, item ];
	});

	change(aliases, aliasnum, aliasconfig);
	change(config, "_aliases", aliases);
	change(dev, devnum, config);
	change(CONFIG, devtype, dev);
    });
    */

    y2debug("CONFIG=%1",CONFIG);
    return true;
}

/**
 * Write CONFIG to files
 * @return true if success
 */
global define boolean WriteConfig() ``{

    y2debug("CONFIG=%1",CONFIG);

    /* remove deleted devices */
    maplist(`d, DELETED, ``{
	/* delete config file */
	path p = topath(".network.section.\"" + d + "\"");
	y2debug("deleting: %1", p);
	SCR::Write(p, nil);
	/* delete modules.conf entry */
	SCR::Write(.modules.alias, nil, d);
	SCR::Write(.modules.options, nil, d);
	y2debug("Removing: %1", d);
	SCR::Execute(.target.bash, "/sbin/rmmod " + d);
    });
    DELETED = [];

    /* write all devices */
    maplist(`typ, `devsmap, CONFIG, ``{
	maplist(`num, `devmap, devsmap, ``{
	    /* write sysconfig */
	    string dev = typ + num;
	    string p = ".network.value.\"" + dev + "\".";

	    /* write all keys to config */
	    maplist(`k, mapkeys(devmap), ``{
		if(k == "module" || k == "options") return;
		SCR::Write(topath(p+k), lookup(devmap, k, ""));
	    });

	    /* write modules.conf */
	    string mod = lookup(devmap, "module", "");
	    string opts = lookup(devmap, "options", "");
	    list opts_list = filter(string s, splitstring(opts, " "), ``(s != ""));
	    map opts_map = listmap(string opt, opts_list, ``{
		list tok = splitstring(opt, "=");
		return [ tok[0]:"?", tok[1]:"" ];
	    });

	    if(mod != nil && mod != "")
		SCR::Write(.modules.alias, mod, dev);
	    if(size(opts_map) > 0)
		SCR::Write(.modules.options, opts_map, dev);

	    /* update libhd unique number */
	    string unq = lookup(devmap, "UNIQUE", "");
	    if(unq != "") SCR::Write(.probe.status.configured, unq, `yes);
	});
    });

    /* finish him */
    SCR::Write(.network, nil);
    SCR::Write(.modules, nil);

    /* ugly PCMCIA hackery */
    list ugly = [ "eth-pcmcia", "eth-usb", "tr-pcmcia", "tr-usb" ];
    maplist(`u, ugly, ``{
	string uu = u + "-";
	string uu2 = "/etc/sysconfig/network/ifcfg-" + uu;
	string uu2x = "/etc/sysconfig/network/ifcfg-" + u;
	y2debug("uu2=%1",uu2);
	if((SCR::Read(.target.size, uu2x) > 0) && (SCR::Read(.target.symlink, uu2x) == nil))
	    return;
	list uu1 = mapkeys(CONFIG);
	y2debug("uu1=%1",uu1);
	if(contains(uu1, uu)) {
	    list uu3 = mapkeys(lookup(CONFIG, uu, $[]));
	    y2debug("uu3=%1",uu3);
	    if(size(uu3) == 1) {
		string uu4 = select(uu3, 0, "0");
		SCR::Execute(.target.symlink, uu2+uu4, uu2x);
	    }
	    else
		SCR::Execute(.target.remove, uu2x);
	}
	else
	    SCR::Execute(.target.remove, uu2x);
    });

    /* FIXME: move it somewhere else */
    /* /dev/modem symlink */
    if(contains(mapkeys(CONFIG), "ppp")) {
	list ml = mapkeys(lookup(CONFIG, "ppp", $[]));
	string ms = select(ml, 0, "0");
	map mm = lookup(lookup(CONFIG, "ppp", $[]), ms, $[]);
	string mdev = lookup(mm, "MODEM_DEVICE", "");
	if(mdev != "" && mdev != "/dev/modem")
	    SCR::Execute(.target.symlink, mdev, "/dev/modem");
    }

    return true;
}

/**
 * Compute free devices
 * @param type device type
 * @param num how many free devices return
 * @return num of free devices
 * @example GetFreeDevices("eth", 2) -&gt; [ 1, 2 ]
 */
global define list GetFreeDevices(string type, integer num) ``{
    y2debug("CONFIG=%1",CONFIG);
    y2debug("type,num=%1,%2",type,num);
    y2debug("--%1",lookup(CONFIG, type, $[]));
    list curdevs = mapkeys(lookup(CONFIG, type, $[]));
    list numdevs = maplist(`l, curdevs, ``(tointeger(l)));
    y2debug("curdevs=%1",curdevs);
    y2debug("numdevs=%1",numdevs);

    integer i = 0;
    integer count = 0;
    list ret = [];

    while(count < num) {
	if(!contains(numdevs, i)) {
	    change(ret, i); //sformat("%1", i));
	    count = count + 1;
	}
	i = i + 1;
    }

    y2debug("Free devices=%1",ret);
    return ret;
}

/**
 * Return free device
 * @param type device type
 * @return free device
 * @example GetFreeDevice("eth") -&gt; 1
 */
global define integer GetFreeDevice(string type) ``{
    integer ret = select(GetFreeDevices(type, 1), 0, -1);
    if(ret < 0) y2error("Free device location error: %1", ret);
    y2debug("Free device=%1",ret);
    return ret;
}

/**
 * Update CONFIG map
 * @param type device type
 * @param device device number
 * @param newdev new device map
 * @param check if check if device already exists
 * @return true if success
 */
global define boolean ConfigAddEdit(string type, integer device, map newdev, boolean check) ``{
    y2debug("CONFIG=%1",CONFIG);
    map devmap = lookup(CONFIG, type, $[]);
    string dev = sformat("%1",device);

    if(check && haskey(devmap, dev)) {
	y2error("Key already present: %1(%2)", dev, type);
	return false;
    }
    change(devmap, dev, newdev);
    change(CONFIG, type, devmap);
    y2debug("CONFIG=%1",CONFIG);
    return true;
}

/**
 * Delete a device from CONFIG map
 * @param type device type
 * @param device device number
 * @return true if success
 */
global define boolean ConfigDelete(string type, integer device) ``{
    y2debug("CONFIG=%1",CONFIG);
    map devmap = lookup(CONFIG, type, $[]);
    string dev = sformat("%1",device);

    if(!haskey(devmap, dev)) {
	y2error("Key not found: %1(%2)", dev, type);
	return false;
    }
    //remove(devmap, dev);
    devmap = remove(devmap, dev);
    change(CONFIG, type, devmap);
    y2debug("CONFIG=%1",CONFIG);
    return true;
}

/**
 * Locate devices of the given type and value
 * @param key device key
 * @param val device value
 * @return list of devices with key=val
 */
global define list LocateDevices(string key, string val) ``{
    list ret = [];
    maplist(`typ, `devsmap, CONFIG, ``{
	maplist(`num, `devmap, devsmap, ``{
	    //if(devmap["BOOTPROTO"]:"" == "dhcp") ret = true;
	    if(devmap[key]:"" == val) ret = add(ret, typ+num);
	});
    });

    return ret;
}

/* EOF */
}
