/**
 * File:
 *   include/network/config.ycp
 *
 * Package:
 *   Configuration of network cards
 *
 * Summary:
 *   Reading functions
 *
 * Authors:
 *   Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 * All config settings are stored in a global variable CONFIG.
 * Deleted devices are in the global list DELETED.
 */

{

textdomain "network";
include "network/routines.ycp";

/**
 * Read CONFIG from files
 * @param devregex regular expression for the device type
 * @return true if sucess
 * @example ReadConfig("eth|tr");
 */
global define boolean ReadConfig(string devregex) ``{

    CONFIG = $[];
    string sysconfig = "/etc/sysconfig/network";

    list allfiles = SCR::Dir(.network.section);
    list devices = filter(`file, allfiles, ``(!regexpmatch(file, "[\.~]")));
    y2debug("devices=%1", devices);

    if(devregex != nil && devregex != "") {
	devices = filter(`file, devices, ``(regexpmatch(file, devregex)));
	y2debug("devices=%1", devices);
    }

    list aliases = filter(`d, devices, ``(find(d, ":") != -1));
    list maindevs = filter(`d, devices, ``(find(d, ":") == -1));
    y2debug("maindevs=%1", maindevs);

    /* read main devices */
    maplist(`d, maindevs, ``{
	string devtype = regexpsub(d, "^.*ifcfg-([a-z]+)[^a-z]*$", "\\1");
	if(devtype == "lo") return;

	string devnum = regexpsub(d, "^.*ifcfg-[a-z]+([0-9]+)", "\\1");
	y2debug("devnum=%1",devnum);

	map dev = lookup(CONFIG, devtype, $[]);
	if(haskey(dev, devnum)) {
	    y2error("device already present: %1", devnum);
	    return;
	}

	string pth = ".network.value.\"" + sysconfig + "/ifcfg-"+devtype+devnum+"\"";
	list values = SCR::Dir(topath(pth));
	map config = listmap(`val, values, ``{
	    string item = SCR::Read(topath(pth + "." + val));
	    if(item!=nil) return [ val, item ];
	});

	change(dev, devnum, config);
	change(CONFIG, devtype, dev);
    });

    y2debug("CONFIG=%1",CONFIG);

    /* read aliases */
    /* -> not supported yet
    maplist(`d, aliases, ``{
	string devtype = regexpsub(d, "^.*ifcfg-([a-z]+)[^a-z]*$", "\\1");
	if(devtype == "lo") return;

	string devnum = regexpsub(d, "^.*ifcfg-[a-z]+([0-9]+)", "\\1");
	string aliasnum = regexpsub(d, "^.*ifcfg-[a-z]+[0-9]+:([0-9]+)[^0-9]*$", "\\1");
	y2debug("devnum=%1(%2)",devnum,aliasnum);

	map dev = lookup(CONFIG, devtype, $[]);
	if(!haskey(dev, devnum)) {
	    y2error("main device missing: %1", devnum);
	    return;
	}

	map config = lookup(dev, devnum, $[]);
	map aliases = lookup(config, "_aliases", $[]);
	if(haskey(aliases, aliasnum)) {
	    y2error("alias already present: %1", aliasnum);
	    return;
	}

	string pth = ".network.value.\"" + sysconfig + "/ifcfg-"+devtype+devnum+":"+aliasnum+"\"";
	list values = SCR::Dir(topath(pth));
	map aliasconfig = listmap(`v, values, ``{
	    string item = SCR::Read(topath(pth+"."+v));
	    if(item!=nil) return [ v, item ];
	});

	change(aliases, aliasnum, aliasconfig);
	change(config, "_aliases", aliases);
	change(dev, devnum, config);
	change(CONFIG, devtype, dev);
    });

    y2debug("CONFIG=%1",CONFIG);
    */
    return true;
}

/**
 * Write CONFIG to files
 * @return true if success
 */
global define boolean WriteConfig() ``{

    y2debug("CONFIG=%1",CONFIG);
    string sysconfig = "/etc/sysconfig/network";

    /* remove deleted devices */
    maplist(`d, DELETED, ``{
	path p = topath(".network.section.\"" + sysconfig + "/ifcfg-" + d + "\"");
	y2debug("deleting: %1", p);
	SCR::Write(p, nil);
	/* FIXME: delete modules.conf entry */
    });

    /* write all devices */
    maplist(`typ, `devsmap, CONFIG, ``{
	maplist(`num, `devmap, devsmap, ``{
	    /* write sysconfig */
	    string dev = typ + num;
	    string p = ".network.value.\"" + sysconfig + "/ifcfg-" + dev + "\".";
	    SCR::Write(topath(p+"BOOTMODE"), "onboot");
	    SCR::Write(topath(p+"UNIQUE"), lookup(devmap, "UNIQUE", ""));
	    string proto = lookup(devmap, "BOOTPROTO", "static");
	    SCR::Write(topath(p+"BOOTPROTO"), proto);
	    if(proto == "" || proto == "static") {
		SCR::Write(topath(p+"IPADDR"), lookup(devmap, "IPADDR", ""));
		SCR::Write(topath(p+"NETMASK"), lookup(devmap, "NETMASK", ""));
		SCR::Write(topath(p+"NETWORK"), lookup(devmap, "NETWORK", ""));
		SCR::Write(topath(p+"BROADCAST"), lookup(devmap, "BROADCAST", ""));
	    }
	    else {
		SCR::Write(topath(p+"IPADDR"), nil);
		SCR::Write(topath(p+"NETMASK"), nil);
		SCR::Write(topath(p+"NETWORK"), nil);
		SCR::Write(topath(p+"BROADCAST"), nil);
	    }
	    /* write modules.conf */
	    if(modul != nil && modul != "")
		SCR::Write(.modules.alias, modul, dev);
	    if(options != nil && options != "")
		SCR::Write(.modules.options, options, dev);
	});
    });

    /* finish him */
    SCR::Write(.network, nil);
    SCR::Write(.modules, nil);

    /* clean up variables */
    DELETED = [];

    return true;
}

/**
 * Compute free devices
 * @param type device type
 * @param num how many free devices return
 * @return num of free devices
 * @example GetFreeDevices("eth", 2) -&gt; [ "eth1", "eth2" ]
 */
global define list GetFreeDevices(string type, integer num) ``{
    y2debug("CONFIG=%1",CONFIG);
    y2debug("type,num=%1,%2",type,num);
    list curdevs = mapkeys(lookup(CONFIG, type, $[]));
    list numdevs = maplist(`l, curdevs, ``(tointeger(l)));
    y2debug("curdevs=%1",curdevs);
    y2debug("numdevs=%1",numdevs);

    integer i = 0;
    integer count = 0;
    list ret = [];

    while(count < num) {
	if(!contains(numdevs, i)) {
	    change(ret, i); //sformat("%1", i));
	    count = count + 1;
	}
	i = i + 1;
    }

    y2debug("Free devices=%1",ret);
    return ret;
}

/**
 * Check if device is configured
 * @param type device type
 * @param unique device unique number
 * @return device if configured, empty string if not
 * @example IsConfigured("eth", "aazjka9yd") -&gt; "eth3"
 */
global define string IsConfigured(string type, string unique) ``{

    map devmap = lookup(CONFIG, type, $[]);
    map dev = filter(`k, `v, devmap, ``{
	//y2debug("UN(%1,%2) = %3,%4",lookup(v, "UNIQUE", ""),unique,k,v);
	return lookup(v, "UNIQUE", "") == unique;
    });

    if(dev == nil && dev == $[])
	return "";

    string n = select(mapkeys(dev), 0, "");
    if(n == "") return "";

    map onedev = lookup(dev, n, $[]);
    string proto = lookup(onedev, "BOOTPROTO", "static");

    return ProtoStatus(type+n, proto, lookup(onedev, "IPADDR", ""));
}

/**
 * FIXME -> Lan?
 */
global define string ProtoStatus(string device, string proto, string addr) ``{
    if(proto == "" || proto == "static")
	return sformat(_("Configured as %1 with address %2"), device, addr);
    else
	return sformat(_("Configured as %1 with %2"), device, toupper(proto));
}

/**
 */
global define OtherConfigured(list uniques) ``{
    list ret = [];
    maplist(`type, `devs, CONFIG, ``{
	y2debug("type=%1",type);
	maplist(`dev, `devmap, devs, ``{
	    if(!contains(uniques, lookup(devmap, "UNIQUE", ""))) {
		string proto = lookup(devmap, "BOOTPROTO", "static");
		string ipadd = lookup(devmap, "IPADDR", "");
		change(ret, ProtoStatus(type+dev,proto,ipadd));
	    }
	    else
		y2debug("type+dev=%1+%2",type,dev);
	});
    });
    return ret;
}

/**
 * Update CONFIG map
 * @param type device type
 * @param device device number
 * @param newdev new device map
 * @param check if check if device already exists
 * @return true if success
 */
global define boolean ConfigAdd(string type, integer device, map newdev, boolean check) ``{
    y2debug("CONFIG=%1",CONFIG);
    map devmap = lookup(CONFIG, type, $[]);
    string dev = sformat("%1",device);

    if(check && haskey(devmap, dev)) {
	y2error("Key already present: %1(%2)", dev, type);
	return false;
    }
    change(devmap, dev, newdev);
    change(CONFIG, type, devmap);
    y2debug("CONFIG=%1",CONFIG);
    return true;
}

/**
 * Delete a device from CONFIG map
 * @param type device type
 * @param device device number
 * @return true if success
 */
global define boolean ConfigDelete(string type, integer device) ``{
    y2debug("CONFIG=%1",CONFIG);
    map devmap = lookup(CONFIG, type, $[]);
    string dev = sformat("%1",device);

    if(!haskey(devmap, dev)) {
	y2error("Key not found: %1(%2)", dev, type);
	return false;
    }
    //remove(devmap, dev);
    devmap = remove(devmap, dev);
    change(CONFIG, type, devmap);
    y2debug("CONFIG=%1",CONFIG);
    return true;
}

/**
 * Return textual device type
 * @param type device type
 * @return textual form of device type
 * @example DeviceType("eth") -> "Ethernet"
 */
global define string DeviceType(string type) ``{
    if(type == "eth") return "Ethernet";
    if(type == "tr") return "Token-Ring";
    if(type == "fddi") return "FDDI";
    if(type == "modem") return "Modem";
    if(type == "isdn") return "ISDN";
    return type;
}

/**
 * Create overview table contents
 * @param type type of devices in the table
 * @return table items
 */
global define list CreateOverview(string type) ``{
    map devmap = lookup(CONFIG, type, $[]);

    list overview = maplist(`k, `v, devmap, ``{
	string dev = sformat("%1%2", type, k);
	string ip = lookup(v, "BOOTPROTO", "static");
	if(ip == "" || ip == "static") ip = lookup(v, "IPADDR", "");
	else ip = toupper(ip);
	return `item(`id(dev), k, DeviceType(type), dev, /*"active?",*/ ip/*, "?", "?"*/);
    });

    y2debug("overview=%1",overview);
    return overview;
}

/* EOF */
}
